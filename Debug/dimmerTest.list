
dimmerTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a71c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800a8b0  0800a8b0  0001a8b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac10  0800ac10  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac10  0800ac10  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac10  0800ac10  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac10  0800ac10  0001ac10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac14  0800ac14  0001ac14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800ac18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00001024  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200010b8  200010b8  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c37c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003158  00000000  00000000  0003c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  0003f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001600  00000000  00000000  00040c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203f3  00000000  00000000  00042298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d3fa  00000000  00000000  0006268b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5ff7  00000000  00000000  0007fa85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145a7c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b18  00000000  00000000  00145acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a894 	.word	0x0800a894

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800a894 	.word	0x0800a894

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2iz>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d215      	bcs.n	8000992 <__aeabi_d2iz+0x36>
 8000966:	d511      	bpl.n	800098c <__aeabi_d2iz+0x30>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d912      	bls.n	8000998 <__aeabi_d2iz+0x3c>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d105      	bne.n	80009a4 <__aeabi_d2iz+0x48>
 8000998:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800099c:	bf08      	it	eq
 800099e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_d2uiz>:
 80009ac:	004a      	lsls	r2, r1, #1
 80009ae:	d211      	bcs.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d211      	bcs.n	80009da <__aeabi_d2uiz+0x2e>
 80009b6:	d50d      	bpl.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d40e      	bmi.n	80009e0 <__aeabi_d2uiz+0x34>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	fa23 f002 	lsr.w	r0, r3, r2
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d102      	bne.n	80009e6 <__aeabi_d2uiz+0x3a>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	4770      	bx	lr
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	4770      	bx	lr

080009ec <writeLog>:

const float pi = 3.1415;
const float step = 0.031415;


void writeLog(int log_info, int info) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
	switch (log_info) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b07      	cmp	r3, #7
 80009fa:	d84a      	bhi.n	8000a92 <writeLog+0xa6>
 80009fc:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <writeLog+0x18>)
 80009fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a02:	bf00      	nop
 8000a04:	08000a25 	.word	0x08000a25
 8000a08:	08000a2f 	.word	0x08000a2f
 8000a0c:	08000a3b 	.word	0x08000a3b
 8000a10:	08000a47 	.word	0x08000a47
 8000a14:	08000a69 	.word	0x08000a69
 8000a18:	08000a73 	.word	0x08000a73
 8000a1c:	08000a7d 	.word	0x08000a7d
 8000a20:	08000a87 	.word	0x08000a87
	case DIGIT_CHANGED :
			sprintf(message, "[INFO] Digit changed\n");
 8000a24:	4925      	ldr	r1, [pc, #148]	; (8000abc <writeLog+0xd0>)
 8000a26:	4826      	ldr	r0, [pc, #152]	; (8000ac0 <writeLog+0xd4>)
 8000a28:	f008 fa34 	bl	8008e94 <siprintf>
			break;
 8000a2c:	e036      	b.n	8000a9c <writeLog+0xb0>
	case DIGIT_INCREASED :
			sprintf(message, "[INFO] Digit %d Increased\n", info);
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	4924      	ldr	r1, [pc, #144]	; (8000ac4 <writeLog+0xd8>)
 8000a32:	4823      	ldr	r0, [pc, #140]	; (8000ac0 <writeLog+0xd4>)
 8000a34:	f008 fa2e 	bl	8008e94 <siprintf>
			break;
 8000a38:	e030      	b.n	8000a9c <writeLog+0xb0>
	case DIGIT_DECREASED :
			sprintf(message, "[INFO] Digit %d Decreased\n", info);
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	4922      	ldr	r1, [pc, #136]	; (8000ac8 <writeLog+0xdc>)
 8000a3e:	4820      	ldr	r0, [pc, #128]	; (8000ac0 <writeLog+0xd4>)
 8000a40:	f008 fa28 	bl	8008e94 <siprintf>
			break;
 8000a44:	e02a      	b.n	8000a9c <writeLog+0xb0>
	case WAVE_CHANGED :
			sprintf(message, "[INFO] Wave changed to %s\n", ( (info == 1) ? "sinusoid" : (info == 2) ? "step" : "ramp") );
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d006      	beq.n	8000a5a <writeLog+0x6e>
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d101      	bne.n	8000a56 <writeLog+0x6a>
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <writeLog+0xe0>)
 8000a54:	e002      	b.n	8000a5c <writeLog+0x70>
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <writeLog+0xe4>)
 8000a58:	e000      	b.n	8000a5c <writeLog+0x70>
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <writeLog+0xe8>)
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	491e      	ldr	r1, [pc, #120]	; (8000ad8 <writeLog+0xec>)
 8000a60:	4817      	ldr	r0, [pc, #92]	; (8000ac0 <writeLog+0xd4>)
 8000a62:	f008 fa17 	bl	8008e94 <siprintf>
			break;
 8000a66:	e019      	b.n	8000a9c <writeLog+0xb0>
	case DIMSTEP_INCREASED :
			sprintf(message, "[INFO] DimStep increased\n");
 8000a68:	491c      	ldr	r1, [pc, #112]	; (8000adc <writeLog+0xf0>)
 8000a6a:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <writeLog+0xd4>)
 8000a6c:	f008 fa12 	bl	8008e94 <siprintf>
			break;
 8000a70:	e014      	b.n	8000a9c <writeLog+0xb0>
	case DIMSTEP_DECREASED :
			sprintf(message, "[INFO] DimStep decreased\n");
 8000a72:	491b      	ldr	r1, [pc, #108]	; (8000ae0 <writeLog+0xf4>)
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <writeLog+0xd4>)
 8000a76:	f008 fa0d 	bl	8008e94 <siprintf>
			break;
 8000a7a:	e00f      	b.n	8000a9c <writeLog+0xb0>
	case NOT_VALID_VALUE :
			sprintf(message, "[ERR] Not valid Value\n");
 8000a7c:	4919      	ldr	r1, [pc, #100]	; (8000ae4 <writeLog+0xf8>)
 8000a7e:	4810      	ldr	r0, [pc, #64]	; (8000ac0 <writeLog+0xd4>)
 8000a80:	f008 fa08 	bl	8008e94 <siprintf>
			break;
 8000a84:	e00a      	b.n	8000a9c <writeLog+0xb0>
	case CRITICAL_SITUATION :
			sprintf(message, "[WARN] Critical Situation. Light value:%d\n", info);
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	4917      	ldr	r1, [pc, #92]	; (8000ae8 <writeLog+0xfc>)
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <writeLog+0xd4>)
 8000a8c:	f008 fa02 	bl	8008e94 <siprintf>
			break;
 8000a90:	e004      	b.n	8000a9c <writeLog+0xb0>
	default :
			sprintf(message, "Unknown message\n");
 8000a92:	4916      	ldr	r1, [pc, #88]	; (8000aec <writeLog+0x100>)
 8000a94:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <writeLog+0xd4>)
 8000a96:	f008 f9fd 	bl	8008e94 <siprintf>
			break;
 8000a9a:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, message, strlen(message), 1000);
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <writeLog+0xd4>)
 8000a9e:	f7ff fb97 	bl	80001d0 <strlen>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	4905      	ldr	r1, [pc, #20]	; (8000ac0 <writeLog+0xd4>)
 8000aac:	4810      	ldr	r0, [pc, #64]	; (8000af0 <writeLog+0x104>)
 8000aae:	f006 fe69 	bl	8007784 <HAL_UART_Transmit>

}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	0800a8b0 	.word	0x0800a8b0
 8000ac0:	200006c8 	.word	0x200006c8
 8000ac4:	0800a8c8 	.word	0x0800a8c8
 8000ac8:	0800a8e4 	.word	0x0800a8e4
 8000acc:	0800a900 	.word	0x0800a900
 8000ad0:	0800a908 	.word	0x0800a908
 8000ad4:	0800a910 	.word	0x0800a910
 8000ad8:	0800a91c 	.word	0x0800a91c
 8000adc:	0800a938 	.word	0x0800a938
 8000ae0:	0800a954 	.word	0x0800a954
 8000ae4:	0800a970 	.word	0x0800a970
 8000ae8:	0800a988 	.word	0x0800a988
 8000aec:	0800a9b4 	.word	0x0800a9b4
 8000af0:	200002ec 	.word	0x200002ec

08000af4 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	static uint32_t current_time = 0;
	static uint32_t current_tone_index = 0;
    if (htim->Instance == TIM3) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a2b      	ldr	r2, [pc, #172]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d14f      	bne.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0xb2>

    	if(warnsit && HAL_GetTick() - current_time > 5) {
 8000b06:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d04b      	beq.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0xb2>
 8000b0e:	f001 fdb3 	bl	8002678 <HAL_GetTick>
 8000b12:	4602      	mov	r2, r0
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	2b05      	cmp	r3, #5
 8000b1c:	d943      	bls.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0xb2>
    		current_tone_index = (current_tone_index + 1) % 200;
 8000b1e:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000b26:	fba3 1302 	umull	r1, r3, r3, r2
 8000b2a:	099b      	lsrs	r3, r3, #6
 8000b2c:	21c8      	movs	r1, #200	; 0xc8
 8000b2e:	fb01 f303 	mul.w	r3, r1, r3
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000b36:	6013      	str	r3, [r2, #0]
    		if (warnnum == 1)
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d10c      	bne.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x66>
    			PWM_Change_Tone(sinusoid[current_tone_index].frequency, volume);
 8000b40:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b46:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	4610      	mov	r0, r2
 8000b54:	f000 f850 	bl	8000bf8 <PWM_Change_Tone>
 8000b58:	e020      	b.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0xa8>
    		else if (warnnum == 2)
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d10c      	bne.n	8000b7c <HAL_TIM_PeriodElapsedCallback+0x88>
    			PWM_Change_Tone(ustep[current_tone_index].frequency, volume);
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a1a      	ldr	r2, [pc, #104]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b68:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4619      	mov	r1, r3
 8000b74:	4610      	mov	r0, r2
 8000b76:	f000 f83f 	bl	8000bf8 <PWM_Change_Tone>
 8000b7a:	e00f      	b.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0xa8>
    		else if (warnnum == 3)
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d10b      	bne.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0xa8>
    			PWM_Change_Tone(ramp[current_tone_index].frequency, volume);
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b8a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	4610      	mov	r0, r2
 8000b98:	f000 f82e 	bl	8000bf8 <PWM_Change_Tone>
    		current_time = HAL_GetTick();
 8000b9c:	f001 fd6c 	bl	8002678 <HAL_GetTick>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ba4:	6013      	str	r3, [r2, #0]
    	}
    }
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40000400 	.word	0x40000400
 8000bb4:	200006fc 	.word	0x200006fc
 8000bb8:	20001064 	.word	0x20001064
 8000bbc:	20001068 	.word	0x20001068
 8000bc0:	51eb851f 	.word	0x51eb851f
 8000bc4:	20000014 	.word	0x20000014
 8000bc8:	20000700 	.word	0x20000700
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000d40 	.word	0x20000d40
 8000bd4:	20000a20 	.word	0x20000a20

08000bd8 <PWM_Start>:

void PWM_Start()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <PWM_Start+0x18>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <PWM_Start+0x1c>)
 8000be2:	6812      	ldr	r2, [r2, #0]
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f005 fb80 	bl	80062ec <HAL_TIM_PWM_Start>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	460a      	mov	r2, r1
 8000c02:	80fb      	strh	r3, [r7, #6]
 8000c04:	4613      	mov	r3, r2
 8000c06:	80bb      	strh	r3, [r7, #4]
    if (pwm_freq == 0 || pwm_freq > 20000)
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d004      	beq.n	8000c18 <PWM_Change_Tone+0x20>
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d937      	bls.n	8000c88 <PWM_Change_Tone+0x90>
    {
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8000c18:	4b52      	ldr	r3, [pc, #328]	; (8000d64 <PWM_Change_Tone+0x16c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d105      	bne.n	8000c2c <PWM_Change_Tone+0x34>
 8000c20:	4b51      	ldr	r3, [pc, #324]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2200      	movs	r2, #0
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
 8000c2a:	e097      	b.n	8000d5c <PWM_Change_Tone+0x164>
 8000c2c:	4b4d      	ldr	r3, [pc, #308]	; (8000d64 <PWM_Change_Tone+0x16c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d105      	bne.n	8000c40 <PWM_Change_Tone+0x48>
 8000c34:	4b4c      	ldr	r3, [pc, #304]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	6393      	str	r3, [r2, #56]	; 0x38
 8000c3e:	e08d      	b.n	8000d5c <PWM_Change_Tone+0x164>
 8000c40:	4b48      	ldr	r3, [pc, #288]	; (8000d64 <PWM_Change_Tone+0x16c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b08      	cmp	r3, #8
 8000c46:	d105      	bne.n	8000c54 <PWM_Change_Tone+0x5c>
 8000c48:	4b47      	ldr	r3, [pc, #284]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	2300      	movs	r3, #0
 8000c50:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c52:	e083      	b.n	8000d5c <PWM_Change_Tone+0x164>
 8000c54:	4b43      	ldr	r3, [pc, #268]	; (8000d64 <PWM_Change_Tone+0x16c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b0c      	cmp	r3, #12
 8000c5a:	d105      	bne.n	8000c68 <PWM_Change_Tone+0x70>
 8000c5c:	4b42      	ldr	r3, [pc, #264]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	2300      	movs	r3, #0
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	e079      	b.n	8000d5c <PWM_Change_Tone+0x164>
 8000c68:	4b3e      	ldr	r3, [pc, #248]	; (8000d64 <PWM_Change_Tone+0x16c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b10      	cmp	r3, #16
 8000c6e:	d105      	bne.n	8000c7c <PWM_Change_Tone+0x84>
 8000c70:	4b3d      	ldr	r3, [pc, #244]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	2300      	movs	r3, #0
 8000c78:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7a:	e06f      	b.n	8000d5c <PWM_Change_Tone+0x164>
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	2300      	movs	r3, #0
 8000c84:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c86:	e069      	b.n	8000d5c <PWM_Change_Tone+0x164>
    }
    else
    {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8000c88:	f004 ff02 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 8000c8c:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	69fa      	ldr	r2, [r7, #28]
 8000c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c96:	4a35      	ldr	r2, [pc, #212]	; (8000d6c <PWM_Change_Tone+0x174>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	0b9b      	lsrs	r3, r3, #14
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 8000ca4:	8b7b      	ldrh	r3, [r7, #26]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cac:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	4a2b      	ldr	r2, [pc, #172]	; (8000d70 <PWM_Change_Tone+0x178>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	09db      	lsrs	r3, r3, #7
 8000cc8:	60fb      	str	r3, [r7, #12]

        pwm_timer->Instance->PSC = prescaler - 1;
 8000cca:	8b7b      	ldrh	r3, [r7, #26]
 8000ccc:	1e5a      	subs	r2, r3, #1
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timer->Instance->ARR = period_cycles - 1;
 8000cd6:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	3a01      	subs	r2, #1
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timer->Instance->EGR = TIM_EGR_UG;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <PWM_Change_Tone+0x16c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d105      	bne.n	8000d00 <PWM_Change_Tone+0x108>
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8000cfe:	e02d      	b.n	8000d5c <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <PWM_Change_Tone+0x16c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b04      	cmp	r3, #4
 8000d06:	d105      	bne.n	8000d14 <PWM_Change_Tone+0x11c>
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000d12:	e023      	b.n	8000d5c <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <PWM_Change_Tone+0x16c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b08      	cmp	r3, #8
 8000d1a:	d105      	bne.n	8000d28 <PWM_Change_Tone+0x130>
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000d26:	e019      	b.n	8000d5c <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <PWM_Change_Tone+0x16c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b0c      	cmp	r3, #12
 8000d2e:	d105      	bne.n	8000d3c <PWM_Change_Tone+0x144>
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d3a:	e00f      	b.n	8000d5c <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <PWM_Change_Tone+0x16c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b10      	cmp	r3, #16
 8000d42:	d105      	bne.n	8000d50 <PWM_Change_Tone+0x158>
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000d4e:	e005      	b.n	8000d5c <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <PWM_Change_Tone+0x170>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000d5a:	e7ff      	b.n	8000d5c <PWM_Change_Tone+0x164>
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000004 	.word	0x20000004
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	45e7b273 	.word	0x45e7b273
 8000d70:	10624dd3 	.word	0x10624dd3

08000d74 <warn>:


int last_warn_change = -300;

void warn(int light) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	if(HAL_GetTick() - last_warn_change < 300)
 8000d7c:	f001 fc7c 	bl	8002678 <HAL_GetTick>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <warn+0x64>)
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d8c:	d31f      	bcc.n	8000dce <warn+0x5a>
		return;
//	sprintf(message, "warn on %d - %d\n", HAL_GetTick(), last_warn_change);
//	HAL_UART_Transmit(&huart2, message, strlen(message), 100);
	writeLog(CRITICAL_SITUATION, light);
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	2007      	movs	r0, #7
 8000d92:	f7ff fe2b 	bl	80009ec <writeLog>
//	HAL_UART_Transmit(&huart2, message, 12, 1000);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000d96:	2100      	movs	r1, #0
 8000d98:	4810      	ldr	r0, [pc, #64]	; (8000ddc <warn+0x68>)
 8000d9a:	f005 fba7 	bl	80064ec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000d9e:	2104      	movs	r1, #4
 8000da0:	480e      	ldr	r0, [pc, #56]	; (8000ddc <warn+0x68>)
 8000da2:	f005 fba3 	bl	80064ec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000da6:	2108      	movs	r1, #8
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <warn+0x68>)
 8000daa:	f005 fb9f 	bl	80064ec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000dae:	210c      	movs	r1, #12
 8000db0:	480a      	ldr	r0, [pc, #40]	; (8000ddc <warn+0x68>)
 8000db2:	f005 fb9b 	bl	80064ec <HAL_TIM_PWM_Stop>
	warncount++;
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <warn+0x6c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <warn+0x6c>)
 8000dbe:	6013      	str	r3, [r2, #0]
	last_warn_change = HAL_GetTick();
 8000dc0:	f001 fc5a 	bl	8002678 <HAL_GetTick>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <warn+0x64>)
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e000      	b.n	8000dd0 <warn+0x5c>
		return;
 8000dce:	bf00      	nop
}
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000001c 	.word	0x2000001c
 8000ddc:	20000208 	.word	0x20000208
 8000de0:	20000660 	.word	0x20000660

08000de4 <warnOff>:

void warnOff() {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

	if(HAL_GetTick() - last_warn_change < 300)
 8000de8:	f001 fc46 	bl	8002678 <HAL_GetTick>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4a11      	ldr	r2, [pc, #68]	; (8000e34 <warnOff+0x50>)
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000df8:	d31a      	bcc.n	8000e30 <warnOff+0x4c>
		return;
//	sprintf(message, "warn off %d - %d\n", HAL_GetTick(), last_warn_change);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	480e      	ldr	r0, [pc, #56]	; (8000e38 <warnOff+0x54>)
 8000dfe:	f005 fa75 	bl	80062ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e02:	2104      	movs	r1, #4
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <warnOff+0x54>)
 8000e06:	f005 fa71 	bl	80062ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	480a      	ldr	r0, [pc, #40]	; (8000e38 <warnOff+0x54>)
 8000e0e:	f005 fa6d 	bl	80062ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000e12:	210c      	movs	r1, #12
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <warnOff+0x54>)
 8000e16:	f005 fa69 	bl	80062ec <HAL_TIM_PWM_Start>
	PWM_Change_Tone(0, 0);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff feeb 	bl	8000bf8 <PWM_Change_Tone>
	last_warn_change = HAL_GetTick();
 8000e22:	f001 fc29 	bl	8002678 <HAL_GetTick>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b02      	ldr	r3, [pc, #8]	; (8000e34 <warnOff+0x50>)
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e000      	b.n	8000e32 <warnOff+0x4e>
		return;
 8000e30:	bf00      	nop

}
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000001c 	.word	0x2000001c
 8000e38:	20000208 	.word	0x20000208

08000e3c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

		static int current_time = 0;
		static int sample = 0;
		static int buff[10];
		int x;
		buff[sample] = HAL_ADC_GetValue(&hadc1);
 8000e44:	4827      	ldr	r0, [pc, #156]	; (8000ee4 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000e46:	f001 ff7b 	bl	8002d40 <HAL_ADC_GetValue>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <HAL_ADC_ConvCpltCallback+0xac>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4a26      	ldr	r2, [pc, #152]	; (8000eec <HAL_ADC_ConvCpltCallback+0xb0>)
 8000e54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sample += 1;
 8000e58:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <HAL_ADC_ConvCpltCallback+0xac>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <HAL_ADC_ConvCpltCallback+0xac>)
 8000e60:	6013      	str	r3, [r2, #0]
		if(sample == 10) {
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <HAL_ADC_ConvCpltCallback+0xac>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b0a      	cmp	r3, #10
 8000e68:	d134      	bne.n	8000ed4 <HAL_ADC_ConvCpltCallback+0x98>
			sample = 0;
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <HAL_ADC_ConvCpltCallback+0xac>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
			x = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
			for(int i = 0; i < 10; ++i) {
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	e00b      	b.n	8000e92 <HAL_ADC_ConvCpltCallback+0x56>
				x = (x > buff[i]) ? x : buff[i];
 8000e7a:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <HAL_ADC_ConvCpltCallback+0xb0>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4293      	cmp	r3, r2
 8000e86:	bfb8      	it	lt
 8000e88:	4613      	movlt	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]
			for(int i = 0; i < 10; ++i) {
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2b09      	cmp	r3, #9
 8000e96:	ddf0      	ble.n	8000e7a <HAL_ADC_ConvCpltCallback+0x3e>
			}

			if(x > treshhold && warnsit == 0) {
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	dd0a      	ble.n	8000eb8 <HAL_ADC_ConvCpltCallback+0x7c>
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d106      	bne.n	8000eb8 <HAL_ADC_ConvCpltCallback+0x7c>
					warnsit = 1;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
					warn(x);
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f7ff ff5f 	bl	8000d74 <warn>
 8000eb6:	e00d      	b.n	8000ed4 <HAL_ADC_ConvCpltCallback+0x98>
			} else if(x <= treshhold && warnsit == 1) {
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	dc08      	bgt.n	8000ed4 <HAL_ADC_ConvCpltCallback+0x98>
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d104      	bne.n	8000ed4 <HAL_ADC_ConvCpltCallback+0x98>
				warnOff();
 8000eca:	f7ff ff8b 	bl	8000de4 <warnOff>
				warnsit = 0;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]

			}
		}
		HAL_ADC_Start_IT(&hadc1);
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000ed6:	f001 fdf3 	bl	8002ac0 <HAL_ADC_Start_IT>

}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000b0 	.word	0x200000b0
 8000ee8:	2000106c 	.word	0x2000106c
 8000eec:	20001070 	.word	0x20001070
 8000ef0:	20000018 	.word	0x20000018
 8000ef4:	200006fc 	.word	0x200006fc

08000ef8 <setDimstep>:

void setDimstep(int val) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	if(val >= 0 && val <= 9) {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db3c      	blt.n	8000f80 <setDimstep+0x88>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b09      	cmp	r3, #9
 8000f0a:	dc39      	bgt.n	8000f80 <setDimstep+0x88>
		if(val > dimstep)
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <setDimstep+0x9c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	dd04      	ble.n	8000f20 <setDimstep+0x28>
			writeLog(DIMSTEP_INCREASED, 0);
 8000f16:	2100      	movs	r1, #0
 8000f18:	2004      	movs	r0, #4
 8000f1a:	f7ff fd67 	bl	80009ec <writeLog>
 8000f1e:	e003      	b.n	8000f28 <setDimstep+0x30>
		else
			writeLog(DIMSTEP_DECREASED, 0);
 8000f20:	2100      	movs	r1, #0
 8000f22:	2005      	movs	r0, #5
 8000f24:	f7ff fd62 	bl	80009ec <writeLog>
		dimstep = val;
 8000f28:	4a1a      	ldr	r2, [pc, #104]	; (8000f94 <setDimstep+0x9c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
		TIM1->CCR1 = (lights >= 1) ? dimstep : 0;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <setDimstep+0xa0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	dd02      	ble.n	8000f3c <setDimstep+0x44>
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <setDimstep+0x9c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	e000      	b.n	8000f3e <setDimstep+0x46>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <setDimstep+0xa4>)
 8000f40:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = (lights >= 2) ? dimstep : 0;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <setDimstep+0xa0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	dd02      	ble.n	8000f50 <setDimstep+0x58>
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <setDimstep+0x9c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	e000      	b.n	8000f52 <setDimstep+0x5a>
 8000f50:	2300      	movs	r3, #0
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <setDimstep+0xa4>)
 8000f54:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = (lights >= 3) ? dimstep : 0;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <setDimstep+0xa0>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	dd02      	ble.n	8000f64 <setDimstep+0x6c>
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <setDimstep+0x9c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	e000      	b.n	8000f66 <setDimstep+0x6e>
 8000f64:	2300      	movs	r3, #0
 8000f66:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <setDimstep+0xa4>)
 8000f68:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM1->CCR4 = (lights >= 4) ? dimstep : 0;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <setDimstep+0xa0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	dd02      	ble.n	8000f78 <setDimstep+0x80>
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <setDimstep+0x9c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	e000      	b.n	8000f7a <setDimstep+0x82>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <setDimstep+0xa4>)
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	e004      	b.n	8000f8a <setDimstep+0x92>
	} else {
		writeLog(NOT_VALID_VALUE, 0);
 8000f80:	2100      	movs	r1, #0
 8000f82:	2006      	movs	r0, #6
 8000f84:	f7ff fd32 	bl	80009ec <writeLog>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000000c 	.word	0x2000000c
 8000f98:	20000010 	.word	0x20000010
 8000f9c:	40012c00 	.word	0x40012c00

08000fa0 <setLights>:

void setLights(int val) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	if(val >= 0 && val <= 4) {
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <setLights+0x26>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	dc08      	bgt.n	8000fc6 <setLights+0x26>
		lights = val;
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <setLights+0x38>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
		setDimstep(dimstep);
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <setLights+0x3c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff9a 	bl	8000ef8 <setDimstep>
 8000fc4:	e004      	b.n	8000fd0 <setLights+0x30>
	}
	else {
		writeLog(NOT_VALID_VALUE, 0);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2006      	movs	r0, #6
 8000fca:	f7ff fd0f 	bl	80009ec <writeLog>
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000010 	.word	0x20000010
 8000fdc:	2000000c 	.word	0x2000000c

08000fe0 <setWarnnum>:

void setWarnnum(int val) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	if(val >= 1 && val <= 3) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	dd0c      	ble.n	8001008 <setWarnnum+0x28>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	dc09      	bgt.n	8001008 <setWarnnum+0x28>
		warnnum = val;
 8000ff4:	4a09      	ldr	r2, [pc, #36]	; (800101c <setWarnnum+0x3c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
		writeLog(WAVE_CHANGED, warnnum);
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <setWarnnum+0x3c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	2003      	movs	r0, #3
 8001002:	f7ff fcf3 	bl	80009ec <writeLog>
 8001006:	e004      	b.n	8001012 <setWarnnum+0x32>
	}
	else {
		writeLog(NOT_VALID_VALUE, 0);
 8001008:	2100      	movs	r1, #0
 800100a:	2006      	movs	r0, #6
 800100c:	f7ff fcee 	bl	80009ec <writeLog>
	}
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000014 	.word	0x20000014

08001020 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a30      	ldr	r2, [pc, #192]	; (80010f0 <HAL_UART_RxCpltCallback+0xd0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d159      	bne.n	80010e6 <HAL_UART_RxCpltCallback+0xc6>
    {
    	static unsigned char command[10];
    	static int in_val;
    	if(in_data[0] == 'D') {
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <HAL_UART_RxCpltCallback+0xd4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b44      	cmp	r3, #68	; 0x44
 8001038:	d119      	bne.n	800106e <HAL_UART_RxCpltCallback+0x4e>
    		HAL_UART_Receive(&huart2, in_data, 1, 100);
 800103a:	2364      	movs	r3, #100	; 0x64
 800103c:	2201      	movs	r2, #1
 800103e:	492d      	ldr	r1, [pc, #180]	; (80010f4 <HAL_UART_RxCpltCallback+0xd4>)
 8001040:	482d      	ldr	r0, [pc, #180]	; (80010f8 <HAL_UART_RxCpltCallback+0xd8>)
 8001042:	f006 fc29 	bl	8007898 <HAL_UART_Receive>
    		message[0] = '\n';
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <HAL_UART_RxCpltCallback+0xdc>)
 8001048:	220a      	movs	r2, #10
 800104a:	701a      	strb	r2, [r3, #0]
    		HAL_UART_Transmit(&huart2, message, 1, 100);
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	2201      	movs	r2, #1
 8001050:	492a      	ldr	r1, [pc, #168]	; (80010fc <HAL_UART_RxCpltCallback+0xdc>)
 8001052:	4829      	ldr	r0, [pc, #164]	; (80010f8 <HAL_UART_RxCpltCallback+0xd8>)
 8001054:	f006 fb96 	bl	8007784 <HAL_UART_Transmit>
    		in_val = in_data[0] - '0';
 8001058:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <HAL_UART_RxCpltCallback+0xd4>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	3b30      	subs	r3, #48	; 0x30
 800105e:	4a28      	ldr	r2, [pc, #160]	; (8001100 <HAL_UART_RxCpltCallback+0xe0>)
 8001060:	6013      	str	r3, [r2, #0]
    		setDimstep(in_val);
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <HAL_UART_RxCpltCallback+0xe0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff46 	bl	8000ef8 <setDimstep>
 800106c:	e02b      	b.n	80010c6 <HAL_UART_RxCpltCallback+0xa6>
    	}
    	else if(in_data[0] == 'L') {
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_UART_RxCpltCallback+0xd4>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b4c      	cmp	r3, #76	; 0x4c
 8001074:	d113      	bne.n	800109e <HAL_UART_RxCpltCallback+0x7e>
    		message[0] = '\n';
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <HAL_UART_RxCpltCallback+0xdc>)
 8001078:	220a      	movs	r2, #10
 800107a:	701a      	strb	r2, [r3, #0]
    		HAL_UART_Transmit(&huart2, message, 1, 100);
 800107c:	2364      	movs	r3, #100	; 0x64
 800107e:	2201      	movs	r2, #1
 8001080:	491e      	ldr	r1, [pc, #120]	; (80010fc <HAL_UART_RxCpltCallback+0xdc>)
 8001082:	481d      	ldr	r0, [pc, #116]	; (80010f8 <HAL_UART_RxCpltCallback+0xd8>)
 8001084:	f006 fb7e 	bl	8007784 <HAL_UART_Transmit>
    		in_val = in_data[7] - '0';
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_UART_RxCpltCallback+0xd4>)
 800108a:	79db      	ldrb	r3, [r3, #7]
 800108c:	3b30      	subs	r3, #48	; 0x30
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <HAL_UART_RxCpltCallback+0xe0>)
 8001090:	6013      	str	r3, [r2, #0]
    		setLights(in_val);
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_UART_RxCpltCallback+0xe0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff82 	bl	8000fa0 <setLights>
 800109c:	e013      	b.n	80010c6 <HAL_UART_RxCpltCallback+0xa6>
    	}
    	else if(in_data[0] == 'W') {
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_UART_RxCpltCallback+0xd4>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b57      	cmp	r3, #87	; 0x57
 80010a4:	d10f      	bne.n	80010c6 <HAL_UART_RxCpltCallback+0xa6>
    		HAL_UART_Receive(&huart2, in_data, 1, 100);
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	2201      	movs	r2, #1
 80010aa:	4912      	ldr	r1, [pc, #72]	; (80010f4 <HAL_UART_RxCpltCallback+0xd4>)
 80010ac:	4812      	ldr	r0, [pc, #72]	; (80010f8 <HAL_UART_RxCpltCallback+0xd8>)
 80010ae:	f006 fbf3 	bl	8007898 <HAL_UART_Receive>
    		in_val = in_data[0] - '0';
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_UART_RxCpltCallback+0xd4>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	3b30      	subs	r3, #48	; 0x30
 80010b8:	4a11      	ldr	r2, [pc, #68]	; (8001100 <HAL_UART_RxCpltCallback+0xe0>)
 80010ba:	6013      	str	r3, [r2, #0]
    		setWarnnum(in_val);
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_UART_RxCpltCallback+0xe0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff8d 	bl	8000fe0 <setWarnnum>
    	}
    	sprintf(message, "\n");
 80010c6:	490f      	ldr	r1, [pc, #60]	; (8001104 <HAL_UART_RxCpltCallback+0xe4>)
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <HAL_UART_RxCpltCallback+0xdc>)
 80010ca:	f007 fee3 	bl	8008e94 <siprintf>
    	HAL_UART_Transmit(&huart2, message, 1, 1000);
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	2201      	movs	r2, #1
 80010d4:	4909      	ldr	r1, [pc, #36]	; (80010fc <HAL_UART_RxCpltCallback+0xdc>)
 80010d6:	4808      	ldr	r0, [pc, #32]	; (80010f8 <HAL_UART_RxCpltCallback+0xd8>)
 80010d8:	f006 fb54 	bl	8007784 <HAL_UART_Transmit>
    	HAL_UART_Receive_IT(&huart2, in_data, 8);
 80010dc:	2208      	movs	r2, #8
 80010de:	4905      	ldr	r1, [pc, #20]	; (80010f4 <HAL_UART_RxCpltCallback+0xd4>)
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <HAL_UART_RxCpltCallback+0xd8>)
 80010e2:	f006 fc8f 	bl	8007a04 <HAL_UART_Receive_IT>

    }
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40004400 	.word	0x40004400
 80010f4:	20000664 	.word	0x20000664
 80010f8:	200002ec 	.word	0x200002ec
 80010fc:	200006c8 	.word	0x200006c8
 8001100:	20001098 	.word	0x20001098
 8001104:	0800a9c8 	.word	0x0800a9c8

08001108 <display_digit>:
void display_digit(int n, int d, int delay, int dp){
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	603b      	str	r3, [r7, #0]
	// Which of the four digits is this
	// Active high 7-segment, low pin -> digit on
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, d == 0 ? 0 : 1);
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	bf14      	ite	ne
 800111c:	2301      	movne	r3, #1
 800111e:	2300      	moveq	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001128:	4847      	ldr	r0, [pc, #284]	; (8001248 <display_digit+0x140>)
 800112a:	f003 f8cf 	bl	80042cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, d == 1 ? 0 : 1);
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b01      	cmp	r3, #1
 8001132:	bf14      	ite	ne
 8001134:	2301      	movne	r3, #1
 8001136:	2300      	moveq	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001140:	4841      	ldr	r0, [pc, #260]	; (8001248 <display_digit+0x140>)
 8001142:	f003 f8c3 	bl	80042cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, d == 2 ? 0 : 1);
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2b02      	cmp	r3, #2
 800114a:	bf14      	ite	ne
 800114c:	2301      	movne	r3, #1
 800114e:	2300      	moveq	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001158:	483b      	ldr	r0, [pc, #236]	; (8001248 <display_digit+0x140>)
 800115a:	f003 f8b7 	bl	80042cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, d == 3 ? 0 : 1);
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	2b03      	cmp	r3, #3
 8001162:	bf14      	ite	ne
 8001164:	2301      	movne	r3, #1
 8001166:	2300      	moveq	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001170:	4835      	ldr	r0, [pc, #212]	; (8001248 <display_digit+0x140>)
 8001172:	f003 f8ab 	bl	80042cc <HAL_GPIO_WritePin>

    // ABCD BCD Output
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, (n == 1 || n == 3 || n == 5 || n == 7 || n == 9));
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d00b      	beq.n	8001194 <display_digit+0x8c>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d008      	beq.n	8001194 <display_digit+0x8c>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b05      	cmp	r3, #5
 8001186:	d005      	beq.n	8001194 <display_digit+0x8c>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b07      	cmp	r3, #7
 800118c:	d002      	beq.n	8001194 <display_digit+0x8c>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b09      	cmp	r3, #9
 8001192:	d101      	bne.n	8001198 <display_digit+0x90>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <display_digit+0x92>
 8001198:	2300      	movs	r3, #0
 800119a:	b2db      	uxtb	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a2:	4829      	ldr	r0, [pc, #164]	; (8001248 <display_digit+0x140>)
 80011a4:	f003 f892 	bl	80042cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, (n == 2 || n == 3 || n == 6 || n == 7));
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d008      	beq.n	80011c0 <display_digit+0xb8>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d005      	beq.n	80011c0 <display_digit+0xb8>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d002      	beq.n	80011c0 <display_digit+0xb8>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b07      	cmp	r3, #7
 80011be:	d101      	bne.n	80011c4 <display_digit+0xbc>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <display_digit+0xbe>
 80011c4:	2300      	movs	r3, #0
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ce:	481e      	ldr	r0, [pc, #120]	; (8001248 <display_digit+0x140>)
 80011d0:	f003 f87c 	bl	80042cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, (n == 4 || n == 5 || n == 6 || n == 7));
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d008      	beq.n	80011ec <display_digit+0xe4>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2b05      	cmp	r3, #5
 80011de:	d005      	beq.n	80011ec <display_digit+0xe4>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d002      	beq.n	80011ec <display_digit+0xe4>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	d101      	bne.n	80011f0 <display_digit+0xe8>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <display_digit+0xea>
 80011f0:	2300      	movs	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fa:	4813      	ldr	r0, [pc, #76]	; (8001248 <display_digit+0x140>)
 80011fc:	f003 f866 	bl	80042cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, (n == 8 || n == 9));
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b08      	cmp	r3, #8
 8001204:	d002      	beq.n	800120c <display_digit+0x104>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b09      	cmp	r3, #9
 800120a:	d101      	bne.n	8001210 <display_digit+0x108>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <display_digit+0x10a>
 8001210:	2300      	movs	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <display_digit+0x140>)
 800121c:	f003 f856 	bl	80042cc <HAL_GPIO_WritePin>

    // Is decimal point on or off for digit?
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, dp == 1 ? 1 : 0);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	bf0c      	ite	eq
 8001226:	2301      	moveq	r3, #1
 8001228:	2300      	movne	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	2140      	movs	r1, #64	; 0x40
 8001230:	4806      	ldr	r0, [pc, #24]	; (800124c <display_digit+0x144>)
 8001232:	f003 f84b 	bl	80042cc <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4618      	mov	r0, r3
 800123a:	f001 fa29 	bl	8002690 <HAL_Delay>
  }
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	48000c00 	.word	0x48000c00
 800124c:	48000800 	.word	0x48000800

08001250 <HAL_GPIO_EXTI_Callback>:
int selected = 1;
uint32_t last_interrupt = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
	if (last_interrupt == 0)
 800125a:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x174>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d105      	bne.n	800126e <HAL_GPIO_EXTI_Callback+0x1e>
		last_interrupt = HAL_GetTick();
 8001262:	f001 fa09 	bl	8002678 <HAL_GetTick>
 8001266:	4603      	mov	r3, r0
 8001268:	4a56      	ldr	r2, [pc, #344]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x174>)
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	e00d      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x3a>
	else if (HAL_GetTick()-last_interrupt < 200){
 800126e:	f001 fa03 	bl	8002678 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	4b53      	ldr	r3, [pc, #332]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x174>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2bc7      	cmp	r3, #199	; 0xc7
 800127c:	f240 809e 	bls.w	80013bc <HAL_GPIO_EXTI_Callback+0x16c>
		return;
	}
	else
		last_interrupt = HAL_GetTick();
 8001280:	f001 f9fa 	bl	8002678 <HAL_GetTick>
 8001284:	4603      	mov	r3, r0
 8001286:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x174>)
 8001288:	6013      	str	r3, [r2, #0]

	if (GPIO_Pin == GPIO_PIN_7){
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	2b80      	cmp	r3, #128	; 0x80
 800128e:	d10c      	bne.n	80012aa <HAL_GPIO_EXTI_Callback+0x5a>
		if (selected == 1)
 8001290:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x178>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d103      	bne.n	80012a0 <HAL_GPIO_EXTI_Callback+0x50>
		  selected = 3;
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x178>)
 800129a:	2203      	movs	r2, #3
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e004      	b.n	80012aa <HAL_GPIO_EXTI_Callback+0x5a>
		else
		  selected -= 1;
 80012a0:	4b49      	ldr	r3, [pc, #292]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x178>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	4a48      	ldr	r2, [pc, #288]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x178>)
 80012a8:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == GPIO_PIN_8){
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b0:	d144      	bne.n	800133c <HAL_GPIO_EXTI_Callback+0xec>
		writeLog(DIGIT_CHANGED, 0);
 80012b2:	2100      	movs	r1, #0
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fb99 	bl	80009ec <writeLog>
		writeLog(DIGIT_INCREASED, selected);
 80012ba:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x178>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff fb93 	bl	80009ec <writeLog>
		if (selected == 1){
 80012c6:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x178>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10c      	bne.n	80012e8 <HAL_GPIO_EXTI_Callback+0x98>
			setWarnnum((warnnum < 3 ? warnnum + 1 : 1));
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <HAL_GPIO_EXTI_Callback+0x17c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	dc03      	bgt.n	80012de <HAL_GPIO_EXTI_Callback+0x8e>
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <HAL_GPIO_EXTI_Callback+0x17c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_EXTI_Callback+0x90>
 80012de:	2301      	movs	r3, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fe7d 	bl	8000fe0 <setWarnnum>
 80012e6:	e029      	b.n	800133c <HAL_GPIO_EXTI_Callback+0xec>
		}
		else if (selected == 2){
 80012e8:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x178>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d110      	bne.n	8001312 <HAL_GPIO_EXTI_Callback+0xc2>
			setLights((lights + 1) % 5);
 80012f0:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x180>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x184>)
 80012f8:	fb83 1302 	smull	r1, r3, r3, r2
 80012fc:	1059      	asrs	r1, r3, #1
 80012fe:	17d3      	asrs	r3, r2, #31
 8001300:	1ac9      	subs	r1, r1, r3
 8001302:	460b      	mov	r3, r1
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	1ad1      	subs	r1, r2, r3
 800130a:	4608      	mov	r0, r1
 800130c:	f7ff fe48 	bl	8000fa0 <setLights>
 8001310:	e014      	b.n	800133c <HAL_GPIO_EXTI_Callback+0xec>
		}
		else if (selected == 3){
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x178>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b03      	cmp	r3, #3
 8001318:	d110      	bne.n	800133c <HAL_GPIO_EXTI_Callback+0xec>
			setDimstep((dimstep + 1) % 10);
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x188>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x184>)
 8001322:	fb83 1302 	smull	r1, r3, r3, r2
 8001326:	1099      	asrs	r1, r3, #2
 8001328:	17d3      	asrs	r3, r2, #31
 800132a:	1ac9      	subs	r1, r1, r3
 800132c:	460b      	mov	r3, r1
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	1ad1      	subs	r1, r2, r3
 8001336:	4608      	mov	r0, r1
 8001338:	f7ff fdde 	bl	8000ef8 <setDimstep>
		}
	}
	if (GPIO_Pin == GPIO_PIN_9){
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001342:	d13c      	bne.n	80013be <HAL_GPIO_EXTI_Callback+0x16e>
		writeLog(DIGIT_CHANGED, 0);
 8001344:	2100      	movs	r1, #0
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff fb50 	bl	80009ec <writeLog>
		writeLog(DIGIT_DECREASED, selected);
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x178>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	2002      	movs	r0, #2
 8001354:	f7ff fb4a 	bl	80009ec <writeLog>
		if (selected == 1){
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x178>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10b      	bne.n	8001378 <HAL_GPIO_EXTI_Callback+0x128>
			warnnum = warnnum >  1 ? warnnum - 1 : 3;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <HAL_GPIO_EXTI_Callback+0x17c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	dd03      	ble.n	8001370 <HAL_GPIO_EXTI_Callback+0x120>
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_GPIO_EXTI_Callback+0x17c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	e000      	b.n	8001372 <HAL_GPIO_EXTI_Callback+0x122>
 8001370:	2303      	movs	r3, #3
 8001372:	4a16      	ldr	r2, [pc, #88]	; (80013cc <HAL_GPIO_EXTI_Callback+0x17c>)
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e022      	b.n	80013be <HAL_GPIO_EXTI_Callback+0x16e>
		}
		else if (selected == 2){
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x178>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d10c      	bne.n	800139a <HAL_GPIO_EXTI_Callback+0x14a>
			setLights(lights > 0 ? lights - 1 : 4);
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x180>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	dd03      	ble.n	8001390 <HAL_GPIO_EXTI_Callback+0x140>
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x180>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3b01      	subs	r3, #1
 800138e:	e000      	b.n	8001392 <HAL_GPIO_EXTI_Callback+0x142>
 8001390:	2304      	movs	r3, #4
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fe04 	bl	8000fa0 <setLights>
 8001398:	e011      	b.n	80013be <HAL_GPIO_EXTI_Callback+0x16e>
		}
		else if (selected == 3){
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x178>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d10d      	bne.n	80013be <HAL_GPIO_EXTI_Callback+0x16e>
			setDimstep(dimstep > 0 ? dimstep - 1 : 9);
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x188>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	dd03      	ble.n	80013b2 <HAL_GPIO_EXTI_Callback+0x162>
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x188>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_EXTI_Callback+0x164>
 80013b2:	2309      	movs	r3, #9
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fd9f 	bl	8000ef8 <setDimstep>
 80013ba:	e000      	b.n	80013be <HAL_GPIO_EXTI_Callback+0x16e>
		return;
 80013bc:	bf00      	nop
		}
	}
}
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20001060 	.word	0x20001060
 80013c8:	20000020 	.word	0x20000020
 80013cc:	20000014 	.word	0x20000014
 80013d0:	20000010 	.word	0x20000010
 80013d4:	66666667 	.word	0x66666667
 80013d8:	2000000c 	.word	0x2000000c

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	double f = 0;
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i = 0; i < 200; ++i) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	e040      	b.n	8001476 <main+0x9a>
		sinusoid[i].frequency = round(sin(f) * 2000 + 2000);
 80013f4:	ed97 0b04 	vldr	d0, [r7, #16]
 80013f8:	f008 fa02 	bl	8009800 <sin>
 80013fc:	ec51 0b10 	vmov	r0, r1, d0
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4b6f      	ldr	r3, [pc, #444]	; (80015c4 <main+0x1e8>)
 8001406:	f7fe ff3b 	bl	8000280 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b6b      	ldr	r3, [pc, #428]	; (80015c4 <main+0x1e8>)
 8001418:	f7ff f862 	bl	80004e0 <__adddf3>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	ec43 2b17 	vmov	d7, r2, r3
 8001424:	eeb0 0a47 	vmov.f32	s0, s14
 8001428:	eef0 0a67 	vmov.f32	s1, s15
 800142c:	f008 f9a0 	bl	8009770 <round>
 8001430:	ec53 2b10 	vmov	r2, r3, d0
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fab8 	bl	80009ac <__aeabi_d2uiz>
 800143c:	4603      	mov	r3, r0
 800143e:	b299      	uxth	r1, r3
 8001440:	4a61      	ldr	r2, [pc, #388]	; (80015c8 <main+0x1ec>)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		sinusoid[i].duration = 5;
 8001448:	4a5f      	ldr	r2, [pc, #380]	; (80015c8 <main+0x1ec>)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	2205      	movs	r2, #5
 8001452:	805a      	strh	r2, [r3, #2]
		f += step;
 8001454:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <main+0x1f0>)
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f9a0 	bl	800079c <__aeabi_f2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001464:	f7ff f83c 	bl	80004e0 <__adddf3>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i = 0; i < 200; ++i) {
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3301      	adds	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2bc7      	cmp	r3, #199	; 0xc7
 800147a:	ddbb      	ble.n	80013f4 <main+0x18>
	}

	for(int i = 0; i < 200; ++i) {
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	e013      	b.n	80014aa <main+0xce>
		ramp[i].frequency = i * 20;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	b29b      	uxth	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	b299      	uxth	r1, r3
 8001490:	4a4f      	ldr	r2, [pc, #316]	; (80015d0 <main+0x1f4>)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		ramp[i].duration = 5;
 8001498:	4a4d      	ldr	r2, [pc, #308]	; (80015d0 <main+0x1f4>)
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	2205      	movs	r2, #5
 80014a2:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i < 200; ++i) {
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	3301      	adds	r3, #1
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2bc7      	cmp	r3, #199	; 0xc7
 80014ae:	dde8      	ble.n	8001482 <main+0xa6>
	}

	for(int i = 0; i < 200; ++i) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	e013      	b.n	80014de <main+0x102>
		ustep[i].frequency = (i < 100) ? 10 : 4000;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b63      	cmp	r3, #99	; 0x63
 80014ba:	dc01      	bgt.n	80014c0 <main+0xe4>
 80014bc:	210a      	movs	r1, #10
 80014be:	e001      	b.n	80014c4 <main+0xe8>
 80014c0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80014c4:	4a43      	ldr	r2, [pc, #268]	; (80015d4 <main+0x1f8>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		ustep[i].duration = 5;
 80014cc:	4a41      	ldr	r2, [pc, #260]	; (80015d4 <main+0x1f8>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	2205      	movs	r2, #5
 80014d6:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i < 200; ++i) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3301      	adds	r3, #1
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2bc7      	cmp	r3, #199	; 0xc7
 80014e2:	dde8      	ble.n	80014b6 <main+0xda>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e4:	f001 f86e 	bl	80025c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e8:	f000 f88a 	bl	8001600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ec:	f000 fc06 	bl	8001cfc <MX_GPIO_Init>
  MX_I2C1_Init();
 80014f0:	f000 f9bc 	bl	800186c <MX_I2C1_Init>
  MX_SPI1_Init();
 80014f4:	f000 f9fa 	bl	80018ec <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80014f8:	f000 fbde 	bl	8001cb8 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80014fc:	f000 f8e8 	bl	80016d0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001500:	f000 fbaa 	bl	8001c58 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001504:	f000 fa30 	bl	8001968 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001508:	f000 fafe 	bl	8001b08 <MX_TIM2_Init>
  MX_TIM3_Init();
 800150c:	f000 fb56 	bl	8001bbc <MX_TIM3_Init>
  MX_ADC2_Init();
 8001510:	f000 f94e 	bl	80017b0 <MX_ADC2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001514:	2100      	movs	r1, #0
 8001516:	4830      	ldr	r0, [pc, #192]	; (80015d8 <main+0x1fc>)
 8001518:	f004 fee8 	bl	80062ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800151c:	2104      	movs	r1, #4
 800151e:	482e      	ldr	r0, [pc, #184]	; (80015d8 <main+0x1fc>)
 8001520:	f004 fee4 	bl	80062ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001524:	2108      	movs	r1, #8
 8001526:	482c      	ldr	r0, [pc, #176]	; (80015d8 <main+0x1fc>)
 8001528:	f004 fee0 	bl	80062ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800152c:	210c      	movs	r1, #12
 800152e:	482a      	ldr	r0, [pc, #168]	; (80015d8 <main+0x1fc>)
 8001530:	f004 fedc 	bl	80062ec <HAL_TIM_PWM_Start>

  HAL_ADC_Start_IT(&hadc1);
 8001534:	4829      	ldr	r0, [pc, #164]	; (80015dc <main+0x200>)
 8001536:	f001 fac3 	bl	8002ac0 <HAL_ADC_Start_IT>
//  HAL_ADC_Start_IT(&hadc2);
  HAL_UART_Receive_IT(&huart2, in_data, 8);
 800153a:	2208      	movs	r2, #8
 800153c:	4928      	ldr	r1, [pc, #160]	; (80015e0 <main+0x204>)
 800153e:	4829      	ldr	r0, [pc, #164]	; (80015e4 <main+0x208>)
 8001540:	f006 fa60 	bl	8007a04 <HAL_UART_Receive_IT>
  setDimstep(dimstep);
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <main+0x20c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fcd5 	bl	8000ef8 <setDimstep>
  HAL_TIM_Base_Start_IT(&htim3);
 800154e:	4827      	ldr	r0, [pc, #156]	; (80015ec <main+0x210>)
 8001550:	f004 fe0a 	bl	8006168 <HAL_TIM_Base_Start_IT>
  PWM_Start();
 8001554:	f7ff fb40 	bl	8000bd8 <PWM_Start>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  display_digit(warncount, 0, 2, selected == 0);
 8001558:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <main+0x214>)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <main+0x218>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf0c      	ite	eq
 8001564:	2301      	moveq	r3, #1
 8001566:	2300      	movne	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2202      	movs	r2, #2
 800156c:	2100      	movs	r1, #0
 800156e:	f7ff fdcb 	bl	8001108 <display_digit>
	  display_digit(warnnum, 1, 2, selected == 1);
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <main+0x21c>)
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <main+0x218>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	bf0c      	ite	eq
 800157e:	2301      	moveq	r3, #1
 8001580:	2300      	movne	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2202      	movs	r2, #2
 8001586:	2101      	movs	r1, #1
 8001588:	f7ff fdbe 	bl	8001108 <display_digit>
	  display_digit(lights, 2, 2, selected == 2);
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <main+0x220>)
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <main+0x218>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b02      	cmp	r3, #2
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2202      	movs	r2, #2
 80015a0:	2102      	movs	r1, #2
 80015a2:	f7ff fdb1 	bl	8001108 <display_digit>
	  display_digit(dimstep, 3, 2, selected == 3);
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <main+0x20c>)
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <main+0x218>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	bf0c      	ite	eq
 80015b2:	2301      	moveq	r3, #1
 80015b4:	2300      	movne	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2202      	movs	r2, #2
 80015ba:	2103      	movs	r1, #3
 80015bc:	f7ff fda4 	bl	8001108 <display_digit>
	  display_digit(warncount, 0, 2, selected == 0);
 80015c0:	e7ca      	b.n	8001558 <main+0x17c>
 80015c2:	bf00      	nop
 80015c4:	409f4000 	.word	0x409f4000
 80015c8:	20000700 	.word	0x20000700
 80015cc:	3d00ad04 	.word	0x3d00ad04
 80015d0:	20000a20 	.word	0x20000a20
 80015d4:	20000d40 	.word	0x20000d40
 80015d8:	20000208 	.word	0x20000208
 80015dc:	200000b0 	.word	0x200000b0
 80015e0:	20000664 	.word	0x20000664
 80015e4:	200002ec 	.word	0x200002ec
 80015e8:	2000000c 	.word	0x2000000c
 80015ec:	200002a0 	.word	0x200002a0
 80015f0:	20000660 	.word	0x20000660
 80015f4:	20000020 	.word	0x20000020
 80015f8:	20000014 	.word	0x20000014
 80015fc:	20000010 	.word	0x20000010

08001600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b09e      	sub	sp, #120	; 0x78
 8001604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001606:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800160a:	2228      	movs	r2, #40	; 0x28
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f007 fc38 	bl	8008e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001614:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001624:	463b      	mov	r3, r7
 8001626:	223c      	movs	r2, #60	; 0x3c
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f007 fc2a 	bl	8008e84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001630:	2303      	movs	r3, #3
 8001632:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001638:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800163e:	2301      	movs	r3, #1
 8001640:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001642:	2310      	movs	r3, #16
 8001644:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001650:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001654:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001656:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800165a:	4618      	mov	r0, r3
 800165c:	f003 f85e 	bl	800471c <HAL_RCC_OscConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001666:	f000 fc15 	bl	8001e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166a:	230f      	movs	r3, #15
 800166c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166e:	2302      	movs	r3, #2
 8001670:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001680:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001684:	2101      	movs	r1, #1
 8001686:	4618      	mov	r0, r3
 8001688:	f004 f886 	bl	8005798 <HAL_RCC_ClockConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001692:	f000 fbff 	bl	8001e94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <SystemClock_Config+0xcc>)
 8001698:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800169e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80016a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ac:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b2:	463b      	mov	r3, r7
 80016b4:	4618      	mov	r0, r3
 80016b6:	f004 faa5 	bl	8005c04 <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016c0:	f000 fbe8 	bl	8001e94 <Error_Handler>
  }
}
 80016c4:	bf00      	nop
 80016c6:	3778      	adds	r7, #120	; 0x78
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	000210a2 	.word	0x000210a2

080016d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <MX_ADC1_Init+0xdc>)
 80016f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016fa:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <MX_ADC1_Init+0xdc>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <MX_ADC1_Init+0xdc>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <MX_ADC1_Init+0xdc>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <MX_ADC1_Init+0xdc>)
 800170e:	2200      	movs	r2, #0
 8001710:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <MX_ADC1_Init+0xdc>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <MX_ADC1_Init+0xdc>)
 800171c:	2200      	movs	r2, #0
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <MX_ADC1_Init+0xdc>)
 8001722:	2201      	movs	r2, #1
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <MX_ADC1_Init+0xdc>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <MX_ADC1_Init+0xdc>)
 800172e:	2201      	movs	r2, #1
 8001730:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <MX_ADC1_Init+0xdc>)
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <MX_ADC1_Init+0xdc>)
 800173c:	2204      	movs	r2, #4
 800173e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <MX_ADC1_Init+0xdc>)
 8001742:	2200      	movs	r2, #0
 8001744:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <MX_ADC1_Init+0xdc>)
 8001748:	2200      	movs	r2, #0
 800174a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800174c:	4817      	ldr	r0, [pc, #92]	; (80017ac <MX_ADC1_Init+0xdc>)
 800174e:	f000 ffd7 	bl	8002700 <HAL_ADC_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001758:	f000 fb9c 	bl	8001e94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	4619      	mov	r1, r3
 8001766:	4811      	ldr	r0, [pc, #68]	; (80017ac <MX_ADC1_Init+0xdc>)
 8001768:	f002 f8f2 	bl	8003950 <HAL_ADCEx_MultiModeConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001772:	f000 fb8f 	bl	8001e94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001776:	2302      	movs	r3, #2
 8001778:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800177a:	2301      	movs	r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8001782:	2307      	movs	r3, #7
 8001784:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	; (80017ac <MX_ADC1_Init+0xdc>)
 8001794:	f001 fdf0 	bl	8003378 <HAL_ADC_ConfigChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800179e:	f000 fb79 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200000b0 	.word	0x200000b0

080017b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017b6:	463b      	mov	r3, r7
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
 80017c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <MX_ADC2_Init+0xb4>)
 80017c8:	4a27      	ldr	r2, [pc, #156]	; (8001868 <MX_ADC2_Init+0xb8>)
 80017ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <MX_ADC2_Init+0xb4>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <MX_ADC2_Init+0xb4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017d8:	4b22      	ldr	r3, [pc, #136]	; (8001864 <MX_ADC2_Init+0xb4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <MX_ADC2_Init+0xb4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <MX_ADC2_Init+0xb4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <MX_ADC2_Init+0xb4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <MX_ADC2_Init+0xb4>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_ADC2_Init+0xb4>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <MX_ADC2_Init+0xb4>)
 8001800:	2201      	movs	r2, #1
 8001802:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_ADC2_Init+0xb4>)
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MX_ADC2_Init+0xb4>)
 800180e:	2204      	movs	r2, #4
 8001810:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <MX_ADC2_Init+0xb4>)
 8001814:	2200      	movs	r2, #0
 8001816:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_ADC2_Init+0xb4>)
 800181a:	2200      	movs	r2, #0
 800181c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800181e:	4811      	ldr	r0, [pc, #68]	; (8001864 <MX_ADC2_Init+0xb4>)
 8001820:	f000 ff6e 	bl	8002700 <HAL_ADC_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800182a:	f000 fb33 	bl	8001e94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800182e:	2305      	movs	r3, #5
 8001830:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001832:	2301      	movs	r3, #1
 8001834:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800183a:	2307      	movs	r3, #7
 800183c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001846:	463b      	mov	r3, r7
 8001848:	4619      	mov	r1, r3
 800184a:	4806      	ldr	r0, [pc, #24]	; (8001864 <MX_ADC2_Init+0xb4>)
 800184c:	f001 fd94 	bl	8003378 <HAL_ADC_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001856:	f000 fb1d 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000100 	.word	0x20000100
 8001868:	50000100 	.word	0x50000100

0800186c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <MX_I2C1_Init+0x78>)
 8001874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001878:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <MX_I2C1_Init+0x7c>)
 800187a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_I2C1_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001884:	2201      	movs	r2, #1
 8001886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_I2C1_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_I2C1_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_I2C1_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_I2C1_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018a6:	480e      	ldr	r0, [pc, #56]	; (80018e0 <MX_I2C1_Init+0x74>)
 80018a8:	f002 fd40 	bl	800432c <HAL_I2C_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018b2:	f000 faef 	bl	8001e94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018b6:	2100      	movs	r1, #0
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <MX_I2C1_Init+0x74>)
 80018ba:	f002 fdc6 	bl	800444a <HAL_I2CEx_ConfigAnalogFilter>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018c4:	f000 fae6 	bl	8001e94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018c8:	2100      	movs	r1, #0
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_I2C1_Init+0x74>)
 80018cc:	f002 fe08 	bl	80044e0 <HAL_I2CEx_ConfigDigitalFilter>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018d6:	f000 fadd 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000150 	.word	0x20000150
 80018e4:	40005400 	.word	0x40005400
 80018e8:	2000090e 	.word	0x2000090e

080018ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <MX_SPI1_Init+0x74>)
 80018f2:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <MX_SPI1_Init+0x78>)
 80018f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_SPI1_Init+0x74>)
 80018f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_SPI1_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_SPI1_Init+0x74>)
 8001906:	f44f 7240 	mov.w	r2, #768	; 0x300
 800190a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_SPI1_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <MX_SPI1_Init+0x74>)
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_SPI1_Init+0x74>)
 800191a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_SPI1_Init+0x74>)
 8001922:	2208      	movs	r2, #8
 8001924:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_SPI1_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_SPI1_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_SPI1_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_SPI1_Init+0x74>)
 800193a:	2207      	movs	r2, #7
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <MX_SPI1_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_SPI1_Init+0x74>)
 8001946:	2208      	movs	r2, #8
 8001948:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_SPI1_Init+0x74>)
 800194c:	f004 fb0a 	bl	8005f64 <HAL_SPI_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001956:	f000 fa9d 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200001a4 	.word	0x200001a4
 8001964:	40013000 	.word	0x40013000

08001968 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b09a      	sub	sp, #104	; 0x68
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
 8001998:	615a      	str	r2, [r3, #20]
 800199a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	222c      	movs	r2, #44	; 0x2c
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f007 fa6e 	bl	8008e84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019a8:	4b55      	ldr	r3, [pc, #340]	; (8001b00 <MX_TIM1_Init+0x198>)
 80019aa:	4a56      	ldr	r2, [pc, #344]	; (8001b04 <MX_TIM1_Init+0x19c>)
 80019ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4799;
 80019ae:	4b54      	ldr	r3, [pc, #336]	; (8001b00 <MX_TIM1_Init+0x198>)
 80019b0:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80019b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b6:	4b52      	ldr	r3, [pc, #328]	; (8001b00 <MX_TIM1_Init+0x198>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <MX_TIM1_Init+0x198>)
 80019be:	2209      	movs	r2, #9
 80019c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c2:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <MX_TIM1_Init+0x198>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019c8:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <MX_TIM1_Init+0x198>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ce:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <MX_TIM1_Init+0x198>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019d4:	484a      	ldr	r0, [pc, #296]	; (8001b00 <MX_TIM1_Init+0x198>)
 80019d6:	f004 fb70 	bl	80060ba <HAL_TIM_Base_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019e0:	f000 fa58 	bl	8001e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019ee:	4619      	mov	r1, r3
 80019f0:	4843      	ldr	r0, [pc, #268]	; (8001b00 <MX_TIM1_Init+0x198>)
 80019f2:	f005 f845 	bl	8006a80 <HAL_TIM_ConfigClockSource>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019fc:	f000 fa4a 	bl	8001e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a00:	483f      	ldr	r0, [pc, #252]	; (8001b00 <MX_TIM1_Init+0x198>)
 8001a02:	f004 fc1b 	bl	800623c <HAL_TIM_PWM_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a0c:	f000 fa42 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a20:	4619      	mov	r1, r3
 8001a22:	4837      	ldr	r0, [pc, #220]	; (8001b00 <MX_TIM1_Init+0x198>)
 8001a24:	f005 fd44 	bl	80074b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a2e:	f000 fa31 	bl	8001e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a32:	2360      	movs	r3, #96	; 0x60
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a52:	2200      	movs	r2, #0
 8001a54:	4619      	mov	r1, r3
 8001a56:	482a      	ldr	r0, [pc, #168]	; (8001b00 <MX_TIM1_Init+0x198>)
 8001a58:	f004 fefe 	bl	8006858 <HAL_TIM_PWM_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a62:	f000 fa17 	bl	8001e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4824      	ldr	r0, [pc, #144]	; (8001b00 <MX_TIM1_Init+0x198>)
 8001a70:	f004 fef2 	bl	8006858 <HAL_TIM_PWM_ConfigChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001a7a:	f000 fa0b 	bl	8001e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a82:	2208      	movs	r2, #8
 8001a84:	4619      	mov	r1, r3
 8001a86:	481e      	ldr	r0, [pc, #120]	; (8001b00 <MX_TIM1_Init+0x198>)
 8001a88:	f004 fee6 	bl	8006858 <HAL_TIM_PWM_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001a92:	f000 f9ff 	bl	8001e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4818      	ldr	r0, [pc, #96]	; (8001b00 <MX_TIM1_Init+0x198>)
 8001aa0:	f004 feda 	bl	8006858 <HAL_TIM_PWM_ConfigChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001aaa:	f000 f9f3 	bl	8001e94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4807      	ldr	r0, [pc, #28]	; (8001b00 <MX_TIM1_Init+0x198>)
 8001ae4:	f005 fd64 	bl	80075b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001aee:	f000 f9d1 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001af2:	4803      	ldr	r0, [pc, #12]	; (8001b00 <MX_TIM1_Init+0x198>)
 8001af4:	f000 fb84 	bl	8002200 <HAL_TIM_MspPostInit>

}
 8001af8:	bf00      	nop
 8001afa:	3768      	adds	r7, #104	; 0x68
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000208 	.word	0x20000208
 8001b04:	40012c00 	.word	0x40012c00

08001b08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	615a      	str	r2, [r3, #20]
 8001b2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b2c:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <MX_TIM2_Init+0xb0>)
 8001b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b34:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <MX_TIM2_Init+0xb0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <MX_TIM2_Init+0xb0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <MX_TIM2_Init+0xb0>)
 8001b42:	f04f 32ff 	mov.w	r2, #4294967295
 8001b46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_TIM2_Init+0xb0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_TIM2_Init+0xb0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b54:	4818      	ldr	r0, [pc, #96]	; (8001bb8 <MX_TIM2_Init+0xb0>)
 8001b56:	f004 fb71 	bl	800623c <HAL_TIM_PWM_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001b60:	f000 f998 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <MX_TIM2_Init+0xb0>)
 8001b74:	f005 fc9c 	bl	80074b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001b7e:	f000 f989 	bl	8001e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b82:	2360      	movs	r3, #96	; 0x60
 8001b84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b92:	463b      	mov	r3, r7
 8001b94:	220c      	movs	r2, #12
 8001b96:	4619      	mov	r1, r3
 8001b98:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <MX_TIM2_Init+0xb0>)
 8001b9a:	f004 fe5d 	bl	8006858 <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001ba4:	f000 f976 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <MX_TIM2_Init+0xb0>)
 8001baa:	f000 fb29 	bl	8002200 <HAL_TIM_MspPostInit>

}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	; 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000254 	.word	0x20000254

08001bbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <MX_TIM3_Init+0x94>)
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <MX_TIM3_Init+0x98>)
 8001bde:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <MX_TIM3_Init+0x94>)
 8001be2:	222f      	movs	r2, #47	; 0x2f
 8001be4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <MX_TIM3_Init+0x94>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <MX_TIM3_Init+0x94>)
 8001bee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <MX_TIM3_Init+0x94>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_TIM3_Init+0x94>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c00:	4813      	ldr	r0, [pc, #76]	; (8001c50 <MX_TIM3_Init+0x94>)
 8001c02:	f004 fa5a 	bl	80060ba <HAL_TIM_Base_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001c0c:	f000 f942 	bl	8001e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c16:	f107 0310 	add.w	r3, r7, #16
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480c      	ldr	r0, [pc, #48]	; (8001c50 <MX_TIM3_Init+0x94>)
 8001c1e:	f004 ff2f 	bl	8006a80 <HAL_TIM_ConfigClockSource>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001c28:	f000 f934 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_TIM3_Init+0x94>)
 8001c3a:	f005 fc39 	bl	80074b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001c44:	f000 f926 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	3720      	adds	r7, #32
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200002a0 	.word	0x200002a0
 8001c54:	40000400 	.word	0x40000400

08001c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MX_USART2_UART_Init+0x58>)
 8001c5e:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <MX_USART2_UART_Init+0x5c>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <MX_USART2_UART_Init+0x58>)
 8001c64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_USART2_UART_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <MX_USART2_UART_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_USART2_UART_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_USART2_UART_Init+0x58>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MX_USART2_UART_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_USART2_UART_Init+0x58>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <MX_USART2_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_USART2_UART_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_USART2_UART_Init+0x58>)
 8001c9c:	f005 fd24 	bl	80076e8 <HAL_UART_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ca6:	f000 f8f5 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200002ec 	.word	0x200002ec
 8001cb4:	40004400 	.word	0x40004400

08001cb8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <MX_USB_PCD_Init+0x3c>)
 8001cbe:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <MX_USB_PCD_Init+0x40>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <MX_USB_PCD_Init+0x3c>)
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <MX_USB_PCD_Init+0x3c>)
 8001cca:	2202      	movs	r2, #2
 8001ccc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <MX_USB_PCD_Init+0x3c>)
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <MX_USB_PCD_Init+0x3c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <MX_USB_PCD_Init+0x3c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001ce0:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <MX_USB_PCD_Init+0x3c>)
 8001ce2:	f002 fc49 	bl	8004578 <HAL_PCD_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001cec:	f000 f8d2 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000374 	.word	0x20000374
 8001cf8:	40005c00 	.word	0x40005c00

08001cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d12:	4b5c      	ldr	r3, [pc, #368]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	4a5b      	ldr	r2, [pc, #364]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d1c:	6153      	str	r3, [r2, #20]
 8001d1e:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	4a55      	ldr	r2, [pc, #340]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d34:	6153      	str	r3, [r2, #20]
 8001d36:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d42:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	4a4f      	ldr	r2, [pc, #316]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d4c:	6153      	str	r3, [r2, #20]
 8001d4e:	4b4d      	ldr	r3, [pc, #308]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b4a      	ldr	r3, [pc, #296]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	4a49      	ldr	r2, [pc, #292]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	6153      	str	r3, [r2, #20]
 8001d66:	4b47      	ldr	r3, [pc, #284]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	4b44      	ldr	r3, [pc, #272]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	4a43      	ldr	r2, [pc, #268]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	6153      	str	r3, [r2, #20]
 8001d7e:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4a3d      	ldr	r2, [pc, #244]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d94:	6153      	str	r3, [r2, #20]
 8001d96:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <MX_GPIO_Init+0x188>)
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|GPIO_PIN_10|LD9_Pin
 8001da2:	2200      	movs	r2, #0
 8001da4:	f249 5108 	movw	r1, #38152	; 0x9508
 8001da8:	4837      	ldr	r0, [pc, #220]	; (8001e88 <MX_GPIO_Init+0x18c>)
 8001daa:	f002 fa8f 	bl	80042cc <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001dae:	2200      	movs	r2, #0
 8001db0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001db4:	4835      	ldr	r0, [pc, #212]	; (8001e8c <MX_GPIO_Init+0x190>)
 8001db6:	f002 fa89 	bl	80042cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2140      	movs	r1, #64	; 0x40
 8001dbe:	4834      	ldr	r0, [pc, #208]	; (8001e90 <MX_GPIO_Init+0x194>)
 8001dc0:	f002 fa84 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001dc4:	2337      	movs	r3, #55	; 0x37
 8001dc6:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001dc8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	482b      	ldr	r0, [pc, #172]	; (8001e88 <MX_GPIO_Init+0x18c>)
 8001dda:	f002 f8fd 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin PE10 LD9_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|GPIO_PIN_10|LD9_Pin
 8001dde:	f249 5308 	movw	r3, #38152	; 0x9508
 8001de2:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	4619      	mov	r1, r3
 8001df6:	4824      	ldr	r0, [pc, #144]	; (8001e88 <MX_GPIO_Init+0x18c>)
 8001df8:	f002 f8ee 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e12:	f002 f8e1 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e16:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001e1a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4817      	ldr	r0, [pc, #92]	; (8001e8c <MX_GPIO_Init+0x190>)
 8001e30:	f002 f8d2 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e34:	2340      	movs	r3, #64	; 0x40
 8001e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4811      	ldr	r0, [pc, #68]	; (8001e90 <MX_GPIO_Init+0x194>)
 8001e4c:	f002 f8c4 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e50:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	4619      	mov	r1, r3
 8001e66:	480a      	ldr	r0, [pc, #40]	; (8001e90 <MX_GPIO_Init+0x194>)
 8001e68:	f002 f8b6 	bl	8003fd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	2017      	movs	r0, #23
 8001e72:	f002 f804 	bl	8003e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e76:	2017      	movs	r0, #23
 8001e78:	f002 f81d 	bl	8003eb6 <HAL_NVIC_EnableIRQ>

}
 8001e7c:	bf00      	nop
 8001e7e:	3730      	adds	r7, #48	; 0x30
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	48001000 	.word	0x48001000
 8001e8c:	48000c00 	.word	0x48000c00
 8001e90:	48000800 	.word	0x48000800

08001e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <Error_Handler+0x8>
	...

08001ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <HAL_MspInit+0x44>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <HAL_MspInit+0x44>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6193      	str	r3, [r2, #24]
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_MspInit+0x44>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_MspInit+0x44>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <HAL_MspInit+0x44>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_MspInit+0x44>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001ed6:	2005      	movs	r0, #5
 8001ed8:	f001 ffc6 	bl	8003e68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08c      	sub	sp, #48	; 0x30
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f08:	d136      	bne.n	8001f78 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f0a:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <HAL_ADC_MspInit+0x10c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	4a38      	ldr	r2, [pc, #224]	; (8001ff4 <HAL_ADC_MspInit+0x10c>)
 8001f12:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f14:	4b37      	ldr	r3, [pc, #220]	; (8001ff4 <HAL_ADC_MspInit+0x10c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d10b      	bne.n	8001f34 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_ADC_MspInit+0x110>)
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	4a35      	ldr	r2, [pc, #212]	; (8001ff8 <HAL_ADC_MspInit+0x110>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f26:	6153      	str	r3, [r2, #20]
 8001f28:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <HAL_ADC_MspInit+0x110>)
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <HAL_ADC_MspInit+0x110>)
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	4a2f      	ldr	r2, [pc, #188]	; (8001ff8 <HAL_ADC_MspInit+0x110>)
 8001f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3e:	6153      	str	r3, [r2, #20]
 8001f40:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_ADC_MspInit+0x110>)
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f50:	2303      	movs	r3, #3
 8001f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f62:	f002 f839 	bl	8003fd8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2101      	movs	r1, #1
 8001f6a:	2012      	movs	r0, #18
 8001f6c:	f001 ff87 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f70:	2012      	movs	r0, #18
 8001f72:	f001 ffa0 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f76:	e039      	b.n	8001fec <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <HAL_ADC_MspInit+0x114>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d134      	bne.n	8001fec <HAL_ADC_MspInit+0x104>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f82:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <HAL_ADC_MspInit+0x10c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3301      	adds	r3, #1
 8001f88:	4a1a      	ldr	r2, [pc, #104]	; (8001ff4 <HAL_ADC_MspInit+0x10c>)
 8001f8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_ADC_MspInit+0x10c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d10b      	bne.n	8001fac <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_ADC_MspInit+0x110>)
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <HAL_ADC_MspInit+0x110>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6153      	str	r3, [r2, #20]
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_ADC_MspInit+0x110>)
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_ADC_MspInit+0x110>)
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	4a11      	ldr	r2, [pc, #68]	; (8001ff8 <HAL_ADC_MspInit+0x110>)
 8001fb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fb6:	6153      	str	r3, [r2, #20]
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <HAL_ADC_MspInit+0x110>)
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480a      	ldr	r0, [pc, #40]	; (8002000 <HAL_ADC_MspInit+0x118>)
 8001fd8:	f001 fffe 	bl	8003fd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2101      	movs	r1, #1
 8001fe0:	2012      	movs	r0, #18
 8001fe2:	f001 ff4c 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001fe6:	2012      	movs	r0, #18
 8001fe8:	f001 ff65 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
}
 8001fec:	bf00      	nop
 8001fee:	3730      	adds	r7, #48	; 0x30
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	2000109c 	.word	0x2000109c
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	50000100 	.word	0x50000100
 8002000:	48000800 	.word	0x48000800

08002004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a17      	ldr	r2, [pc, #92]	; (8002080 <HAL_I2C_MspInit+0x7c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d127      	bne.n	8002076 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_I2C_MspInit+0x80>)
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	4a16      	ldr	r2, [pc, #88]	; (8002084 <HAL_I2C_MspInit+0x80>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002030:	6153      	str	r3, [r2, #20]
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_I2C_MspInit+0x80>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800203e:	23c0      	movs	r3, #192	; 0xc0
 8002040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002042:	2312      	movs	r3, #18
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002046:	2301      	movs	r3, #1
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800204e:	2304      	movs	r3, #4
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	480b      	ldr	r0, [pc, #44]	; (8002088 <HAL_I2C_MspInit+0x84>)
 800205a:	f001 ffbd 	bl	8003fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_I2C_MspInit+0x80>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <HAL_I2C_MspInit+0x80>)
 8002064:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002068:	61d3      	str	r3, [r2, #28]
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_I2C_MspInit+0x80>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002076:	bf00      	nop
 8002078:	3728      	adds	r7, #40	; 0x28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40005400 	.word	0x40005400
 8002084:	40021000 	.word	0x40021000
 8002088:	48000400 	.word	0x48000400

0800208c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_SPI_MspInit+0x7c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d128      	bne.n	8002100 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_SPI_MspInit+0x80>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	4a16      	ldr	r2, [pc, #88]	; (800210c <HAL_SPI_MspInit+0x80>)
 80020b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b8:	6193      	str	r3, [r2, #24]
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_SPI_MspInit+0x80>)
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_SPI_MspInit+0x80>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4a10      	ldr	r2, [pc, #64]	; (800210c <HAL_SPI_MspInit+0x80>)
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	6153      	str	r3, [r2, #20]
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_SPI_MspInit+0x80>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80020de:	23e0      	movs	r3, #224	; 0xe0
 80020e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ea:	2303      	movs	r3, #3
 80020ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ee:	2305      	movs	r3, #5
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fc:	f001 ff6c 	bl	8003fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002100:	bf00      	nop
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40013000 	.word	0x40013000
 800210c:	40021000 	.word	0x40021000

08002110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <HAL_TIM_Base_MspInit+0xa8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d12c      	bne.n	800217c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002122:	4b26      	ldr	r3, [pc, #152]	; (80021bc <HAL_TIM_Base_MspInit+0xac>)
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	4a25      	ldr	r2, [pc, #148]	; (80021bc <HAL_TIM_Base_MspInit+0xac>)
 8002128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800212c:	6193      	str	r3, [r2, #24]
 800212e:	4b23      	ldr	r3, [pc, #140]	; (80021bc <HAL_TIM_Base_MspInit+0xac>)
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2018      	movs	r0, #24
 8002140:	f001 fe9d 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002144:	2018      	movs	r0, #24
 8002146:	f001 feb6 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	2019      	movs	r0, #25
 8002150:	f001 fe95 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002154:	2019      	movs	r0, #25
 8002156:	f001 feae 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	201a      	movs	r0, #26
 8002160:	f001 fe8d 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002164:	201a      	movs	r0, #26
 8002166:	f001 fea6 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	201b      	movs	r0, #27
 8002170:	f001 fe85 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002174:	201b      	movs	r0, #27
 8002176:	f001 fe9e 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800217a:	e018      	b.n	80021ae <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <HAL_TIM_Base_MspInit+0xb0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d113      	bne.n	80021ae <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_TIM_Base_MspInit+0xac>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <HAL_TIM_Base_MspInit+0xac>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	61d3      	str	r3, [r2, #28]
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_TIM_Base_MspInit+0xac>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	201d      	movs	r0, #29
 80021a4:	f001 fe6b 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021a8:	201d      	movs	r0, #29
 80021aa:	f001 fe84 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40000400 	.word	0x40000400

080021c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d4:	d10b      	bne.n	80021ee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_TIM_PWM_MspInit+0x38>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a08      	ldr	r2, [pc, #32]	; (80021fc <HAL_TIM_PWM_MspInit+0x38>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	61d3      	str	r3, [r2, #28]
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_TIM_PWM_MspInit+0x38>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000

08002200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <HAL_TIM_MspPostInit+0xac>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d11d      	bne.n	800225e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_TIM_MspPostInit+0xb0>)
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <HAL_TIM_MspPostInit+0xb0>)
 8002228:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800222c:	6153      	str	r3, [r2, #20]
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_TIM_MspPostInit+0xb0>)
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800223a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800224c:	2302      	movs	r3, #2
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4817      	ldr	r0, [pc, #92]	; (80022b4 <HAL_TIM_MspPostInit+0xb4>)
 8002258:	f001 febe 	bl	8003fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800225c:	e021      	b.n	80022a2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002266:	d11c      	bne.n	80022a2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_TIM_MspPostInit+0xb0>)
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <HAL_TIM_MspPostInit+0xb0>)
 800226e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002272:	6153      	str	r3, [r2, #20]
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_TIM_MspPostInit+0xb0>)
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002280:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002292:	2301      	movs	r3, #1
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	4806      	ldr	r0, [pc, #24]	; (80022b8 <HAL_TIM_MspPostInit+0xb8>)
 800229e:	f001 fe9b 	bl	8003fd8 <HAL_GPIO_Init>
}
 80022a2:	bf00      	nop
 80022a4:	3728      	adds	r7, #40	; 0x28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40012c00 	.word	0x40012c00
 80022b0:	40021000 	.word	0x40021000
 80022b4:	48001000 	.word	0x48001000
 80022b8:	48000400 	.word	0x48000400

080022bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <HAL_UART_MspInit+0x8c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d130      	bne.n	8002340 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_UART_MspInit+0x90>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a1a      	ldr	r2, [pc, #104]	; (800234c <HAL_UART_MspInit+0x90>)
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e8:	61d3      	str	r3, [r2, #28]
 80022ea:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_UART_MspInit+0x90>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_UART_MspInit+0x90>)
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	4a14      	ldr	r2, [pc, #80]	; (800234c <HAL_UART_MspInit+0x90>)
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002300:	6153      	str	r3, [r2, #20]
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_UART_MspInit+0x90>)
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800230e:	230c      	movs	r3, #12
 8002310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231a:	2303      	movs	r3, #3
 800231c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800231e:	2307      	movs	r3, #7
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	4619      	mov	r1, r3
 8002328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800232c:	f001 fe54 	bl	8003fd8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	2026      	movs	r0, #38	; 0x26
 8002336:	f001 fda2 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800233a:	2026      	movs	r0, #38	; 0x26
 800233c:	f001 fdbb 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002340:	bf00      	nop
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40004400 	.word	0x40004400
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <HAL_PCD_MspInit+0x80>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d129      	bne.n	80023c6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_PCD_MspInit+0x84>)
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <HAL_PCD_MspInit+0x84>)
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	6153      	str	r3, [r2, #20]
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_PCD_MspInit+0x84>)
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800238a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800238e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800239c:	230e      	movs	r3, #14
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023aa:	f001 fe15 	bl	8003fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_PCD_MspInit+0x84>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <HAL_PCD_MspInit+0x84>)
 80023b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023b8:	61d3      	str	r3, [r2, #28]
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_PCD_MspInit+0x84>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80023c6:	bf00      	nop
 80023c8:	3728      	adds	r7, #40	; 0x28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40005c00 	.word	0x40005c00
 80023d4:	40021000 	.word	0x40021000

080023d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <NMI_Handler+0x4>

080023de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e2:	e7fe      	b.n	80023e2 <HardFault_Handler+0x4>

080023e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <MemManage_Handler+0x4>

080023ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <BusFault_Handler+0x4>

080023f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <UsageFault_Handler+0x4>

080023f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002424:	f000 f914 	bl	8002650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}

0800242c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002430:	4803      	ldr	r0, [pc, #12]	; (8002440 <ADC1_2_IRQHandler+0x14>)
 8002432:	f000 fc93 	bl	8002d5c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002436:	4803      	ldr	r0, [pc, #12]	; (8002444 <ADC1_2_IRQHandler+0x18>)
 8002438:	f000 fc90 	bl	8002d5c <HAL_ADC_IRQHandler>
//  HAL_Delay(500);
//  HAL_ADC_Start_IT(&hadc1);
//

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	200000b0 	.word	0x200000b0
 8002444:	20000100 	.word	0x20000100

08002448 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800244c:	2080      	movs	r0, #128	; 0x80
 800244e:	f001 ff55 	bl	80042fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002452:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002456:	f001 ff51 	bl	80042fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800245a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800245e:	f001 ff4d 	bl	80042fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800246e:	f004 f8d3 	bl	8006618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000208 	.word	0x20000208

0800247c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002482:	f004 f8c9 	bl	8006618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000208 	.word	0x20000208

08002490 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002496:	f004 f8bf 	bl	8006618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000208 	.word	0x20000208

080024a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <TIM1_CC_IRQHandler+0x10>)
 80024aa:	f004 f8b5 	bl	8006618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000208 	.word	0x20000208

080024b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <TIM3_IRQHandler+0x10>)
 80024be:	f004 f8ab 	bl	8006618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200002a0 	.word	0x200002a0

080024cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <USART2_IRQHandler+0x10>)
 80024d2:	f005 fadb 	bl	8007a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200002ec 	.word	0x200002ec

080024e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <_sbrk+0x5c>)
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <_sbrk+0x60>)
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <_sbrk+0x64>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <_sbrk+0x64>)
 80024fe:	4a12      	ldr	r2, [pc, #72]	; (8002548 <_sbrk+0x68>)
 8002500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <_sbrk+0x64>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	429a      	cmp	r2, r3
 800250e:	d207      	bcs.n	8002520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002510:	f006 fc8e 	bl	8008e30 <__errno>
 8002514:	4603      	mov	r3, r0
 8002516:	220c      	movs	r2, #12
 8002518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	e009      	b.n	8002534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <_sbrk+0x64>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <_sbrk+0x64>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <_sbrk+0x64>)
 8002530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	2000a000 	.word	0x2000a000
 8002540:	00000400 	.word	0x00000400
 8002544:	200010a0 	.word	0x200010a0
 8002548:	200010b8 	.word	0x200010b8

0800254c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <SystemInit+0x20>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	4a05      	ldr	r2, [pc, #20]	; (800256c <SystemInit+0x20>)
 8002558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800255c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002574:	f7ff ffea 	bl	800254c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002578:	480c      	ldr	r0, [pc, #48]	; (80025ac <LoopForever+0x6>)
  ldr r1, =_edata
 800257a:	490d      	ldr	r1, [pc, #52]	; (80025b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <LoopForever+0xe>)
  movs r3, #0
 800257e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002580:	e002      	b.n	8002588 <LoopCopyDataInit>

08002582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002586:	3304      	adds	r3, #4

08002588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800258c:	d3f9      	bcc.n	8002582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002590:	4c0a      	ldr	r4, [pc, #40]	; (80025bc <LoopForever+0x16>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002594:	e001      	b.n	800259a <LoopFillZerobss>

08002596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002598:	3204      	adds	r2, #4

0800259a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800259c:	d3fb      	bcc.n	8002596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800259e:	f006 fc4d 	bl	8008e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025a2:	f7fe ff1b 	bl	80013dc <main>

080025a6 <LoopForever>:

LoopForever:
    b LoopForever
 80025a6:	e7fe      	b.n	80025a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025a8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80025ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80025b4:	0800ac18 	.word	0x0800ac18
  ldr r2, =_sbss
 80025b8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80025bc:	200010b8 	.word	0x200010b8

080025c0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025c0:	e7fe      	b.n	80025c0 <ADC3_IRQHandler>
	...

080025c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <HAL_Init+0x28>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a07      	ldr	r2, [pc, #28]	; (80025ec <HAL_Init+0x28>)
 80025ce:	f043 0310 	orr.w	r3, r3, #16
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d4:	2003      	movs	r0, #3
 80025d6:	f001 fc47 	bl	8003e68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025da:	2000      	movs	r0, #0
 80025dc:	f000 f808 	bl	80025f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e0:	f7ff fc5e 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40022000 	.word	0x40022000

080025f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_InitTick+0x54>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_InitTick+0x58>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002606:	fbb3 f3f1 	udiv	r3, r3, r1
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f001 fc5f 	bl	8003ed2 <HAL_SYSTICK_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e00e      	b.n	800263c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b0f      	cmp	r3, #15
 8002622:	d80a      	bhi.n	800263a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002624:	2200      	movs	r2, #0
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f001 fc27 	bl	8003e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002630:	4a06      	ldr	r2, [pc, #24]	; (800264c <HAL_InitTick+0x5c>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e000      	b.n	800263c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000024 	.word	0x20000024
 8002648:	2000002c 	.word	0x2000002c
 800264c:	20000028 	.word	0x20000028

08002650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_IncTick+0x20>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_IncTick+0x24>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4413      	add	r3, r2
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_IncTick+0x24>)
 8002662:	6013      	str	r3, [r2, #0]
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	2000002c 	.word	0x2000002c
 8002674:	200010a4 	.word	0x200010a4

08002678 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return uwTick;  
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_GetTick+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200010a4 	.word	0x200010a4

08002690 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff ffee 	bl	8002678 <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d005      	beq.n	80026b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_Delay+0x44>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4413      	add	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80026b6:	bf00      	nop
 80026b8:	f7ff ffde 	bl	8002678 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d8f7      	bhi.n	80026b8 <HAL_Delay+0x28>
  {
  }
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000002c 	.word	0x2000002c

080026d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b09a      	sub	sp, #104	; 0x68
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e1c9      	b.n	8002ab4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	d176      	bne.n	8002820 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d152      	bne.n	80027e0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fbc7 	bl	8001ee8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d13b      	bne.n	80027e0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f001 fa47 	bl	8003bfc <ADC_Disable>
 800276e:	4603      	mov	r3, r0
 8002770:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	d12f      	bne.n	80027e0 <HAL_ADC_Init+0xe0>
 8002780:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002784:	2b00      	cmp	r3, #0
 8002786:	d12b      	bne.n	80027e0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002790:	f023 0302 	bic.w	r3, r3, #2
 8002794:	f043 0202 	orr.w	r2, r3, #2
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027aa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027ba:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027bc:	4b86      	ldr	r3, [pc, #536]	; (80029d8 <HAL_ADC_Init+0x2d8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a86      	ldr	r2, [pc, #536]	; (80029dc <HAL_ADC_Init+0x2dc>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0c9a      	lsrs	r2, r3, #18
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027d2:	e002      	b.n	80027da <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f9      	bne.n	80027d4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80027f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027fc:	d110      	bne.n	8002820 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f023 0312 	bic.w	r3, r3, #18
 8002806:	f043 0210 	orr.w	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	f040 8136 	bne.w	8002a9a <HAL_ADC_Init+0x39a>
 800282e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 8131 	bne.w	8002a9a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 8129 	bne.w	8002a9a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002850:	f043 0202 	orr.w	r2, r3, #2
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002860:	d004      	beq.n	800286c <HAL_ADC_Init+0x16c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a5e      	ldr	r2, [pc, #376]	; (80029e0 <HAL_ADC_Init+0x2e0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_ADC_Init+0x170>
 800286c:	4b5d      	ldr	r3, [pc, #372]	; (80029e4 <HAL_ADC_Init+0x2e4>)
 800286e:	e000      	b.n	8002872 <HAL_ADC_Init+0x172>
 8002870:	4b5d      	ldr	r3, [pc, #372]	; (80029e8 <HAL_ADC_Init+0x2e8>)
 8002872:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800287c:	d102      	bne.n	8002884 <HAL_ADC_Init+0x184>
 800287e:	4b58      	ldr	r3, [pc, #352]	; (80029e0 <HAL_ADC_Init+0x2e0>)
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e01a      	b.n	80028ba <HAL_ADC_Init+0x1ba>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a55      	ldr	r2, [pc, #340]	; (80029e0 <HAL_ADC_Init+0x2e0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d103      	bne.n	8002896 <HAL_ADC_Init+0x196>
 800288e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e011      	b.n	80028ba <HAL_ADC_Init+0x1ba>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a54      	ldr	r2, [pc, #336]	; (80029ec <HAL_ADC_Init+0x2ec>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d102      	bne.n	80028a6 <HAL_ADC_Init+0x1a6>
 80028a0:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <HAL_ADC_Init+0x2f0>)
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	e009      	b.n	80028ba <HAL_ADC_Init+0x1ba>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a51      	ldr	r2, [pc, #324]	; (80029f0 <HAL_ADC_Init+0x2f0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d102      	bne.n	80028b6 <HAL_ADC_Init+0x1b6>
 80028b0:	4b4e      	ldr	r3, [pc, #312]	; (80029ec <HAL_ADC_Init+0x2ec>)
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	e001      	b.n	80028ba <HAL_ADC_Init+0x1ba>
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d108      	bne.n	80028da <HAL_ADC_Init+0x1da>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_ADC_Init+0x1da>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_ADC_Init+0x1dc>
 80028da:	2300      	movs	r3, #0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d11c      	bne.n	800291a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d010      	beq.n	8002908 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_ADC_Init+0x202>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_ADC_Init+0x202>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_ADC_Init+0x204>
 8002902:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002904:	2b00      	cmp	r3, #0
 8002906:	d108      	bne.n	800291a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	431a      	orrs	r2, r3
 8002916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002918:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7e5b      	ldrb	r3, [r3, #25]
 800291e:	035b      	lsls	r3, r3, #13
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002924:	2a01      	cmp	r2, #1
 8002926:	d002      	beq.n	800292e <HAL_ADC_Init+0x22e>
 8002928:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800292c:	e000      	b.n	8002930 <HAL_ADC_Init+0x230>
 800292e:	2200      	movs	r2, #0
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4313      	orrs	r3, r2
 800293e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002940:	4313      	orrs	r3, r2
 8002942:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d11b      	bne.n	8002986 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7e5b      	ldrb	r3, [r3, #25]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	3b01      	subs	r3, #1
 800295c:	045a      	lsls	r2, r3, #17
 800295e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002960:	4313      	orrs	r3, r2
 8002962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002966:	663b      	str	r3, [r7, #96]	; 0x60
 8002968:	e00d      	b.n	8002986 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002972:	f043 0220 	orr.w	r2, r3, #32
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	2b01      	cmp	r3, #1
 800298c:	d03a      	beq.n	8002a04 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a16      	ldr	r2, [pc, #88]	; (80029ec <HAL_ADC_Init+0x2ec>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d004      	beq.n	80029a2 <HAL_ADC_Init+0x2a2>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <HAL_ADC_Init+0x2f0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d128      	bne.n	80029f4 <HAL_ADC_Init+0x2f4>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80029aa:	d012      	beq.n	80029d2 <HAL_ADC_Init+0x2d2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b4:	d00a      	beq.n	80029cc <HAL_ADC_Init+0x2cc>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80029be:	d002      	beq.n	80029c6 <HAL_ADC_Init+0x2c6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	e018      	b.n	80029f8 <HAL_ADC_Init+0x2f8>
 80029c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ca:	e015      	b.n	80029f8 <HAL_ADC_Init+0x2f8>
 80029cc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80029d0:	e012      	b.n	80029f8 <HAL_ADC_Init+0x2f8>
 80029d2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80029d6:	e00f      	b.n	80029f8 <HAL_ADC_Init+0x2f8>
 80029d8:	20000024 	.word	0x20000024
 80029dc:	431bde83 	.word	0x431bde83
 80029e0:	50000100 	.word	0x50000100
 80029e4:	50000300 	.word	0x50000300
 80029e8:	50000700 	.word	0x50000700
 80029ec:	50000400 	.word	0x50000400
 80029f0:	50000500 	.word	0x50000500
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029fc:	4313      	orrs	r3, r2
 80029fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a00:	4313      	orrs	r3, r2
 8002a02:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d114      	bne.n	8002a3c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a20:	f023 0302 	bic.w	r3, r3, #2
 8002a24:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7e1b      	ldrb	r3, [r3, #24]
 8002a2a:	039a      	lsls	r2, r3, #14
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4313      	orrs	r3, r2
 8002a36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <HAL_ADC_Init+0x3bc>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d10c      	bne.n	8002a72 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f023 010f 	bic.w	r1, r3, #15
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	1e5a      	subs	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a70:	e007      	b.n	8002a82 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 020f 	bic.w	r2, r2, #15
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f023 0303 	bic.w	r3, r3, #3
 8002a90:	f043 0201 	orr.w	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
 8002a98:	e00a      	b.n	8002ab0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f023 0312 	bic.w	r3, r3, #18
 8002aa2:	f043 0210 	orr.w	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002ab0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3768      	adds	r7, #104	; 0x68
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	fff0c007 	.word	0xfff0c007

08002ac0 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 8123 	bne.w	8002d22 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_Start_IT+0x2a>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e11e      	b.n	8002d28 <HAL_ADC_Start_IT+0x268>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f001 f81e 	bl	8003b34 <ADC_Enable>
 8002af8:	4603      	mov	r3, r0
 8002afa:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f040 810a 	bne.w	8002d18 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b20:	d004      	beq.n	8002b2c <HAL_ADC_Start_IT+0x6c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a82      	ldr	r2, [pc, #520]	; (8002d30 <HAL_ADC_Start_IT+0x270>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d106      	bne.n	8002b3a <HAL_ADC_Start_IT+0x7a>
 8002b2c:	4b81      	ldr	r3, [pc, #516]	; (8002d34 <HAL_ADC_Start_IT+0x274>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d010      	beq.n	8002b5a <HAL_ADC_Start_IT+0x9a>
 8002b38:	e005      	b.n	8002b46 <HAL_ADC_Start_IT+0x86>
 8002b3a:	4b7f      	ldr	r3, [pc, #508]	; (8002d38 <HAL_ADC_Start_IT+0x278>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_ADC_Start_IT+0x9a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b4e:	d004      	beq.n	8002b5a <HAL_ADC_Start_IT+0x9a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a79      	ldr	r2, [pc, #484]	; (8002d3c <HAL_ADC_Start_IT+0x27c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d115      	bne.n	8002b86 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d036      	beq.n	8002be2 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b84:	e02d      	b.n	8002be2 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b9a:	d004      	beq.n	8002ba6 <HAL_ADC_Start_IT+0xe6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a63      	ldr	r2, [pc, #396]	; (8002d30 <HAL_ADC_Start_IT+0x270>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10a      	bne.n	8002bbc <HAL_ADC_Start_IT+0xfc>
 8002ba6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	e008      	b.n	8002bce <HAL_ADC_Start_IT+0x10e>
 8002bbc:	4b5f      	ldr	r3, [pc, #380]	; (8002d3c <HAL_ADC_Start_IT+0x27c>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bee:	d106      	bne.n	8002bfe <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf4:	f023 0206 	bic.w	r2, r3, #6
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	645a      	str	r2, [r3, #68]	; 0x44
 8002bfc:	e002      	b.n	8002c04 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	221c      	movs	r2, #28
 8002c12:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d110      	bne.n	8002c3e <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0204 	bic.w	r2, r2, #4
 8002c2a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0208 	orr.w	r2, r2, #8
 8002c3a:	605a      	str	r2, [r3, #4]
          break;
 8002c3c:	e008      	b.n	8002c50 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 020c 	orr.w	r2, r2, #12
 8002c4c:	605a      	str	r2, [r3, #4]
          break;
 8002c4e:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d107      	bne.n	8002c68 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0210 	bic.w	r2, r2, #16
 8002c66:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c70:	d004      	beq.n	8002c7c <HAL_ADC_Start_IT+0x1bc>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2e      	ldr	r2, [pc, #184]	; (8002d30 <HAL_ADC_Start_IT+0x270>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d106      	bne.n	8002c8a <HAL_ADC_Start_IT+0x1ca>
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <HAL_ADC_Start_IT+0x274>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d03e      	beq.n	8002d06 <HAL_ADC_Start_IT+0x246>
 8002c88:	e005      	b.n	8002c96 <HAL_ADC_Start_IT+0x1d6>
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <HAL_ADC_Start_IT+0x278>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d037      	beq.n	8002d06 <HAL_ADC_Start_IT+0x246>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c9e:	d004      	beq.n	8002caa <HAL_ADC_Start_IT+0x1ea>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <HAL_ADC_Start_IT+0x270>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d106      	bne.n	8002cb8 <HAL_ADC_Start_IT+0x1f8>
 8002caa:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_ADC_Start_IT+0x274>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d027      	beq.n	8002d06 <HAL_ADC_Start_IT+0x246>
 8002cb6:	e005      	b.n	8002cc4 <HAL_ADC_Start_IT+0x204>
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <HAL_ADC_Start_IT+0x278>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2b05      	cmp	r3, #5
 8002cc2:	d020      	beq.n	8002d06 <HAL_ADC_Start_IT+0x246>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ccc:	d004      	beq.n	8002cd8 <HAL_ADC_Start_IT+0x218>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <HAL_ADC_Start_IT+0x270>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d106      	bne.n	8002ce6 <HAL_ADC_Start_IT+0x226>
 8002cd8:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <HAL_ADC_Start_IT+0x274>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2b09      	cmp	r3, #9
 8002ce2:	d010      	beq.n	8002d06 <HAL_ADC_Start_IT+0x246>
 8002ce4:	e005      	b.n	8002cf2 <HAL_ADC_Start_IT+0x232>
 8002ce6:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_ADC_Start_IT+0x278>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	2b09      	cmp	r3, #9
 8002cf0:	d009      	beq.n	8002d06 <HAL_ADC_Start_IT+0x246>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cfa:	d004      	beq.n	8002d06 <HAL_ADC_Start_IT+0x246>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <HAL_ADC_Start_IT+0x27c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10f      	bne.n	8002d26 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0204 	orr.w	r2, r2, #4
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	e006      	b.n	8002d26 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d20:	e001      	b.n	8002d26 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
 8002d24:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	50000100 	.word	0x50000100
 8002d34:	50000300 	.word	0x50000300
 8002d38:	50000700 	.word	0x50000700
 8002d3c:	50000400 	.word	0x50000400

08002d40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <HAL_ADC_IRQHandler+0x38>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10b      	bne.n	8002dac <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80bc 	beq.w	8002f18 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80b6 	beq.w	8002f18 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dcc:	d004      	beq.n	8002dd8 <HAL_ADC_IRQHandler+0x7c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a90      	ldr	r2, [pc, #576]	; (8003014 <HAL_ADC_IRQHandler+0x2b8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d106      	bne.n	8002de6 <HAL_ADC_IRQHandler+0x8a>
 8002dd8:	4b8f      	ldr	r3, [pc, #572]	; (8003018 <HAL_ADC_IRQHandler+0x2bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d03e      	beq.n	8002e62 <HAL_ADC_IRQHandler+0x106>
 8002de4:	e005      	b.n	8002df2 <HAL_ADC_IRQHandler+0x96>
 8002de6:	4b8d      	ldr	r3, [pc, #564]	; (800301c <HAL_ADC_IRQHandler+0x2c0>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d037      	beq.n	8002e62 <HAL_ADC_IRQHandler+0x106>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dfa:	d004      	beq.n	8002e06 <HAL_ADC_IRQHandler+0xaa>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a84      	ldr	r2, [pc, #528]	; (8003014 <HAL_ADC_IRQHandler+0x2b8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d106      	bne.n	8002e14 <HAL_ADC_IRQHandler+0xb8>
 8002e06:	4b84      	ldr	r3, [pc, #528]	; (8003018 <HAL_ADC_IRQHandler+0x2bc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	2b05      	cmp	r3, #5
 8002e10:	d027      	beq.n	8002e62 <HAL_ADC_IRQHandler+0x106>
 8002e12:	e005      	b.n	8002e20 <HAL_ADC_IRQHandler+0xc4>
 8002e14:	4b81      	ldr	r3, [pc, #516]	; (800301c <HAL_ADC_IRQHandler+0x2c0>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2b05      	cmp	r3, #5
 8002e1e:	d020      	beq.n	8002e62 <HAL_ADC_IRQHandler+0x106>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e28:	d004      	beq.n	8002e34 <HAL_ADC_IRQHandler+0xd8>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a79      	ldr	r2, [pc, #484]	; (8003014 <HAL_ADC_IRQHandler+0x2b8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d106      	bne.n	8002e42 <HAL_ADC_IRQHandler+0xe6>
 8002e34:	4b78      	ldr	r3, [pc, #480]	; (8003018 <HAL_ADC_IRQHandler+0x2bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	2b09      	cmp	r3, #9
 8002e3e:	d010      	beq.n	8002e62 <HAL_ADC_IRQHandler+0x106>
 8002e40:	e005      	b.n	8002e4e <HAL_ADC_IRQHandler+0xf2>
 8002e42:	4b76      	ldr	r3, [pc, #472]	; (800301c <HAL_ADC_IRQHandler+0x2c0>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	2b09      	cmp	r3, #9
 8002e4c:	d009      	beq.n	8002e62 <HAL_ADC_IRQHandler+0x106>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e56:	d004      	beq.n	8002e62 <HAL_ADC_IRQHandler+0x106>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a70      	ldr	r2, [pc, #448]	; (8003020 <HAL_ADC_IRQHandler+0x2c4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d104      	bne.n	8002e6c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	e00f      	b.n	8002e8c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e74:	d004      	beq.n	8002e80 <HAL_ADC_IRQHandler+0x124>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a66      	ldr	r2, [pc, #408]	; (8003014 <HAL_ADC_IRQHandler+0x2b8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d102      	bne.n	8002e86 <HAL_ADC_IRQHandler+0x12a>
 8002e80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e84:	e000      	b.n	8002e88 <HAL_ADC_IRQHandler+0x12c>
 8002e86:	4b66      	ldr	r3, [pc, #408]	; (8003020 <HAL_ADC_IRQHandler+0x2c4>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d137      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d132      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d02d      	beq.n	8002f0a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d11a      	bne.n	8002ef2 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 020c 	bic.w	r2, r2, #12
 8002eca:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d112      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40
 8002ef0:	e00b      	b.n	8002f0a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f043 0210 	orr.w	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fd ff96 	bl	8000e3c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	220c      	movs	r2, #12
 8002f16:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d004      	beq.n	8002f2c <HAL_ADC_IRQHandler+0x1d0>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10b      	bne.n	8002f44 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8138 	beq.w	80031a8 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8132 	beq.w	80031a8 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f58:	d004      	beq.n	8002f64 <HAL_ADC_IRQHandler+0x208>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2d      	ldr	r2, [pc, #180]	; (8003014 <HAL_ADC_IRQHandler+0x2b8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d106      	bne.n	8002f72 <HAL_ADC_IRQHandler+0x216>
 8002f64:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <HAL_ADC_IRQHandler+0x2bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d03e      	beq.n	8002fee <HAL_ADC_IRQHandler+0x292>
 8002f70:	e005      	b.n	8002f7e <HAL_ADC_IRQHandler+0x222>
 8002f72:	4b2a      	ldr	r3, [pc, #168]	; (800301c <HAL_ADC_IRQHandler+0x2c0>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d037      	beq.n	8002fee <HAL_ADC_IRQHandler+0x292>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f86:	d004      	beq.n	8002f92 <HAL_ADC_IRQHandler+0x236>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a21      	ldr	r2, [pc, #132]	; (8003014 <HAL_ADC_IRQHandler+0x2b8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d106      	bne.n	8002fa0 <HAL_ADC_IRQHandler+0x244>
 8002f92:	4b21      	ldr	r3, [pc, #132]	; (8003018 <HAL_ADC_IRQHandler+0x2bc>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	d027      	beq.n	8002fee <HAL_ADC_IRQHandler+0x292>
 8002f9e:	e005      	b.n	8002fac <HAL_ADC_IRQHandler+0x250>
 8002fa0:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_ADC_IRQHandler+0x2c0>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d020      	beq.n	8002fee <HAL_ADC_IRQHandler+0x292>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb4:	d004      	beq.n	8002fc0 <HAL_ADC_IRQHandler+0x264>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a16      	ldr	r2, [pc, #88]	; (8003014 <HAL_ADC_IRQHandler+0x2b8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d106      	bne.n	8002fce <HAL_ADC_IRQHandler+0x272>
 8002fc0:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_ADC_IRQHandler+0x2bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2b09      	cmp	r3, #9
 8002fca:	d010      	beq.n	8002fee <HAL_ADC_IRQHandler+0x292>
 8002fcc:	e005      	b.n	8002fda <HAL_ADC_IRQHandler+0x27e>
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <HAL_ADC_IRQHandler+0x2c0>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2b09      	cmp	r3, #9
 8002fd8:	d009      	beq.n	8002fee <HAL_ADC_IRQHandler+0x292>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe2:	d004      	beq.n	8002fee <HAL_ADC_IRQHandler+0x292>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <HAL_ADC_IRQHandler+0x2c4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d104      	bne.n	8002ff8 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	e018      	b.n	800302a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003000:	d004      	beq.n	800300c <HAL_ADC_IRQHandler+0x2b0>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a03      	ldr	r2, [pc, #12]	; (8003014 <HAL_ADC_IRQHandler+0x2b8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10b      	bne.n	8003024 <HAL_ADC_IRQHandler+0x2c8>
 800300c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003010:	e009      	b.n	8003026 <HAL_ADC_IRQHandler+0x2ca>
 8003012:	bf00      	nop
 8003014:	50000100 	.word	0x50000100
 8003018:	50000300 	.word	0x50000300
 800301c:	50000700 	.word	0x50000700
 8003020:	50000400 	.word	0x50000400
 8003024:	4b92      	ldr	r3, [pc, #584]	; (8003270 <HAL_ADC_IRQHandler+0x514>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003030:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003034:	2b00      	cmp	r3, #0
 8003036:	f040 80b0 	bne.w	800319a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00d      	beq.n	8003060 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 80a3 	bne.w	800319a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800305a:	2b00      	cmp	r3, #0
 800305c:	f040 809d 	bne.w	800319a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8097 	beq.w	800319a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003074:	d004      	beq.n	8003080 <HAL_ADC_IRQHandler+0x324>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a7e      	ldr	r2, [pc, #504]	; (8003274 <HAL_ADC_IRQHandler+0x518>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d106      	bne.n	800308e <HAL_ADC_IRQHandler+0x332>
 8003080:	4b7d      	ldr	r3, [pc, #500]	; (8003278 <HAL_ADC_IRQHandler+0x51c>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2b00      	cmp	r3, #0
 800308a:	d03e      	beq.n	800310a <HAL_ADC_IRQHandler+0x3ae>
 800308c:	e005      	b.n	800309a <HAL_ADC_IRQHandler+0x33e>
 800308e:	4b7b      	ldr	r3, [pc, #492]	; (800327c <HAL_ADC_IRQHandler+0x520>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	2b00      	cmp	r3, #0
 8003098:	d037      	beq.n	800310a <HAL_ADC_IRQHandler+0x3ae>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a2:	d004      	beq.n	80030ae <HAL_ADC_IRQHandler+0x352>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a72      	ldr	r2, [pc, #456]	; (8003274 <HAL_ADC_IRQHandler+0x518>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d106      	bne.n	80030bc <HAL_ADC_IRQHandler+0x360>
 80030ae:	4b72      	ldr	r3, [pc, #456]	; (8003278 <HAL_ADC_IRQHandler+0x51c>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d027      	beq.n	800310a <HAL_ADC_IRQHandler+0x3ae>
 80030ba:	e005      	b.n	80030c8 <HAL_ADC_IRQHandler+0x36c>
 80030bc:	4b6f      	ldr	r3, [pc, #444]	; (800327c <HAL_ADC_IRQHandler+0x520>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2b06      	cmp	r3, #6
 80030c6:	d020      	beq.n	800310a <HAL_ADC_IRQHandler+0x3ae>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d0:	d004      	beq.n	80030dc <HAL_ADC_IRQHandler+0x380>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a67      	ldr	r2, [pc, #412]	; (8003274 <HAL_ADC_IRQHandler+0x518>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d106      	bne.n	80030ea <HAL_ADC_IRQHandler+0x38e>
 80030dc:	4b66      	ldr	r3, [pc, #408]	; (8003278 <HAL_ADC_IRQHandler+0x51c>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2b07      	cmp	r3, #7
 80030e6:	d010      	beq.n	800310a <HAL_ADC_IRQHandler+0x3ae>
 80030e8:	e005      	b.n	80030f6 <HAL_ADC_IRQHandler+0x39a>
 80030ea:	4b64      	ldr	r3, [pc, #400]	; (800327c <HAL_ADC_IRQHandler+0x520>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	2b07      	cmp	r3, #7
 80030f4:	d009      	beq.n	800310a <HAL_ADC_IRQHandler+0x3ae>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fe:	d004      	beq.n	800310a <HAL_ADC_IRQHandler+0x3ae>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a5a      	ldr	r2, [pc, #360]	; (8003270 <HAL_ADC_IRQHandler+0x514>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d104      	bne.n	8003114 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	e00f      	b.n	8003134 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800311c:	d004      	beq.n	8003128 <HAL_ADC_IRQHandler+0x3cc>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a54      	ldr	r2, [pc, #336]	; (8003274 <HAL_ADC_IRQHandler+0x518>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d102      	bne.n	800312e <HAL_ADC_IRQHandler+0x3d2>
 8003128:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800312c:	e000      	b.n	8003130 <HAL_ADC_IRQHandler+0x3d4>
 800312e:	4b50      	ldr	r3, [pc, #320]	; (8003270 <HAL_ADC_IRQHandler+0x514>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d12d      	bne.n	800319a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d11a      	bne.n	8003182 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800315a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d112      	bne.n	800319a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
 8003180:	e00b      	b.n	800319a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f043 0210 	orr.w	r2, r3, #16
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f043 0201 	orr.w	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f8c4 	bl	8003328 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2260      	movs	r2, #96	; 0x60
 80031a6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d011      	beq.n	80031d6 <HAL_ADC_IRQHandler+0x47a>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00c      	beq.n	80031d6 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff fa85 	bl	80026d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d012      	beq.n	8003206 <HAL_ADC_IRQHandler+0x4aa>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00d      	beq.n	8003206 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8aa 	bl	8003350 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003204:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <HAL_ADC_IRQHandler+0x4da>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f89c 	bl	8003364 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003234:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	d04f      	beq.n	80032e0 <HAL_ADC_IRQHandler+0x584>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	d04a      	beq.n	80032e0 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8003252:	2301      	movs	r3, #1
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e02d      	b.n	80032b4 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003260:	d004      	beq.n	800326c <HAL_ADC_IRQHandler+0x510>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a03      	ldr	r2, [pc, #12]	; (8003274 <HAL_ADC_IRQHandler+0x518>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d109      	bne.n	8003280 <HAL_ADC_IRQHandler+0x524>
 800326c:	4b02      	ldr	r3, [pc, #8]	; (8003278 <HAL_ADC_IRQHandler+0x51c>)
 800326e:	e008      	b.n	8003282 <HAL_ADC_IRQHandler+0x526>
 8003270:	50000400 	.word	0x50000400
 8003274:	50000100 	.word	0x50000100
 8003278:	50000300 	.word	0x50000300
 800327c:	50000700 	.word	0x50000700
 8003280:	4b28      	ldr	r3, [pc, #160]	; (8003324 <HAL_ADC_IRQHandler+0x5c8>)
 8003282:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d10a      	bne.n	80032b4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800329e:	2301      	movs	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	e007      	b.n	80032b4 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80032b0:	2301      	movs	r3, #1
 80032b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d10e      	bne.n	80032d8 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f043 0202 	orr.w	r2, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff fa0a 	bl	80026ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2210      	movs	r2, #16
 80032de:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d018      	beq.n	800331c <HAL_ADC_IRQHandler+0x5c0>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	f043 0208 	orr.w	r2, r3, #8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003314:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f810 	bl	800333c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800331c:	bf00      	nop
 800331e:	3720      	adds	r7, #32
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	50000700 	.word	0x50000700

08003328 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003378:	b480      	push	{r7}
 800337a:	b09b      	sub	sp, #108	; 0x6c
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_ADC_ConfigChannel+0x22>
 8003396:	2302      	movs	r3, #2
 8003398:	e2ca      	b.n	8003930 <HAL_ADC_ConfigChannel+0x5b8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f040 82ae 	bne.w	800390e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d81c      	bhi.n	80033f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	461a      	mov	r2, r3
 80033ce:	231f      	movs	r3, #31
 80033d0:	4093      	lsls	r3, r2
 80033d2:	43db      	mvns	r3, r3
 80033d4:	4019      	ands	r1, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	fa00 f203 	lsl.w	r2, r0, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
 80033f2:	e063      	b.n	80034bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b09      	cmp	r3, #9
 80033fa:	d81e      	bhi.n	800343a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4413      	add	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	3b1e      	subs	r3, #30
 8003410:	221f      	movs	r2, #31
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	4019      	ands	r1, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	3b1e      	subs	r3, #30
 800342c:	fa00 f203 	lsl.w	r2, r0, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	635a      	str	r2, [r3, #52]	; 0x34
 8003438:	e040      	b.n	80034bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b0e      	cmp	r3, #14
 8003440:	d81e      	bhi.n	8003480 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	3b3c      	subs	r3, #60	; 0x3c
 8003456:	221f      	movs	r2, #31
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	4019      	ands	r1, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	3b3c      	subs	r3, #60	; 0x3c
 8003472:	fa00 f203 	lsl.w	r2, r0, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	639a      	str	r2, [r3, #56]	; 0x38
 800347e:	e01d      	b.n	80034bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	3b5a      	subs	r3, #90	; 0x5a
 8003494:	221f      	movs	r2, #31
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	4019      	ands	r1, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	3b5a      	subs	r3, #90	; 0x5a
 80034b0:	fa00 f203 	lsl.w	r2, r0, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 80e5 	bne.w	8003696 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b09      	cmp	r3, #9
 80034d2:	d91c      	bls.n	800350e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6999      	ldr	r1, [r3, #24]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	3b1e      	subs	r3, #30
 80034e6:	2207      	movs	r2, #7
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	4019      	ands	r1, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6898      	ldr	r0, [r3, #8]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	3b1e      	subs	r3, #30
 8003500:	fa00 f203 	lsl.w	r2, r0, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	619a      	str	r2, [r3, #24]
 800350c:	e019      	b.n	8003542 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6959      	ldr	r1, [r3, #20]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	2207      	movs	r2, #7
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	4019      	ands	r1, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6898      	ldr	r0, [r3, #8]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4413      	add	r3, r2
 8003536:	fa00 f203 	lsl.w	r2, r0, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	08db      	lsrs	r3, r3, #3
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	3b01      	subs	r3, #1
 8003560:	2b03      	cmp	r3, #3
 8003562:	d84f      	bhi.n	8003604 <HAL_ADC_ConfigChannel+0x28c>
 8003564:	a201      	add	r2, pc, #4	; (adr r2, 800356c <HAL_ADC_ConfigChannel+0x1f4>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	0800357d 	.word	0x0800357d
 8003570:	0800359f 	.word	0x0800359f
 8003574:	080035c1 	.word	0x080035c1
 8003578:	080035e3 	.word	0x080035e3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003582:	4b9a      	ldr	r3, [pc, #616]	; (80037ec <HAL_ADC_ConfigChannel+0x474>)
 8003584:	4013      	ands	r3, r2
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	0691      	lsls	r1, r2, #26
 800358c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800358e:	430a      	orrs	r2, r1
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800359a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800359c:	e07e      	b.n	800369c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035a4:	4b91      	ldr	r3, [pc, #580]	; (80037ec <HAL_ADC_ConfigChannel+0x474>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	0691      	lsls	r1, r2, #26
 80035ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035b0:	430a      	orrs	r2, r1
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035bc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035be:	e06d      	b.n	800369c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035c6:	4b89      	ldr	r3, [pc, #548]	; (80037ec <HAL_ADC_ConfigChannel+0x474>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	0691      	lsls	r1, r2, #26
 80035d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035d2:	430a      	orrs	r2, r1
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035de:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035e0:	e05c      	b.n	800369c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035e8:	4b80      	ldr	r3, [pc, #512]	; (80037ec <HAL_ADC_ConfigChannel+0x474>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	0691      	lsls	r1, r2, #26
 80035f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035f4:	430a      	orrs	r2, r1
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003600:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003602:	e04b      	b.n	800369c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800360a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	069b      	lsls	r3, r3, #26
 8003614:	429a      	cmp	r2, r3
 8003616:	d107      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003626:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800362e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	069b      	lsls	r3, r3, #26
 8003638:	429a      	cmp	r2, r3
 800363a:	d107      	bne.n	800364c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800364a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003652:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	069b      	lsls	r3, r3, #26
 800365c:	429a      	cmp	r2, r3
 800365e:	d107      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800366e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003676:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	069b      	lsls	r3, r3, #26
 8003680:	429a      	cmp	r2, r3
 8003682:	d10a      	bne.n	800369a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003692:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003694:	e001      	b.n	800369a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <HAL_ADC_ConfigChannel+0x324>
      break;
 800369a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d108      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x344>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x344>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <HAL_ADC_ConfigChannel+0x346>
 80036bc:	2300      	movs	r3, #0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f040 8130 	bne.w	8003924 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d00f      	beq.n	80036ec <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2201      	movs	r2, #1
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43da      	mvns	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	400a      	ands	r2, r1
 80036e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80036ea:	e049      	b.n	8003780 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2201      	movs	r2, #1
 80036fa:	409a      	lsls	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b09      	cmp	r3, #9
 800370c:	d91c      	bls.n	8003748 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6999      	ldr	r1, [r3, #24]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	3b1b      	subs	r3, #27
 8003720:	2207      	movs	r2, #7
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	4019      	ands	r1, r3
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6898      	ldr	r0, [r3, #8]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4613      	mov	r3, r2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4413      	add	r3, r2
 8003738:	3b1b      	subs	r3, #27
 800373a:	fa00 f203 	lsl.w	r2, r0, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	619a      	str	r2, [r3, #24]
 8003746:	e01b      	b.n	8003780 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6959      	ldr	r1, [r3, #20]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	2207      	movs	r2, #7
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	4019      	ands	r1, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6898      	ldr	r0, [r3, #8]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	fa00 f203 	lsl.w	r2, r0, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003788:	d004      	beq.n	8003794 <HAL_ADC_ConfigChannel+0x41c>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <HAL_ADC_ConfigChannel+0x478>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d101      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x420>
 8003794:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <HAL_ADC_ConfigChannel+0x47c>)
 8003796:	e000      	b.n	800379a <HAL_ADC_ConfigChannel+0x422>
 8003798:	4b17      	ldr	r3, [pc, #92]	; (80037f8 <HAL_ADC_ConfigChannel+0x480>)
 800379a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d105      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80037a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d015      	beq.n	80037dc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80037b4:	2b11      	cmp	r3, #17
 80037b6:	d105      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80037b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80037c8:	2b12      	cmp	r3, #18
 80037ca:	f040 80ab 	bne.w	8003924 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80037ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f040 80a4 	bne.w	8003924 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e4:	d10a      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x484>
 80037e6:	4b02      	ldr	r3, [pc, #8]	; (80037f0 <HAL_ADC_ConfigChannel+0x478>)
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e022      	b.n	8003832 <HAL_ADC_ConfigChannel+0x4ba>
 80037ec:	83fff000 	.word	0x83fff000
 80037f0:	50000100 	.word	0x50000100
 80037f4:	50000300 	.word	0x50000300
 80037f8:	50000700 	.word	0x50000700
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a4e      	ldr	r2, [pc, #312]	; (800393c <HAL_ADC_ConfigChannel+0x5c4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d103      	bne.n	800380e <HAL_ADC_ConfigChannel+0x496>
 8003806:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	e011      	b.n	8003832 <HAL_ADC_ConfigChannel+0x4ba>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a4b      	ldr	r2, [pc, #300]	; (8003940 <HAL_ADC_ConfigChannel+0x5c8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d102      	bne.n	800381e <HAL_ADC_ConfigChannel+0x4a6>
 8003818:	4b4a      	ldr	r3, [pc, #296]	; (8003944 <HAL_ADC_ConfigChannel+0x5cc>)
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e009      	b.n	8003832 <HAL_ADC_ConfigChannel+0x4ba>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a48      	ldr	r2, [pc, #288]	; (8003944 <HAL_ADC_ConfigChannel+0x5cc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d102      	bne.n	800382e <HAL_ADC_ConfigChannel+0x4b6>
 8003828:	4b45      	ldr	r3, [pc, #276]	; (8003940 <HAL_ADC_ConfigChannel+0x5c8>)
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e001      	b.n	8003832 <HAL_ADC_ConfigChannel+0x4ba>
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d108      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x4da>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x4da>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_ADC_ConfigChannel+0x4dc>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d150      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003858:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800385a:	2b00      	cmp	r3, #0
 800385c:	d010      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d107      	bne.n	800387a <HAL_ADC_ConfigChannel+0x502>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_ADC_ConfigChannel+0x502>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <HAL_ADC_ConfigChannel+0x504>
 800387a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800387c:	2b00      	cmp	r3, #0
 800387e:	d13c      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b10      	cmp	r3, #16
 8003886:	d11d      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x54c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003890:	d118      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800389a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800389c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800389e:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <HAL_ADC_ConfigChannel+0x5d0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2a      	ldr	r2, [pc, #168]	; (800394c <HAL_ADC_ConfigChannel+0x5d4>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	0c9a      	lsrs	r2, r3, #18
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038b4:	e002      	b.n	80038bc <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f9      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038c2:	e02e      	b.n	8003922 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b11      	cmp	r3, #17
 80038ca:	d10b      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x56c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d4:	d106      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80038d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80038de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038e2:	e01e      	b.n	8003922 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b12      	cmp	r3, #18
 80038ea:	d11a      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80038ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038f8:	e013      	b.n	8003922 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f043 0220 	orr.w	r2, r3, #32
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800390c:	e00a      	b.n	8003924 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f043 0220 	orr.w	r2, r3, #32
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003920:	e000      	b.n	8003924 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003922:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800392c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003930:	4618      	mov	r0, r3
 8003932:	376c      	adds	r7, #108	; 0x6c
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	50000100 	.word	0x50000100
 8003940:	50000400 	.word	0x50000400
 8003944:	50000500 	.word	0x50000500
 8003948:	20000024 	.word	0x20000024
 800394c:	431bde83 	.word	0x431bde83

08003950 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003950:	b480      	push	{r7}
 8003952:	b099      	sub	sp, #100	; 0x64
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003968:	d102      	bne.n	8003970 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800396a:	4b6d      	ldr	r3, [pc, #436]	; (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	e01a      	b.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a6a      	ldr	r2, [pc, #424]	; (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d103      	bne.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800397a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	e011      	b.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a67      	ldr	r2, [pc, #412]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d102      	bne.n	8003992 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800398c:	4b66      	ldr	r3, [pc, #408]	; (8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	e009      	b.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a64      	ldr	r2, [pc, #400]	; (8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d102      	bne.n	80039a2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800399c:	4b61      	ldr	r3, [pc, #388]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	e001      	b.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0b0      	b.n	8003b12 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e0a9      	b.n	8003b12 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f040 808d 	bne.w	8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 8086 	bne.w	8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ec:	d004      	beq.n	80039f8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a4b      	ldr	r2, [pc, #300]	; (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d101      	bne.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80039f8:	4b4c      	ldr	r3, [pc, #304]	; (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80039fa:	e000      	b.n	80039fe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80039fc:	4b4c      	ldr	r3, [pc, #304]	; (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80039fe:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d040      	beq.n	8003a8a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a1a:	035b      	lsls	r3, r3, #13
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a22:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d108      	bne.n	8003a44 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003a44:	2300      	movs	r3, #0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d15c      	bne.n	8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d107      	bne.n	8003a66 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003a66:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d14b      	bne.n	8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003a6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a74:	f023 030f 	bic.w	r3, r3, #15
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	6811      	ldr	r1, [r2, #0]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	6892      	ldr	r2, [r2, #8]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a86:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a88:	e03c      	b.n	8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a94:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d108      	bne.n	8003ab6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d123      	bne.n	8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d107      	bne.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003ad8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d112      	bne.n	8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ae6:	f023 030f 	bic.w	r3, r3, #15
 8003aea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aec:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003aee:	e009      	b.n	8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003b02:	e000      	b.n	8003b06 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b04:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003b12:	4618      	mov	r0, r3
 8003b14:	3764      	adds	r7, #100	; 0x64
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	50000100 	.word	0x50000100
 8003b24:	50000400 	.word	0x50000400
 8003b28:	50000500 	.word	0x50000500
 8003b2c:	50000300 	.word	0x50000300
 8003b30:	50000700 	.word	0x50000700

08003b34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d108      	bne.n	8003b60 <ADC_Enable+0x2c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <ADC_Enable+0x2c>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <ADC_Enable+0x2e>
 8003b60:	2300      	movs	r3, #0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d143      	bne.n	8003bee <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <ADC_Enable+0xc4>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00d      	beq.n	8003b90 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	f043 0210 	orr.w	r2, r3, #16
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e02f      	b.n	8003bf0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003ba0:	f7fe fd6a 	bl	8002678 <HAL_GetTick>
 8003ba4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ba6:	e01b      	b.n	8003be0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ba8:	f7fe fd66 	bl	8002678 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d914      	bls.n	8003be0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d00d      	beq.n	8003be0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	f043 0210 	orr.w	r2, r3, #16
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	f043 0201 	orr.w	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e007      	b.n	8003bf0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d1dc      	bne.n	8003ba8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	8000003f 	.word	0x8000003f

08003bfc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d108      	bne.n	8003c28 <ADC_Disable+0x2c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <ADC_Disable+0x2c>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <ADC_Disable+0x2e>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d047      	beq.n	8003cbe <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 030d 	and.w	r3, r3, #13
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d10f      	bne.n	8003c5c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0202 	orr.w	r2, r2, #2
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2203      	movs	r2, #3
 8003c52:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003c54:	f7fe fd10 	bl	8002678 <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c5a:	e029      	b.n	8003cb0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	f043 0210 	orr.w	r2, r3, #16
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6c:	f043 0201 	orr.w	r2, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e023      	b.n	8003cc0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c78:	f7fe fcfe 	bl	8002678 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d914      	bls.n	8003cb0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d10d      	bne.n	8003cb0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f043 0210 	orr.w	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e007      	b.n	8003cc0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d0dc      	beq.n	8003c78 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cfa:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	60d3      	str	r3, [r2, #12]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <__NVIC_GetPriorityGrouping+0x18>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	f003 0307 	and.w	r3, r3, #7
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	db0b      	blt.n	8003d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	f003 021f 	and.w	r2, r3, #31
 8003d44:	4907      	ldr	r1, [pc, #28]	; (8003d64 <__NVIC_EnableIRQ+0x38>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	e000e100 	.word	0xe000e100

08003d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	6039      	str	r1, [r7, #0]
 8003d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	db0a      	blt.n	8003d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	490c      	ldr	r1, [pc, #48]	; (8003db4 <__NVIC_SetPriority+0x4c>)
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	0112      	lsls	r2, r2, #4
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d90:	e00a      	b.n	8003da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	4908      	ldr	r1, [pc, #32]	; (8003db8 <__NVIC_SetPriority+0x50>)
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	3b04      	subs	r3, #4
 8003da0:	0112      	lsls	r2, r2, #4
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	440b      	add	r3, r1
 8003da6:	761a      	strb	r2, [r3, #24]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	e000e100 	.word	0xe000e100
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	; 0x24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f1c3 0307 	rsb	r3, r3, #7
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	bf28      	it	cs
 8003dda:	2304      	movcs	r3, #4
 8003ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3304      	adds	r3, #4
 8003de2:	2b06      	cmp	r3, #6
 8003de4:	d902      	bls.n	8003dec <NVIC_EncodePriority+0x30>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3b03      	subs	r3, #3
 8003dea:	e000      	b.n	8003dee <NVIC_EncodePriority+0x32>
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43da      	mvns	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	401a      	ands	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e04:	f04f 31ff 	mov.w	r1, #4294967295
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	43d9      	mvns	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e14:	4313      	orrs	r3, r2
         );
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3724      	adds	r7, #36	; 0x24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e34:	d301      	bcc.n	8003e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e36:	2301      	movs	r3, #1
 8003e38:	e00f      	b.n	8003e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e3a:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <SysTick_Config+0x40>)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e42:	210f      	movs	r1, #15
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295
 8003e48:	f7ff ff8e 	bl	8003d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <SysTick_Config+0x40>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e52:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <SysTick_Config+0x40>)
 8003e54:	2207      	movs	r2, #7
 8003e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	e000e010 	.word	0xe000e010

08003e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ff29 	bl	8003cc8 <__NVIC_SetPriorityGrouping>
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	4603      	mov	r3, r0
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e90:	f7ff ff3e 	bl	8003d10 <__NVIC_GetPriorityGrouping>
 8003e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f7ff ff8e 	bl	8003dbc <NVIC_EncodePriority>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff5d 	bl	8003d68 <__NVIC_SetPriority>
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff31 	bl	8003d2c <__NVIC_EnableIRQ>
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff ffa2 	bl	8003e24 <SysTick_Config>
 8003ee0:	4603      	mov	r3, r0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d008      	beq.n	8003f0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2204      	movs	r2, #4
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e020      	b.n	8003f50 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 020e 	bic.w	r2, r2, #14
 8003f1c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	2101      	movs	r1, #1
 8003f38:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d005      	beq.n	8003f7e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2204      	movs	r2, #4
 8003f76:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
 8003f7c:	e027      	b.n	8003fce <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 020e 	bic.w	r2, r2, #14
 8003f8c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fac:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	4798      	blx	r3
    } 
  }
  return status;
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fe6:	e154      	b.n	8004292 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2101      	movs	r1, #1
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8146 	beq.w	800428c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d005      	beq.n	8004018 <HAL_GPIO_Init+0x40>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d130      	bne.n	800407a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	2203      	movs	r2, #3
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800404e:	2201      	movs	r2, #1
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f003 0201 	and.w	r2, r3, #1
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b03      	cmp	r3, #3
 8004084:	d017      	beq.n	80040b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	2203      	movs	r2, #3
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4013      	ands	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d123      	bne.n	800410a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	08da      	lsrs	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3208      	adds	r2, #8
 80040ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	220f      	movs	r2, #15
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	08da      	lsrs	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3208      	adds	r2, #8
 8004104:	6939      	ldr	r1, [r7, #16]
 8004106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	2203      	movs	r2, #3
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 0203 	and.w	r2, r3, #3
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80a0 	beq.w	800428c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414c:	4b58      	ldr	r3, [pc, #352]	; (80042b0 <HAL_GPIO_Init+0x2d8>)
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	4a57      	ldr	r2, [pc, #348]	; (80042b0 <HAL_GPIO_Init+0x2d8>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6193      	str	r3, [r2, #24]
 8004158:	4b55      	ldr	r3, [pc, #340]	; (80042b0 <HAL_GPIO_Init+0x2d8>)
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004164:	4a53      	ldr	r2, [pc, #332]	; (80042b4 <HAL_GPIO_Init+0x2dc>)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	3302      	adds	r3, #2
 800416c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004170:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	220f      	movs	r2, #15
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800418e:	d019      	beq.n	80041c4 <HAL_GPIO_Init+0x1ec>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a49      	ldr	r2, [pc, #292]	; (80042b8 <HAL_GPIO_Init+0x2e0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d013      	beq.n	80041c0 <HAL_GPIO_Init+0x1e8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a48      	ldr	r2, [pc, #288]	; (80042bc <HAL_GPIO_Init+0x2e4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00d      	beq.n	80041bc <HAL_GPIO_Init+0x1e4>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a47      	ldr	r2, [pc, #284]	; (80042c0 <HAL_GPIO_Init+0x2e8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d007      	beq.n	80041b8 <HAL_GPIO_Init+0x1e0>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a46      	ldr	r2, [pc, #280]	; (80042c4 <HAL_GPIO_Init+0x2ec>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d101      	bne.n	80041b4 <HAL_GPIO_Init+0x1dc>
 80041b0:	2304      	movs	r3, #4
 80041b2:	e008      	b.n	80041c6 <HAL_GPIO_Init+0x1ee>
 80041b4:	2305      	movs	r3, #5
 80041b6:	e006      	b.n	80041c6 <HAL_GPIO_Init+0x1ee>
 80041b8:	2303      	movs	r3, #3
 80041ba:	e004      	b.n	80041c6 <HAL_GPIO_Init+0x1ee>
 80041bc:	2302      	movs	r3, #2
 80041be:	e002      	b.n	80041c6 <HAL_GPIO_Init+0x1ee>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <HAL_GPIO_Init+0x1ee>
 80041c4:	2300      	movs	r3, #0
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	f002 0203 	and.w	r2, r2, #3
 80041cc:	0092      	lsls	r2, r2, #2
 80041ce:	4093      	lsls	r3, r2
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041d6:	4937      	ldr	r1, [pc, #220]	; (80042b4 <HAL_GPIO_Init+0x2dc>)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	089b      	lsrs	r3, r3, #2
 80041dc:	3302      	adds	r3, #2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041e4:	4b38      	ldr	r3, [pc, #224]	; (80042c8 <HAL_GPIO_Init+0x2f0>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	43db      	mvns	r3, r3
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004208:	4a2f      	ldr	r2, [pc, #188]	; (80042c8 <HAL_GPIO_Init+0x2f0>)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800420e:	4b2e      	ldr	r3, [pc, #184]	; (80042c8 <HAL_GPIO_Init+0x2f0>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	43db      	mvns	r3, r3
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4013      	ands	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004232:	4a25      	ldr	r2, [pc, #148]	; (80042c8 <HAL_GPIO_Init+0x2f0>)
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004238:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <HAL_GPIO_Init+0x2f0>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	43db      	mvns	r3, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4013      	ands	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800425c:	4a1a      	ldr	r2, [pc, #104]	; (80042c8 <HAL_GPIO_Init+0x2f0>)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004262:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <HAL_GPIO_Init+0x2f0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	43db      	mvns	r3, r3
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4013      	ands	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004286:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <HAL_GPIO_Init+0x2f0>)
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	3301      	adds	r3, #1
 8004290:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	f47f aea3 	bne.w	8003fe8 <HAL_GPIO_Init+0x10>
  }
}
 80042a2:	bf00      	nop
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40010000 	.word	0x40010000
 80042b8:	48000400 	.word	0x48000400
 80042bc:	48000800 	.word	0x48000800
 80042c0:	48000c00 	.word	0x48000c00
 80042c4:	48001000 	.word	0x48001000
 80042c8:	40010400 	.word	0x40010400

080042cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]
 80042d8:	4613      	mov	r3, r2
 80042da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042dc:	787b      	ldrb	r3, [r7, #1]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042e2:	887a      	ldrh	r2, [r7, #2]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042e8:	e002      	b.n	80042f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042ea:	887a      	ldrh	r2, [r7, #2]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004306:	4b08      	ldr	r3, [pc, #32]	; (8004328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004312:	4a05      	ldr	r2, [pc, #20]	; (8004328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fc ff98 	bl	8001250 <HAL_GPIO_EXTI_Callback>
  }
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40010400 	.word	0x40010400

0800432c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e081      	b.n	8004442 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fd fe56 	bl	8002004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	; 0x24
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800437c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800438c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043a2:	609a      	str	r2, [r3, #8]
 80043a4:	e006      	b.n	80043b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80043b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d104      	bne.n	80043c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69d9      	ldr	r1, [r3, #28]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1a      	ldr	r2, [r3, #32]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b20      	cmp	r3, #32
 800445e:	d138      	bne.n	80044d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800446a:	2302      	movs	r3, #2
 800446c:	e032      	b.n	80044d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2224      	movs	r2, #36	; 0x24
 800447a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800449c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e000      	b.n	80044d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
  }
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d139      	bne.n	800456a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004500:	2302      	movs	r3, #2
 8004502:	e033      	b.n	800456c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2224      	movs	r2, #36	; 0x24
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004532:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	e000      	b.n	800456c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800456a:	2302      	movs	r3, #2
  }
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457a:	b08b      	sub	sp, #44	; 0x2c
 800457c:	af06      	add	r7, sp, #24
 800457e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e0c4      	b.n	8004714 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fd fed6 	bl	8002350 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2203      	movs	r2, #3
 80045a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f004 fc01 	bl	8008db8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
 80045ba:	e040      	b.n	800463e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	440b      	add	r3, r1
 80045cc:	3301      	adds	r3, #1
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	440b      	add	r3, r1
 80045e2:	7bfa      	ldrb	r2, [r7, #15]
 80045e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	440b      	add	r3, r1
 80045f6:	3303      	adds	r3, #3
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045fc:	7bfa      	ldrb	r2, [r7, #15]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	440b      	add	r3, r1
 800460a:	3338      	adds	r3, #56	; 0x38
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	440b      	add	r3, r1
 800461e:	333c      	adds	r3, #60	; 0x3c
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004624:	7bfa      	ldrb	r2, [r7, #15]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	440b      	add	r3, r1
 8004632:	3340      	adds	r3, #64	; 0x40
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	3301      	adds	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	7bfa      	ldrb	r2, [r7, #15]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d3b9      	bcc.n	80045bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004648:	2300      	movs	r3, #0
 800464a:	73fb      	strb	r3, [r7, #15]
 800464c:	e044      	b.n	80046d8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800464e:	7bfa      	ldrb	r2, [r7, #15]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	440b      	add	r3, r1
 800465c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004664:	7bfa      	ldrb	r2, [r7, #15]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	440b      	add	r3, r1
 8004672:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004676:	7bfa      	ldrb	r2, [r7, #15]
 8004678:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800467a:	7bfa      	ldrb	r2, [r7, #15]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	440b      	add	r3, r1
 8004688:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	440b      	add	r3, r1
 800469e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046a6:	7bfa      	ldrb	r2, [r7, #15]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	440b      	add	r3, r1
 80046b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046bc:	7bfa      	ldrb	r2, [r7, #15]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	440b      	add	r3, r1
 80046ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	3301      	adds	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	7bfa      	ldrb	r2, [r7, #15]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d3b5      	bcc.n	800464e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	687e      	ldr	r6, [r7, #4]
 80046ea:	466d      	mov	r5, sp
 80046ec:	f106 0410 	add.w	r4, r6, #16
 80046f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	1d33      	adds	r3, r6, #4
 80046fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046fc:	6838      	ldr	r0, [r7, #0]
 80046fe:	f004 fb76 	bl	8008dee <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800471c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004722:	af00      	add	r7, sp, #0
 8004724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004728:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800472c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800472e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d102      	bne.n	8004742 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f001 b823 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004746:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 817d 	beq.w	8004a52 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004758:	4bbc      	ldr	r3, [pc, #752]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 030c 	and.w	r3, r3, #12
 8004760:	2b04      	cmp	r3, #4
 8004762:	d00c      	beq.n	800477e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004764:	4bb9      	ldr	r3, [pc, #740]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b08      	cmp	r3, #8
 800476e:	d15c      	bne.n	800482a <HAL_RCC_OscConfig+0x10e>
 8004770:	4bb6      	ldr	r3, [pc, #728]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d155      	bne.n	800482a <HAL_RCC_OscConfig+0x10e>
 800477e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004782:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800478a:	fa93 f3a3 	rbit	r3, r3
 800478e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004792:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d102      	bne.n	80047b0 <HAL_RCC_OscConfig+0x94>
 80047aa:	4ba8      	ldr	r3, [pc, #672]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	e015      	b.n	80047dc <HAL_RCC_OscConfig+0xc0>
 80047b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80047bc:	fa93 f3a3 	rbit	r3, r3
 80047c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80047c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80047cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80047d0:	fa93 f3a3 	rbit	r3, r3
 80047d4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80047d8:	4b9c      	ldr	r3, [pc, #624]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047e0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80047e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80047e8:	fa92 f2a2 	rbit	r2, r2
 80047ec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80047f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80047f4:	fab2 f282 	clz	r2, r2
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	f042 0220 	orr.w	r2, r2, #32
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	f002 021f 	and.w	r2, r2, #31
 8004804:	2101      	movs	r1, #1
 8004806:	fa01 f202 	lsl.w	r2, r1, r2
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 811f 	beq.w	8004a50 <HAL_RCC_OscConfig+0x334>
 8004812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f040 8116 	bne.w	8004a50 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	f000 bfaf 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800482a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483a:	d106      	bne.n	800484a <HAL_RCC_OscConfig+0x12e>
 800483c:	4b83      	ldr	r3, [pc, #524]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a82      	ldr	r2, [pc, #520]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	e036      	b.n	80048b8 <HAL_RCC_OscConfig+0x19c>
 800484a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10c      	bne.n	8004874 <HAL_RCC_OscConfig+0x158>
 800485a:	4b7c      	ldr	r3, [pc, #496]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a7b      	ldr	r2, [pc, #492]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	4b79      	ldr	r3, [pc, #484]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a78      	ldr	r2, [pc, #480]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 800486c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e021      	b.n	80048b8 <HAL_RCC_OscConfig+0x19c>
 8004874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004878:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004884:	d10c      	bne.n	80048a0 <HAL_RCC_OscConfig+0x184>
 8004886:	4b71      	ldr	r3, [pc, #452]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a70      	ldr	r2, [pc, #448]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 800488c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4b6e      	ldr	r3, [pc, #440]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a6d      	ldr	r2, [pc, #436]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	e00b      	b.n	80048b8 <HAL_RCC_OscConfig+0x19c>
 80048a0:	4b6a      	ldr	r3, [pc, #424]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a69      	ldr	r2, [pc, #420]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80048a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	4b67      	ldr	r3, [pc, #412]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a66      	ldr	r2, [pc, #408]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80048b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048b8:	4b64      	ldr	r3, [pc, #400]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	f023 020f 	bic.w	r2, r3, #15
 80048c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	495f      	ldr	r1, [pc, #380]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d059      	beq.n	8004996 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e2:	f7fd fec9 	bl	8002678 <HAL_GetTick>
 80048e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048ec:	f7fd fec4 	bl	8002678 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b64      	cmp	r3, #100	; 0x64
 80048fa:	d902      	bls.n	8004902 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	f000 bf43 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
 8004902:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004906:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800490e:	fa93 f3a3 	rbit	r3, r3
 8004912:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004916:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491a:	fab3 f383 	clz	r3, r3
 800491e:	b2db      	uxtb	r3, r3
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d102      	bne.n	8004934 <HAL_RCC_OscConfig+0x218>
 800492e:	4b47      	ldr	r3, [pc, #284]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	e015      	b.n	8004960 <HAL_RCC_OscConfig+0x244>
 8004934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004938:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004940:	fa93 f3a3 	rbit	r3, r3
 8004944:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800494c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004950:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004954:	fa93 f3a3 	rbit	r3, r3
 8004958:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800495c:	4b3b      	ldr	r3, [pc, #236]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004964:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004968:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800496c:	fa92 f2a2 	rbit	r2, r2
 8004970:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004974:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004978:	fab2 f282 	clz	r2, r2
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	f042 0220 	orr.w	r2, r2, #32
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	f002 021f 	and.w	r2, r2, #31
 8004988:	2101      	movs	r1, #1
 800498a:	fa01 f202 	lsl.w	r2, r1, r2
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0ab      	beq.n	80048ec <HAL_RCC_OscConfig+0x1d0>
 8004994:	e05d      	b.n	8004a52 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004996:	f7fd fe6f 	bl	8002678 <HAL_GetTick>
 800499a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a0:	f7fd fe6a 	bl	8002678 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b64      	cmp	r3, #100	; 0x64
 80049ae:	d902      	bls.n	80049b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	f000 bee9 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
 80049b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80049c2:	fa93 f3a3 	rbit	r3, r3
 80049c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80049ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ce:	fab3 f383 	clz	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d102      	bne.n	80049e8 <HAL_RCC_OscConfig+0x2cc>
 80049e2:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	e015      	b.n	8004a14 <HAL_RCC_OscConfig+0x2f8>
 80049e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80049f4:	fa93 f3a3 	rbit	r3, r3
 80049f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80049fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a00:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a04:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004a08:	fa93 f3a3 	rbit	r3, r3
 8004a0c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004a10:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <HAL_RCC_OscConfig+0x330>)
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a18:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004a1c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a20:	fa92 f2a2 	rbit	r2, r2
 8004a24:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004a28:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004a2c:	fab2 f282 	clz	r2, r2
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	f042 0220 	orr.w	r2, r2, #32
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	f002 021f 	and.w	r2, r2, #31
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1ab      	bne.n	80049a0 <HAL_RCC_OscConfig+0x284>
 8004a48:	e003      	b.n	8004a52 <HAL_RCC_OscConfig+0x336>
 8004a4a:	bf00      	nop
 8004a4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 817d 	beq.w	8004d62 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a68:	4ba6      	ldr	r3, [pc, #664]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00b      	beq.n	8004a8c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a74:	4ba3      	ldr	r3, [pc, #652]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d172      	bne.n	8004b66 <HAL_RCC_OscConfig+0x44a>
 8004a80:	4ba0      	ldr	r3, [pc, #640]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d16c      	bne.n	8004b66 <HAL_RCC_OscConfig+0x44a>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a92:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004a96:	fa93 f3a3 	rbit	r3, r3
 8004a9a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004a9e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa2:	fab3 f383 	clz	r3, r3
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d102      	bne.n	8004abc <HAL_RCC_OscConfig+0x3a0>
 8004ab6:	4b93      	ldr	r3, [pc, #588]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	e013      	b.n	8004ae4 <HAL_RCC_OscConfig+0x3c8>
 8004abc:	2302      	movs	r3, #2
 8004abe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004ac6:	fa93 f3a3 	rbit	r3, r3
 8004aca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004ace:	2302      	movs	r3, #2
 8004ad0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004ad4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004ad8:	fa93 f3a3 	rbit	r3, r3
 8004adc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004ae0:	4b88      	ldr	r3, [pc, #544]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004aea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004aee:	fa92 f2a2 	rbit	r2, r2
 8004af2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004af6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004afa:	fab2 f282 	clz	r2, r2
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	f042 0220 	orr.w	r2, r2, #32
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	f002 021f 	and.w	r2, r2, #31
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCC_OscConfig+0x410>
 8004b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d002      	beq.n	8004b2c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f000 be2e 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2c:	4b75      	ldr	r3, [pc, #468]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	21f8      	movs	r1, #248	; 0xf8
 8004b42:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004b4a:	fa91 f1a1 	rbit	r1, r1
 8004b4e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004b52:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004b56:	fab1 f181 	clz	r1, r1
 8004b5a:	b2c9      	uxtb	r1, r1
 8004b5c:	408b      	lsls	r3, r1
 8004b5e:	4969      	ldr	r1, [pc, #420]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b64:	e0fd      	b.n	8004d62 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8088 	beq.w	8004c88 <HAL_RCC_OscConfig+0x56c>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004b82:	fa93 f3a3 	rbit	r3, r3
 8004b86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004b8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b8e:	fab3 f383 	clz	r3, r3
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fd68 	bl	8002678 <HAL_GetTick>
 8004ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bac:	e00a      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bae:	f7fd fd63 	bl	8002678 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d902      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	f000 bde2 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004bce:	fa93 f3a3 	rbit	r3, r3
 8004bd2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004bd6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bda:	fab3 f383 	clz	r3, r3
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d102      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4d8>
 8004bee:	4b45      	ldr	r3, [pc, #276]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	e013      	b.n	8004c1c <HAL_RCC_OscConfig+0x500>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c06:	2302      	movs	r3, #2
 8004c08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c10:	fa93 f3a3 	rbit	r3, r3
 8004c14:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004c18:	4b3a      	ldr	r3, [pc, #232]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004c22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c26:	fa92 f2a2 	rbit	r2, r2
 8004c2a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004c2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004c32:	fab2 f282 	clz	r2, r2
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	f042 0220 	orr.w	r2, r2, #32
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	f002 021f 	and.w	r2, r2, #31
 8004c42:	2101      	movs	r1, #1
 8004c44:	fa01 f202 	lsl.w	r2, r1, r2
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0af      	beq.n	8004bae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4e:	4b2d      	ldr	r3, [pc, #180]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	21f8      	movs	r1, #248	; 0xf8
 8004c64:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c68:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004c6c:	fa91 f1a1 	rbit	r1, r1
 8004c70:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004c74:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004c78:	fab1 f181 	clz	r1, r1
 8004c7c:	b2c9      	uxtb	r1, r1
 8004c7e:	408b      	lsls	r3, r1
 8004c80:	4920      	ldr	r1, [pc, #128]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]
 8004c86:	e06c      	b.n	8004d62 <HAL_RCC_OscConfig+0x646>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004c92:	fa93 f3a3 	rbit	r3, r3
 8004c96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004c9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c9e:	fab3 f383 	clz	r3, r3
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ca8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	461a      	mov	r2, r3
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb4:	f7fd fce0 	bl	8002678 <HAL_GetTick>
 8004cb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cbe:	f7fd fcdb 	bl	8002678 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d902      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	f000 bd5a 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cde:	fa93 f3a3 	rbit	r3, r3
 8004ce2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cea:	fab3 f383 	clz	r3, r3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d104      	bne.n	8004d08 <HAL_RCC_OscConfig+0x5ec>
 8004cfe:	4b01      	ldr	r3, [pc, #4]	; (8004d04 <HAL_RCC_OscConfig+0x5e8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	e015      	b.n	8004d30 <HAL_RCC_OscConfig+0x614>
 8004d04:	40021000 	.word	0x40021000
 8004d08:	2302      	movs	r3, #2
 8004d0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d12:	fa93 f3a3 	rbit	r3, r3
 8004d16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d24:	fa93 f3a3 	rbit	r3, r3
 8004d28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d2c:	4bc8      	ldr	r3, [pc, #800]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	2202      	movs	r2, #2
 8004d32:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004d36:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004d3a:	fa92 f2a2 	rbit	r2, r2
 8004d3e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004d42:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004d46:	fab2 f282 	clz	r2, r2
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	f042 0220 	orr.w	r2, r2, #32
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	f002 021f 	and.w	r2, r2, #31
 8004d56:	2101      	movs	r1, #1
 8004d58:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1ad      	bne.n	8004cbe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 8110 	beq.w	8004f98 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d079      	beq.n	8004e7c <HAL_RCC_OscConfig+0x760>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9e:	fab3 f383 	clz	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	4bab      	ldr	r3, [pc, #684]	; (8005054 <HAL_RCC_OscConfig+0x938>)
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	461a      	mov	r2, r3
 8004dae:	2301      	movs	r3, #1
 8004db0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db2:	f7fd fc61 	bl	8002678 <HAL_GetTick>
 8004db6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dba:	e00a      	b.n	8004dd2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dbc:	f7fd fc5c 	bl	8002678 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d902      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	f000 bcdb 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ddc:	fa93 f3a3 	rbit	r3, r3
 8004de0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004dec:	2202      	movs	r2, #2
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	fa93 f2a3 	rbit	r2, r3
 8004dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e10:	2202      	movs	r2, #2
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	fa93 f2a3 	rbit	r2, r3
 8004e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2c:	4b88      	ldr	r3, [pc, #544]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e38:	2102      	movs	r1, #2
 8004e3a:	6019      	str	r1, [r3, #0]
 8004e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	fa93 f1a3 	rbit	r1, r3
 8004e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e52:	6019      	str	r1, [r3, #0]
  return result;
 8004e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2101      	movs	r1, #1
 8004e70:	fa01 f303 	lsl.w	r3, r1, r3
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0a0      	beq.n	8004dbc <HAL_RCC_OscConfig+0x6a0>
 8004e7a:	e08d      	b.n	8004f98 <HAL_RCC_OscConfig+0x87c>
 8004e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	fa93 f2a3 	rbit	r2, r3
 8004e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e9e:	601a      	str	r2, [r3, #0]
  return result;
 8004ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ea8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eaa:	fab3 f383 	clz	r3, r3
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4b68      	ldr	r3, [pc, #416]	; (8005054 <HAL_RCC_OscConfig+0x938>)
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebe:	f7fd fbdb 	bl	8002678 <HAL_GetTick>
 8004ec2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec6:	e00a      	b.n	8004ede <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ec8:	f7fd fbd6 	bl	8002678 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d902      	bls.n	8004ede <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	f000 bc55 	b.w	8005788 <HAL_RCC_OscConfig+0x106c>
 8004ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	fa93 f2a3 	rbit	r2, r3
 8004ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	fa93 f2a3 	rbit	r2, r3
 8004f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f2e:	2202      	movs	r2, #2
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	fa93 f2a3 	rbit	r2, r3
 8004f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004f48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f4a:	4b41      	ldr	r3, [pc, #260]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f56:	2102      	movs	r1, #2
 8004f58:	6019      	str	r1, [r3, #0]
 8004f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	fa93 f1a3 	rbit	r1, r3
 8004f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f70:	6019      	str	r1, [r3, #0]
  return result;
 8004f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	fab3 f383 	clz	r3, r3
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d197      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 81a1 	beq.w	80052f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb4:	4b26      	ldr	r3, [pc, #152]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d116      	bne.n	8004fee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc0:	4b23      	ldr	r3, [pc, #140]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	4a22      	ldr	r2, [pc, #136]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fca:	61d3      	str	r3, [r2, #28]
 8004fcc:	4b20      	ldr	r3, [pc, #128]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004fe6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fee:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <HAL_RCC_OscConfig+0x93c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d11a      	bne.n	8005030 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ffa:	4b17      	ldr	r3, [pc, #92]	; (8005058 <HAL_RCC_OscConfig+0x93c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a16      	ldr	r2, [pc, #88]	; (8005058 <HAL_RCC_OscConfig+0x93c>)
 8005000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005004:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005006:	f7fd fb37 	bl	8002678 <HAL_GetTick>
 800500a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500e:	e009      	b.n	8005024 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005010:	f7fd fb32 	bl	8002678 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b64      	cmp	r3, #100	; 0x64
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e3b1      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <HAL_RCC_OscConfig+0x93c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0ef      	beq.n	8005010 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d10d      	bne.n	800505c <HAL_RCC_OscConfig+0x940>
 8005040:	4b03      	ldr	r3, [pc, #12]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	4a02      	ldr	r2, [pc, #8]	; (8005050 <HAL_RCC_OscConfig+0x934>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6213      	str	r3, [r2, #32]
 800504c:	e03c      	b.n	80050c8 <HAL_RCC_OscConfig+0x9ac>
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
 8005054:	10908120 	.word	0x10908120
 8005058:	40007000 	.word	0x40007000
 800505c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005060:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10c      	bne.n	8005086 <HAL_RCC_OscConfig+0x96a>
 800506c:	4bc1      	ldr	r3, [pc, #772]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	4ac0      	ldr	r2, [pc, #768]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	6213      	str	r3, [r2, #32]
 8005078:	4bbe      	ldr	r3, [pc, #760]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	4abd      	ldr	r2, [pc, #756]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 800507e:	f023 0304 	bic.w	r3, r3, #4
 8005082:	6213      	str	r3, [r2, #32]
 8005084:	e020      	b.n	80050c8 <HAL_RCC_OscConfig+0x9ac>
 8005086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	2b05      	cmp	r3, #5
 8005094:	d10c      	bne.n	80050b0 <HAL_RCC_OscConfig+0x994>
 8005096:	4bb7      	ldr	r3, [pc, #732]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	4ab6      	ldr	r2, [pc, #728]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 800509c:	f043 0304 	orr.w	r3, r3, #4
 80050a0:	6213      	str	r3, [r2, #32]
 80050a2:	4bb4      	ldr	r3, [pc, #720]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4ab3      	ldr	r2, [pc, #716]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	6213      	str	r3, [r2, #32]
 80050ae:	e00b      	b.n	80050c8 <HAL_RCC_OscConfig+0x9ac>
 80050b0:	4bb0      	ldr	r3, [pc, #704]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	4aaf      	ldr	r2, [pc, #700]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	6213      	str	r3, [r2, #32]
 80050bc:	4bad      	ldr	r3, [pc, #692]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	4aac      	ldr	r2, [pc, #688]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80050c2:	f023 0304 	bic.w	r3, r3, #4
 80050c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 8081 	beq.w	80051dc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050da:	f7fd facd 	bl	8002678 <HAL_GetTick>
 80050de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e2:	e00b      	b.n	80050fc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e4:	f7fd fac8 	bl	8002678 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e345      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
 80050fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005100:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005104:	2202      	movs	r2, #2
 8005106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	fa93 f2a3 	rbit	r2, r3
 8005116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005124:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005128:	2202      	movs	r2, #2
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005130:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	fa93 f2a3 	rbit	r2, r3
 800513a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005142:	601a      	str	r2, [r3, #0]
  return result;
 8005144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005148:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800514c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514e:	fab3 f383 	clz	r3, r3
 8005152:	b2db      	uxtb	r3, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d102      	bne.n	8005168 <HAL_RCC_OscConfig+0xa4c>
 8005162:	4b84      	ldr	r3, [pc, #528]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	e013      	b.n	8005190 <HAL_RCC_OscConfig+0xa74>
 8005168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005170:	2202      	movs	r2, #2
 8005172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005178:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	fa93 f2a3 	rbit	r2, r3
 8005182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005186:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	4b79      	ldr	r3, [pc, #484]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005194:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005198:	2102      	movs	r1, #2
 800519a:	6011      	str	r1, [r2, #0]
 800519c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	fa92 f1a2 	rbit	r1, r2
 80051aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80051b2:	6011      	str	r1, [r2, #0]
  return result;
 80051b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051b8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	fab2 f282 	clz	r2, r2
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	f002 021f 	and.w	r2, r2, #31
 80051ce:	2101      	movs	r1, #1
 80051d0:	fa01 f202 	lsl.w	r2, r1, r2
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d084      	beq.n	80050e4 <HAL_RCC_OscConfig+0x9c8>
 80051da:	e07f      	b.n	80052dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051dc:	f7fd fa4c 	bl	8002678 <HAL_GetTick>
 80051e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e4:	e00b      	b.n	80051fe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e6:	f7fd fa47 	bl	8002678 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e2c4      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
 80051fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005202:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005206:	2202      	movs	r2, #2
 8005208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	fa93 f2a3 	rbit	r2, r3
 8005218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005226:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800522a:	2202      	movs	r2, #2
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005232:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	fa93 f2a3 	rbit	r2, r3
 800523c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005240:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005244:	601a      	str	r2, [r3, #0]
  return result;
 8005246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800524e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005250:	fab3 f383 	clz	r3, r3
 8005254:	b2db      	uxtb	r3, r3
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f043 0302 	orr.w	r3, r3, #2
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d102      	bne.n	800526a <HAL_RCC_OscConfig+0xb4e>
 8005264:	4b43      	ldr	r3, [pc, #268]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	e013      	b.n	8005292 <HAL_RCC_OscConfig+0xb76>
 800526a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800526e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005272:	2202      	movs	r2, #2
 8005274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	fa93 f2a3 	rbit	r2, r3
 8005284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005288:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	4b39      	ldr	r3, [pc, #228]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005296:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800529a:	2102      	movs	r1, #2
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80052a6:	6812      	ldr	r2, [r2, #0]
 80052a8:	fa92 f1a2 	rbit	r1, r2
 80052ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80052b4:	6011      	str	r1, [r2, #0]
  return result;
 80052b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052ba:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	fab2 f282 	clz	r2, r2
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	f002 021f 	and.w	r2, r2, #31
 80052d0:	2101      	movs	r1, #1
 80052d2:	fa01 f202 	lsl.w	r2, r1, r2
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d184      	bne.n	80051e6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d105      	bne.n	80052f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e4:	4b23      	ldr	r3, [pc, #140]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	4a22      	ldr	r2, [pc, #136]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 80052ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8242 	beq.w	8005786 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <HAL_RCC_OscConfig+0xc58>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f003 030c 	and.w	r3, r3, #12
 800530a:	2b08      	cmp	r3, #8
 800530c:	f000 8213 	beq.w	8005736 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005314:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	2b02      	cmp	r3, #2
 800531e:	f040 8162 	bne.w	80055e6 <HAL_RCC_OscConfig+0xeca>
 8005322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005326:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800532a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800532e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005334:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	fa93 f2a3 	rbit	r2, r3
 800533e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005342:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005346:	601a      	str	r2, [r3, #0]
  return result;
 8005348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005350:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005352:	fab3 f383 	clz	r3, r3
 8005356:	b2db      	uxtb	r3, r3
 8005358:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800535c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	461a      	mov	r2, r3
 8005364:	2300      	movs	r3, #0
 8005366:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005368:	f7fd f986 	bl	8002678 <HAL_GetTick>
 800536c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005370:	e00c      	b.n	800538c <HAL_RCC_OscConfig+0xc70>
 8005372:	bf00      	nop
 8005374:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005378:	f7fd f97e 	bl	8002678 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e1fd      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
 800538c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005390:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	fa93 f2a3 	rbit	r2, r3
 80053a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80053b0:	601a      	str	r2, [r3, #0]
  return result;
 80053b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80053ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053bc:	fab3 f383 	clz	r3, r3
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d102      	bne.n	80053d6 <HAL_RCC_OscConfig+0xcba>
 80053d0:	4bb0      	ldr	r3, [pc, #704]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	e027      	b.n	8005426 <HAL_RCC_OscConfig+0xd0a>
 80053d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80053de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	fa93 f2a3 	rbit	r2, r3
 80053f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005400:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	fa93 f2a3 	rbit	r2, r3
 8005418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	4b9c      	ldr	r3, [pc, #624]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800542a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800542e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005432:	6011      	str	r1, [r2, #0]
 8005434:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005438:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	fa92 f1a2 	rbit	r1, r2
 8005442:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005446:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800544a:	6011      	str	r1, [r2, #0]
  return result;
 800544c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005450:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	fab2 f282 	clz	r2, r2
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	f042 0220 	orr.w	r2, r2, #32
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	f002 021f 	and.w	r2, r2, #31
 8005466:	2101      	movs	r1, #1
 8005468:	fa01 f202 	lsl.w	r2, r1, r2
 800546c:	4013      	ands	r3, r2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d182      	bne.n	8005378 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005472:	4b88      	ldr	r3, [pc, #544]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800547a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800548a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	430b      	orrs	r3, r1
 8005494:	497f      	ldr	r1, [pc, #508]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 8005496:	4313      	orrs	r3, r2
 8005498:	604b      	str	r3, [r1, #4]
 800549a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800549e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80054a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	fa93 f2a3 	rbit	r2, r3
 80054b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80054be:	601a      	str	r2, [r3, #0]
  return result;
 80054c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80054c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ca:	fab3 f383 	clz	r3, r3
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	461a      	mov	r2, r3
 80054dc:	2301      	movs	r3, #1
 80054de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e0:	f7fd f8ca 	bl	8002678 <HAL_GetTick>
 80054e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054e8:	e009      	b.n	80054fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ea:	f7fd f8c5 	bl	8002678 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e144      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
 80054fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005502:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800550a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005510:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	fa93 f2a3 	rbit	r2, r3
 800551a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005522:	601a      	str	r2, [r3, #0]
  return result;
 8005524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005528:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800552c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800552e:	fab3 f383 	clz	r3, r3
 8005532:	b2db      	uxtb	r3, r3
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b01      	cmp	r3, #1
 8005540:	d102      	bne.n	8005548 <HAL_RCC_OscConfig+0xe2c>
 8005542:	4b54      	ldr	r3, [pc, #336]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	e027      	b.n	8005598 <HAL_RCC_OscConfig+0xe7c>
 8005548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	fa93 f2a3 	rbit	r2, r3
 8005564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005568:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005572:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005576:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005580:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	fa93 f2a3 	rbit	r2, r3
 800558a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800558e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	4b3f      	ldr	r3, [pc, #252]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800559c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80055a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055a4:	6011      	str	r1, [r2, #0]
 80055a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055aa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	fa92 f1a2 	rbit	r1, r2
 80055b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055b8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80055bc:	6011      	str	r1, [r2, #0]
  return result;
 80055be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	fab2 f282 	clz	r2, r2
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	f042 0220 	orr.w	r2, r2, #32
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	f002 021f 	and.w	r2, r2, #31
 80055d8:	2101      	movs	r1, #1
 80055da:	fa01 f202 	lsl.w	r2, r1, r2
 80055de:	4013      	ands	r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d082      	beq.n	80054ea <HAL_RCC_OscConfig+0xdce>
 80055e4:	e0cf      	b.n	8005786 <HAL_RCC_OscConfig+0x106a>
 80055e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80055ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	fa93 f2a3 	rbit	r2, r3
 8005602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005606:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800560a:	601a      	str	r2, [r3, #0]
  return result;
 800560c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005610:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005614:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005616:	fab3 f383 	clz	r3, r3
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	461a      	mov	r2, r3
 8005628:	2300      	movs	r3, #0
 800562a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562c:	f7fd f824 	bl	8002678 <HAL_GetTick>
 8005630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005634:	e009      	b.n	800564a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005636:	f7fd f81f 	bl	8002678 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e09e      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
 800564a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800564e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800565c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	fa93 f2a3 	rbit	r2, r3
 8005666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800566a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800566e:	601a      	str	r2, [r3, #0]
  return result;
 8005670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005674:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005678:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800567a:	fab3 f383 	clz	r3, r3
 800567e:	b2db      	uxtb	r3, r3
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	d104      	bne.n	8005698 <HAL_RCC_OscConfig+0xf7c>
 800568e:	4b01      	ldr	r3, [pc, #4]	; (8005694 <HAL_RCC_OscConfig+0xf78>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	e029      	b.n	80056e8 <HAL_RCC_OscConfig+0xfcc>
 8005694:	40021000 	.word	0x40021000
 8005698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800569c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80056a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056aa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	fa93 f2a3 	rbit	r2, r3
 80056b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80056c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	fa93 f2a3 	rbit	r2, r3
 80056da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	4b2b      	ldr	r3, [pc, #172]	; (8005794 <HAL_RCC_OscConfig+0x1078>)
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056ec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80056f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056f4:	6011      	str	r1, [r2, #0]
 80056f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056fa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	fa92 f1a2 	rbit	r1, r2
 8005704:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005708:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800570c:	6011      	str	r1, [r2, #0]
  return result;
 800570e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005712:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	fab2 f282 	clz	r2, r2
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	f042 0220 	orr.w	r2, r2, #32
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	f002 021f 	and.w	r2, r2, #31
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f202 	lsl.w	r2, r1, r2
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d180      	bne.n	8005636 <HAL_RCC_OscConfig+0xf1a>
 8005734:	e027      	b.n	8005786 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e01e      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <HAL_RCC_OscConfig+0x1078>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005752:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005756:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800575a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800575e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	429a      	cmp	r2, r3
 8005768:	d10b      	bne.n	8005782 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800576a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800576e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800577e:	429a      	cmp	r2, r3
 8005780:	d001      	beq.n	8005786 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40021000 	.word	0x40021000

08005798 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b09e      	sub	sp, #120	; 0x78
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e162      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057b0:	4b90      	ldr	r3, [pc, #576]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d910      	bls.n	80057e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057be:	4b8d      	ldr	r3, [pc, #564]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f023 0207 	bic.w	r2, r3, #7
 80057c6:	498b      	ldr	r1, [pc, #556]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ce:	4b89      	ldr	r3, [pc, #548]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e14a      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ec:	4b82      	ldr	r3, [pc, #520]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	497f      	ldr	r1, [pc, #508]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 80dc 	beq.w	80059c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d13c      	bne.n	800588e <HAL_RCC_ClockConfig+0xf6>
 8005814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005818:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800581c:	fa93 f3a3 	rbit	r3, r3
 8005820:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005824:	fab3 f383 	clz	r3, r3
 8005828:	b2db      	uxtb	r3, r3
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	d102      	bne.n	800583e <HAL_RCC_ClockConfig+0xa6>
 8005838:	4b6f      	ldr	r3, [pc, #444]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	e00f      	b.n	800585e <HAL_RCC_ClockConfig+0xc6>
 800583e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005842:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005846:	fa93 f3a3 	rbit	r3, r3
 800584a:	667b      	str	r3, [r7, #100]	; 0x64
 800584c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005850:	663b      	str	r3, [r7, #96]	; 0x60
 8005852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005854:	fa93 f3a3 	rbit	r3, r3
 8005858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800585a:	4b67      	ldr	r3, [pc, #412]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005862:	65ba      	str	r2, [r7, #88]	; 0x58
 8005864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005866:	fa92 f2a2 	rbit	r2, r2
 800586a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800586c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800586e:	fab2 f282 	clz	r2, r2
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	f042 0220 	orr.w	r2, r2, #32
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	f002 021f 	and.w	r2, r2, #31
 800587e:	2101      	movs	r1, #1
 8005880:	fa01 f202 	lsl.w	r2, r1, r2
 8005884:	4013      	ands	r3, r2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d17b      	bne.n	8005982 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0f3      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d13c      	bne.n	8005910 <HAL_RCC_ClockConfig+0x178>
 8005896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800589a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589e:	fa93 f3a3 	rbit	r3, r3
 80058a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80058a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a6:	fab3 f383 	clz	r3, r3
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	095b      	lsrs	r3, r3, #5
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f043 0301 	orr.w	r3, r3, #1
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d102      	bne.n	80058c0 <HAL_RCC_ClockConfig+0x128>
 80058ba:	4b4f      	ldr	r3, [pc, #316]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	e00f      	b.n	80058e0 <HAL_RCC_ClockConfig+0x148>
 80058c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c8:	fa93 f3a3 	rbit	r3, r3
 80058cc:	647b      	str	r3, [r7, #68]	; 0x44
 80058ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058d2:	643b      	str	r3, [r7, #64]	; 0x40
 80058d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058d6:	fa93 f3a3 	rbit	r3, r3
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058dc:	4b46      	ldr	r3, [pc, #280]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80058e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058e8:	fa92 f2a2 	rbit	r2, r2
 80058ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80058ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058f0:	fab2 f282 	clz	r2, r2
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	f042 0220 	orr.w	r2, r2, #32
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	f002 021f 	and.w	r2, r2, #31
 8005900:	2101      	movs	r1, #1
 8005902:	fa01 f202 	lsl.w	r2, r1, r2
 8005906:	4013      	ands	r3, r2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d13a      	bne.n	8005982 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0b2      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
 8005910:	2302      	movs	r3, #2
 8005912:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	fa93 f3a3 	rbit	r3, r3
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591e:	fab3 f383 	clz	r3, r3
 8005922:	b2db      	uxtb	r3, r3
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b01      	cmp	r3, #1
 8005930:	d102      	bne.n	8005938 <HAL_RCC_ClockConfig+0x1a0>
 8005932:	4b31      	ldr	r3, [pc, #196]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	e00d      	b.n	8005954 <HAL_RCC_ClockConfig+0x1bc>
 8005938:	2302      	movs	r3, #2
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	fa93 f3a3 	rbit	r3, r3
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
 8005944:	2302      	movs	r3, #2
 8005946:	623b      	str	r3, [r7, #32]
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	61fb      	str	r3, [r7, #28]
 8005950:	4b29      	ldr	r3, [pc, #164]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2202      	movs	r2, #2
 8005956:	61ba      	str	r2, [r7, #24]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	fa92 f2a2 	rbit	r2, r2
 800595e:	617a      	str	r2, [r7, #20]
  return result;
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	fab2 f282 	clz	r2, r2
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	f042 0220 	orr.w	r2, r2, #32
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	f002 021f 	and.w	r2, r2, #31
 8005972:	2101      	movs	r1, #1
 8005974:	fa01 f202 	lsl.w	r2, r1, r2
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e079      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005982:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f023 0203 	bic.w	r2, r3, #3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	491a      	ldr	r1, [pc, #104]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 8005990:	4313      	orrs	r3, r2
 8005992:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005994:	f7fc fe70 	bl	8002678 <HAL_GetTick>
 8005998:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599a:	e00a      	b.n	80059b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800599c:	f7fc fe6c 	bl	8002678 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e061      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b2:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f003 020c 	and.w	r2, r3, #12
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d1eb      	bne.n	800599c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059c4:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d214      	bcs.n	80059fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d2:	4b08      	ldr	r3, [pc, #32]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f023 0207 	bic.w	r2, r3, #7
 80059da:	4906      	ldr	r1, [pc, #24]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	4313      	orrs	r3, r2
 80059e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e2:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <HAL_RCC_ClockConfig+0x25c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d005      	beq.n	80059fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e040      	b.n	8005a76 <HAL_RCC_ClockConfig+0x2de>
 80059f4:	40022000 	.word	0x40022000
 80059f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a08:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <HAL_RCC_ClockConfig+0x2e8>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	491a      	ldr	r1, [pc, #104]	; (8005a80 <HAL_RCC_ClockConfig+0x2e8>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a26:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <HAL_RCC_ClockConfig+0x2e8>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	4912      	ldr	r1, [pc, #72]	; (8005a80 <HAL_RCC_ClockConfig+0x2e8>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a3a:	f000 f829 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 8005a3e:	4601      	mov	r1, r0
 8005a40:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <HAL_RCC_ClockConfig+0x2e8>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a48:	22f0      	movs	r2, #240	; 0xf0
 8005a4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	fa92 f2a2 	rbit	r2, r2
 8005a52:	60fa      	str	r2, [r7, #12]
  return result;
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	fab2 f282 	clz	r2, r2
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	40d3      	lsrs	r3, r2
 8005a5e:	4a09      	ldr	r2, [pc, #36]	; (8005a84 <HAL_RCC_ClockConfig+0x2ec>)
 8005a60:	5cd3      	ldrb	r3, [r2, r3]
 8005a62:	fa21 f303 	lsr.w	r3, r1, r3
 8005a66:	4a08      	ldr	r2, [pc, #32]	; (8005a88 <HAL_RCC_ClockConfig+0x2f0>)
 8005a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005a6a:	4b08      	ldr	r3, [pc, #32]	; (8005a8c <HAL_RCC_ClockConfig+0x2f4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fc fdbe 	bl	80025f0 <HAL_InitTick>
  
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3778      	adds	r7, #120	; 0x78
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40021000 	.word	0x40021000
 8005a84:	0800a9cc 	.word	0x0800a9cc
 8005a88:	20000024 	.word	0x20000024
 8005a8c:	20000028 	.word	0x20000028

08005a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b08b      	sub	sp, #44	; 0x2c
 8005a94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005aaa:	4b29      	ldr	r3, [pc, #164]	; (8005b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d002      	beq.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x30>
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x36>
 8005abe:	e03c      	b.n	8005b3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ac0:	4b24      	ldr	r3, [pc, #144]	; (8005b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ac2:	623b      	str	r3, [r7, #32]
      break;
 8005ac4:	e03c      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005acc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005ad0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	fa92 f2a2 	rbit	r2, r2
 8005ad8:	607a      	str	r2, [r7, #4]
  return result;
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	fab2 f282 	clz	r2, r2
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	40d3      	lsrs	r3, r2
 8005ae4:	4a1c      	ldr	r2, [pc, #112]	; (8005b58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005ae6:	5cd3      	ldrb	r3, [r2, r3]
 8005ae8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005aea:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	220f      	movs	r2, #15
 8005af4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	fa92 f2a2 	rbit	r2, r2
 8005afc:	60fa      	str	r2, [r7, #12]
  return result;
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	fab2 f282 	clz	r2, r2
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	40d3      	lsrs	r3, r2
 8005b08:	4a14      	ldr	r2, [pc, #80]	; (8005b5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b0a:	5cd3      	ldrb	r3, [r2, r3]
 8005b0c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b18:	4a0e      	ldr	r2, [pc, #56]	; (8005b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	fb02 f303 	mul.w	r3, r2, r3
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24
 8005b28:	e004      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	4a0c      	ldr	r2, [pc, #48]	; (8005b60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	623b      	str	r3, [r7, #32]
      break;
 8005b38:	e002      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b3c:	623b      	str	r3, [r7, #32]
      break;
 8005b3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b40:	6a3b      	ldr	r3, [r7, #32]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	372c      	adds	r7, #44	; 0x2c
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40021000 	.word	0x40021000
 8005b54:	007a1200 	.word	0x007a1200
 8005b58:	0800a9e4 	.word	0x0800a9e4
 8005b5c:	0800a9f4 	.word	0x0800a9f4
 8005b60:	003d0900 	.word	0x003d0900

08005b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b68:	4b03      	ldr	r3, [pc, #12]	; (8005b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000024 	.word	0x20000024

08005b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005b82:	f7ff ffef 	bl	8005b64 <HAL_RCC_GetHCLKFreq>
 8005b86:	4601      	mov	r1, r0
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b90:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005b94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	fa92 f2a2 	rbit	r2, r2
 8005b9c:	603a      	str	r2, [r7, #0]
  return result;
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	fab2 f282 	clz	r2, r2
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	40d3      	lsrs	r3, r2
 8005ba8:	4a04      	ldr	r2, [pc, #16]	; (8005bbc <HAL_RCC_GetPCLK1Freq+0x40>)
 8005baa:	5cd3      	ldrb	r3, [r2, r3]
 8005bac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	0800a9dc 	.word	0x0800a9dc

08005bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005bc6:	f7ff ffcd 	bl	8005b64 <HAL_RCC_GetHCLKFreq>
 8005bca:	4601      	mov	r1, r0
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005bd4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005bd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	fa92 f2a2 	rbit	r2, r2
 8005be0:	603a      	str	r2, [r7, #0]
  return result;
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	fab2 f282 	clz	r2, r2
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	40d3      	lsrs	r3, r2
 8005bec:	4a04      	ldr	r2, [pc, #16]	; (8005c00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005bee:	5cd3      	ldrb	r3, [r2, r3]
 8005bf0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	0800a9dc 	.word	0x0800a9dc

08005c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b092      	sub	sp, #72	; 0x48
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c14:	2300      	movs	r3, #0
 8005c16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80d4 	beq.w	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c28:	4b4e      	ldr	r3, [pc, #312]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10e      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c34:	4b4b      	ldr	r3, [pc, #300]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	4a4a      	ldr	r2, [pc, #296]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	61d3      	str	r3, [r2, #28]
 8005c40:	4b48      	ldr	r3, [pc, #288]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c52:	4b45      	ldr	r3, [pc, #276]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d118      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c5e:	4b42      	ldr	r3, [pc, #264]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a41      	ldr	r2, [pc, #260]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c6a:	f7fc fd05 	bl	8002678 <HAL_GetTick>
 8005c6e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c70:	e008      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c72:	f7fc fd01 	bl	8002678 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b64      	cmp	r3, #100	; 0x64
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e169      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c84:	4b38      	ldr	r3, [pc, #224]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0f0      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c90:	4b34      	ldr	r3, [pc, #208]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 8084 	beq.w	8005daa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d07c      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cb0:	4b2c      	ldr	r3, [pc, #176]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	fa93 f3a3 	rbit	r3, r3
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cca:	fab3 f383 	clz	r3, r3
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4b26      	ldr	r3, [pc, #152]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2301      	movs	r3, #1
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	fa93 f3a3 	rbit	r3, r3
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cee:	fab3 f383 	clz	r3, r3
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4b1d      	ldr	r3, [pc, #116]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	2300      	movs	r3, #0
 8005d00:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d02:	4a18      	ldr	r2, [pc, #96]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d06:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d04b      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d12:	f7fc fcb1 	bl	8002678 <HAL_GetTick>
 8005d16:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d18:	e00a      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d1a:	f7fc fcad 	bl	8002678 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e113      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005d30:	2302      	movs	r3, #2
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	fa93 f3a3 	rbit	r3, r3
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	623b      	str	r3, [r7, #32]
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	fa93 f3a3 	rbit	r3, r3
 8005d46:	61fb      	str	r3, [r7, #28]
  return result;
 8005d48:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4a:	fab3 f383 	clz	r3, r3
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	f043 0302 	orr.w	r3, r3, #2
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d108      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005d5e:	4b01      	ldr	r3, [pc, #4]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	e00d      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40007000 	.word	0x40007000
 8005d6c:	10908100 	.word	0x10908100
 8005d70:	2302      	movs	r3, #2
 8005d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	fa93 f3a3 	rbit	r3, r3
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	4b78      	ldr	r3, [pc, #480]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2202      	movs	r2, #2
 8005d82:	613a      	str	r2, [r7, #16]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	fa92 f2a2 	rbit	r2, r2
 8005d8a:	60fa      	str	r2, [r7, #12]
  return result;
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	fab2 f282 	clz	r2, r2
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	f002 021f 	and.w	r2, r2, #31
 8005d9e:	2101      	movs	r1, #1
 8005da0:	fa01 f202 	lsl.w	r2, r1, r2
 8005da4:	4013      	ands	r3, r2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0b7      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005daa:	4b6d      	ldr	r3, [pc, #436]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	496a      	ldr	r1, [pc, #424]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005dbc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d105      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dc4:	4b66      	ldr	r3, [pc, #408]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	4a65      	ldr	r2, [pc, #404]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ddc:	4b60      	ldr	r3, [pc, #384]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	f023 0203 	bic.w	r2, r3, #3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	495d      	ldr	r1, [pc, #372]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dfa:	4b59      	ldr	r3, [pc, #356]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	4956      	ldr	r1, [pc, #344]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e18:	4b51      	ldr	r3, [pc, #324]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	494e      	ldr	r1, [pc, #312]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e36:	4b4a      	ldr	r3, [pc, #296]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	f023 0210 	bic.w	r2, r3, #16
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	4947      	ldr	r1, [pc, #284]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005e54:	4b42      	ldr	r3, [pc, #264]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	493f      	ldr	r1, [pc, #252]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e72:	4b3b      	ldr	r3, [pc, #236]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	f023 0220 	bic.w	r2, r3, #32
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	4938      	ldr	r1, [pc, #224]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e90:	4b33      	ldr	r3, [pc, #204]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	4930      	ldr	r1, [pc, #192]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0310 	and.w	r3, r3, #16
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d008      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005eae:	4b2c      	ldr	r3, [pc, #176]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	4929      	ldr	r1, [pc, #164]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ecc:	4b24      	ldr	r3, [pc, #144]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	4921      	ldr	r1, [pc, #132]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d008      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005eea:	4b1d      	ldr	r3, [pc, #116]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eee:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	491a      	ldr	r1, [pc, #104]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d008      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005f08:	4b15      	ldr	r3, [pc, #84]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f14:	4912      	ldr	r1, [pc, #72]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d008      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f26:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	490b      	ldr	r1, [pc, #44]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005f44:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f50:	4903      	ldr	r1, [pc, #12]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3748      	adds	r7, #72	; 0x48
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40021000 	.word	0x40021000

08005f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e09d      	b.n	80060b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d108      	bne.n	8005f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f86:	d009      	beq.n	8005f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	61da      	str	r2, [r3, #28]
 8005f8e:	e005      	b.n	8005f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fc f868 	bl	800208c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fdc:	d902      	bls.n	8005fe4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	e002      	b.n	8005fea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fe8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ff2:	d007      	beq.n	8006004 <HAL_SPI_Init+0xa0>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ffc:	d002      	beq.n	8006004 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006046:	ea42 0103 	orr.w	r1, r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	0c1b      	lsrs	r3, r3, #16
 8006060:	f003 0204 	and.w	r2, r3, #4
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	431a      	orrs	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006080:	ea42 0103 	orr.w	r1, r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e049      	b.n	8006160 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d106      	bne.n	80060e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7fc f815 	bl	8002110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3304      	adds	r3, #4
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f000 fdb3 	bl	8006c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b01      	cmp	r3, #1
 800617a:	d001      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e04a      	b.n	8006216 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0201 	orr.w	r2, r2, #1
 8006196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a21      	ldr	r2, [pc, #132]	; (8006224 <HAL_TIM_Base_Start_IT+0xbc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d018      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x6c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061aa:	d013      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x6c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <HAL_TIM_Base_Start_IT+0xc0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00e      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x6c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a1c      	ldr	r2, [pc, #112]	; (800622c <HAL_TIM_Base_Start_IT+0xc4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d009      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x6c>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a1a      	ldr	r2, [pc, #104]	; (8006230 <HAL_TIM_Base_Start_IT+0xc8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d004      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x6c>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a19      	ldr	r2, [pc, #100]	; (8006234 <HAL_TIM_Base_Start_IT+0xcc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d115      	bne.n	8006200 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	4b17      	ldr	r3, [pc, #92]	; (8006238 <HAL_TIM_Base_Start_IT+0xd0>)
 80061dc:	4013      	ands	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b06      	cmp	r3, #6
 80061e4:	d015      	beq.n	8006212 <HAL_TIM_Base_Start_IT+0xaa>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ec:	d011      	beq.n	8006212 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0201 	orr.w	r2, r2, #1
 80061fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061fe:	e008      	b.n	8006212 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	e000      	b.n	8006214 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006212:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40013400 	.word	0x40013400
 8006234:	40014000 	.word	0x40014000
 8006238:	00010007 	.word	0x00010007

0800623c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e049      	b.n	80062e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fb ffae 	bl	80021c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3304      	adds	r3, #4
 8006278:	4619      	mov	r1, r3
 800627a:	4610      	mov	r0, r2
 800627c:	f000 fcf2 	bl	8006c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d109      	bne.n	8006310 <HAL_TIM_PWM_Start+0x24>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b01      	cmp	r3, #1
 8006306:	bf14      	ite	ne
 8006308:	2301      	movne	r3, #1
 800630a:	2300      	moveq	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	e03c      	b.n	800638a <HAL_TIM_PWM_Start+0x9e>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b04      	cmp	r3, #4
 8006314:	d109      	bne.n	800632a <HAL_TIM_PWM_Start+0x3e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b01      	cmp	r3, #1
 8006320:	bf14      	ite	ne
 8006322:	2301      	movne	r3, #1
 8006324:	2300      	moveq	r3, #0
 8006326:	b2db      	uxtb	r3, r3
 8006328:	e02f      	b.n	800638a <HAL_TIM_PWM_Start+0x9e>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b08      	cmp	r3, #8
 800632e:	d109      	bne.n	8006344 <HAL_TIM_PWM_Start+0x58>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	bf14      	ite	ne
 800633c:	2301      	movne	r3, #1
 800633e:	2300      	moveq	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	e022      	b.n	800638a <HAL_TIM_PWM_Start+0x9e>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b0c      	cmp	r3, #12
 8006348:	d109      	bne.n	800635e <HAL_TIM_PWM_Start+0x72>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b01      	cmp	r3, #1
 8006354:	bf14      	ite	ne
 8006356:	2301      	movne	r3, #1
 8006358:	2300      	moveq	r3, #0
 800635a:	b2db      	uxtb	r3, r3
 800635c:	e015      	b.n	800638a <HAL_TIM_PWM_Start+0x9e>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b10      	cmp	r3, #16
 8006362:	d109      	bne.n	8006378 <HAL_TIM_PWM_Start+0x8c>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	bf14      	ite	ne
 8006370:	2301      	movne	r3, #1
 8006372:	2300      	moveq	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	e008      	b.n	800638a <HAL_TIM_PWM_Start+0x9e>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b01      	cmp	r3, #1
 8006382:	bf14      	ite	ne
 8006384:	2301      	movne	r3, #1
 8006386:	2300      	moveq	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e097      	b.n	80064c2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <HAL_TIM_PWM_Start+0xb6>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063a0:	e023      	b.n	80063ea <HAL_TIM_PWM_Start+0xfe>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d104      	bne.n	80063b2 <HAL_TIM_PWM_Start+0xc6>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063b0:	e01b      	b.n	80063ea <HAL_TIM_PWM_Start+0xfe>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d104      	bne.n	80063c2 <HAL_TIM_PWM_Start+0xd6>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c0:	e013      	b.n	80063ea <HAL_TIM_PWM_Start+0xfe>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b0c      	cmp	r3, #12
 80063c6:	d104      	bne.n	80063d2 <HAL_TIM_PWM_Start+0xe6>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063d0:	e00b      	b.n	80063ea <HAL_TIM_PWM_Start+0xfe>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d104      	bne.n	80063e2 <HAL_TIM_PWM_Start+0xf6>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063e0:	e003      	b.n	80063ea <HAL_TIM_PWM_Start+0xfe>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2202      	movs	r2, #2
 80063e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2201      	movs	r2, #1
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f001 f836 	bl	8007464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a33      	ldr	r2, [pc, #204]	; (80064cc <HAL_TIM_PWM_Start+0x1e0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <HAL_TIM_PWM_Start+0x13e>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a32      	ldr	r2, [pc, #200]	; (80064d0 <HAL_TIM_PWM_Start+0x1e4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00e      	beq.n	800642a <HAL_TIM_PWM_Start+0x13e>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a30      	ldr	r2, [pc, #192]	; (80064d4 <HAL_TIM_PWM_Start+0x1e8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d009      	beq.n	800642a <HAL_TIM_PWM_Start+0x13e>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a2f      	ldr	r2, [pc, #188]	; (80064d8 <HAL_TIM_PWM_Start+0x1ec>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_TIM_PWM_Start+0x13e>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a2d      	ldr	r2, [pc, #180]	; (80064dc <HAL_TIM_PWM_Start+0x1f0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d101      	bne.n	800642e <HAL_TIM_PWM_Start+0x142>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <HAL_TIM_PWM_Start+0x144>
 800642e:	2300      	movs	r3, #0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d007      	beq.n	8006444 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006442:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a20      	ldr	r2, [pc, #128]	; (80064cc <HAL_TIM_PWM_Start+0x1e0>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d018      	beq.n	8006480 <HAL_TIM_PWM_Start+0x194>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006456:	d013      	beq.n	8006480 <HAL_TIM_PWM_Start+0x194>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a20      	ldr	r2, [pc, #128]	; (80064e0 <HAL_TIM_PWM_Start+0x1f4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00e      	beq.n	8006480 <HAL_TIM_PWM_Start+0x194>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1f      	ldr	r2, [pc, #124]	; (80064e4 <HAL_TIM_PWM_Start+0x1f8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d009      	beq.n	8006480 <HAL_TIM_PWM_Start+0x194>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a17      	ldr	r2, [pc, #92]	; (80064d0 <HAL_TIM_PWM_Start+0x1e4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d004      	beq.n	8006480 <HAL_TIM_PWM_Start+0x194>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a16      	ldr	r2, [pc, #88]	; (80064d4 <HAL_TIM_PWM_Start+0x1e8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d115      	bne.n	80064ac <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <HAL_TIM_PWM_Start+0x1fc>)
 8006488:	4013      	ands	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b06      	cmp	r3, #6
 8006490:	d015      	beq.n	80064be <HAL_TIM_PWM_Start+0x1d2>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006498:	d011      	beq.n	80064be <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0201 	orr.w	r2, r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064aa:	e008      	b.n	80064be <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0201 	orr.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	e000      	b.n	80064c0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	40012c00 	.word	0x40012c00
 80064d0:	40013400 	.word	0x40013400
 80064d4:	40014000 	.word	0x40014000
 80064d8:	40014400 	.word	0x40014400
 80064dc:	40014800 	.word	0x40014800
 80064e0:	40000400 	.word	0x40000400
 80064e4:	40000800 	.word	0x40000800
 80064e8:	00010007 	.word	0x00010007

080064ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 ffb0 	bl	8007464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a3e      	ldr	r2, [pc, #248]	; (8006604 <HAL_TIM_PWM_Stop+0x118>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <HAL_TIM_PWM_Stop+0x4a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a3d      	ldr	r2, [pc, #244]	; (8006608 <HAL_TIM_PWM_Stop+0x11c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00e      	beq.n	8006536 <HAL_TIM_PWM_Stop+0x4a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a3b      	ldr	r2, [pc, #236]	; (800660c <HAL_TIM_PWM_Stop+0x120>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d009      	beq.n	8006536 <HAL_TIM_PWM_Stop+0x4a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a3a      	ldr	r2, [pc, #232]	; (8006610 <HAL_TIM_PWM_Stop+0x124>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d004      	beq.n	8006536 <HAL_TIM_PWM_Stop+0x4a>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a38      	ldr	r2, [pc, #224]	; (8006614 <HAL_TIM_PWM_Stop+0x128>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d101      	bne.n	800653a <HAL_TIM_PWM_Stop+0x4e>
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <HAL_TIM_PWM_Stop+0x50>
 800653a:	2300      	movs	r3, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d017      	beq.n	8006570 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6a1a      	ldr	r2, [r3, #32]
 8006546:	f241 1311 	movw	r3, #4369	; 0x1111
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10f      	bne.n	8006570 <HAL_TIM_PWM_Stop+0x84>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6a1a      	ldr	r2, [r3, #32]
 8006556:	f240 4344 	movw	r3, #1092	; 0x444
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d107      	bne.n	8006570 <HAL_TIM_PWM_Stop+0x84>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800656e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6a1a      	ldr	r2, [r3, #32]
 8006576:	f241 1311 	movw	r3, #4369	; 0x1111
 800657a:	4013      	ands	r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10f      	bne.n	80065a0 <HAL_TIM_PWM_Stop+0xb4>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6a1a      	ldr	r2, [r3, #32]
 8006586:	f240 4344 	movw	r3, #1092	; 0x444
 800658a:	4013      	ands	r3, r2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d107      	bne.n	80065a0 <HAL_TIM_PWM_Stop+0xb4>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0201 	bic.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d104      	bne.n	80065b0 <HAL_TIM_PWM_Stop+0xc4>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ae:	e023      	b.n	80065f8 <HAL_TIM_PWM_Stop+0x10c>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d104      	bne.n	80065c0 <HAL_TIM_PWM_Stop+0xd4>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065be:	e01b      	b.n	80065f8 <HAL_TIM_PWM_Stop+0x10c>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d104      	bne.n	80065d0 <HAL_TIM_PWM_Stop+0xe4>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ce:	e013      	b.n	80065f8 <HAL_TIM_PWM_Stop+0x10c>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b0c      	cmp	r3, #12
 80065d4:	d104      	bne.n	80065e0 <HAL_TIM_PWM_Stop+0xf4>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065de:	e00b      	b.n	80065f8 <HAL_TIM_PWM_Stop+0x10c>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b10      	cmp	r3, #16
 80065e4:	d104      	bne.n	80065f0 <HAL_TIM_PWM_Stop+0x104>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065ee:	e003      	b.n	80065f8 <HAL_TIM_PWM_Stop+0x10c>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	40012c00 	.word	0x40012c00
 8006608:	40013400 	.word	0x40013400
 800660c:	40014000 	.word	0x40014000
 8006610:	40014400 	.word	0x40014400
 8006614:	40014800 	.word	0x40014800

08006618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b02      	cmp	r3, #2
 800662c:	d122      	bne.n	8006674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b02      	cmp	r3, #2
 800663a:	d11b      	bne.n	8006674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0202 	mvn.w	r2, #2
 8006644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fae3 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 8006660:	e005      	b.n	800666e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fad5 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fae6 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b04      	cmp	r3, #4
 8006680:	d122      	bne.n	80066c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b04      	cmp	r3, #4
 800668e:	d11b      	bne.n	80066c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0204 	mvn.w	r2, #4
 8006698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fab9 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 80066b4:	e005      	b.n	80066c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 faab 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fabc 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	2b08      	cmp	r3, #8
 80066d4:	d122      	bne.n	800671c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d11b      	bne.n	800671c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0208 	mvn.w	r2, #8
 80066ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2204      	movs	r2, #4
 80066f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa8f 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 8006708:	e005      	b.n	8006716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa81 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fa92 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	2b10      	cmp	r3, #16
 8006728:	d122      	bne.n	8006770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0310 	and.w	r3, r3, #16
 8006734:	2b10      	cmp	r3, #16
 8006736:	d11b      	bne.n	8006770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0210 	mvn.w	r2, #16
 8006740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2208      	movs	r2, #8
 8006746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fa65 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 800675c:	e005      	b.n	800676a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa57 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fa68 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b01      	cmp	r3, #1
 800677c:	d10e      	bne.n	800679c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d107      	bne.n	800679c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0201 	mvn.w	r2, #1
 8006794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7fa f9ac 	bl	8000af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a6:	2b80      	cmp	r3, #128	; 0x80
 80067a8:	d10e      	bne.n	80067c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b4:	2b80      	cmp	r3, #128	; 0x80
 80067b6:	d107      	bne.n	80067c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 ff7c 	bl	80076c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d6:	d10e      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b80      	cmp	r3, #128	; 0x80
 80067e4:	d107      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 ff6f 	bl	80076d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d10e      	bne.n	8006822 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680e:	2b40      	cmp	r3, #64	; 0x40
 8006810:	d107      	bne.n	8006822 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800681a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fa16 	bl	8006c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b20      	cmp	r3, #32
 800682e:	d10e      	bne.n	800684e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b20      	cmp	r3, #32
 800683c:	d107      	bne.n	800684e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f06f 0220 	mvn.w	r2, #32
 8006846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 ff2f 	bl	80076ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006872:	2302      	movs	r3, #2
 8006874:	e0ff      	b.n	8006a76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b14      	cmp	r3, #20
 8006882:	f200 80f0 	bhi.w	8006a66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006886:	a201      	add	r2, pc, #4	; (adr r2, 800688c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688c:	080068e1 	.word	0x080068e1
 8006890:	08006a67 	.word	0x08006a67
 8006894:	08006a67 	.word	0x08006a67
 8006898:	08006a67 	.word	0x08006a67
 800689c:	08006921 	.word	0x08006921
 80068a0:	08006a67 	.word	0x08006a67
 80068a4:	08006a67 	.word	0x08006a67
 80068a8:	08006a67 	.word	0x08006a67
 80068ac:	08006963 	.word	0x08006963
 80068b0:	08006a67 	.word	0x08006a67
 80068b4:	08006a67 	.word	0x08006a67
 80068b8:	08006a67 	.word	0x08006a67
 80068bc:	080069a3 	.word	0x080069a3
 80068c0:	08006a67 	.word	0x08006a67
 80068c4:	08006a67 	.word	0x08006a67
 80068c8:	08006a67 	.word	0x08006a67
 80068cc:	080069e5 	.word	0x080069e5
 80068d0:	08006a67 	.word	0x08006a67
 80068d4:	08006a67 	.word	0x08006a67
 80068d8:	08006a67 	.word	0x08006a67
 80068dc:	08006a25 	.word	0x08006a25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fa4c 	bl	8006d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0208 	orr.w	r2, r2, #8
 80068fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0204 	bic.w	r2, r2, #4
 800690a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6999      	ldr	r1, [r3, #24]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	619a      	str	r2, [r3, #24]
      break;
 800691e:	e0a5      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fabc 	bl	8006ea4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800693a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	699a      	ldr	r2, [r3, #24]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800694a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6999      	ldr	r1, [r3, #24]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	021a      	lsls	r2, r3, #8
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	619a      	str	r2, [r3, #24]
      break;
 8006960:	e084      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fb25 	bl	8006fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69da      	ldr	r2, [r3, #28]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f042 0208 	orr.w	r2, r2, #8
 800697c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69da      	ldr	r2, [r3, #28]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0204 	bic.w	r2, r2, #4
 800698c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69d9      	ldr	r1, [r3, #28]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	61da      	str	r2, [r3, #28]
      break;
 80069a0:	e064      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68b9      	ldr	r1, [r7, #8]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fb8d 	bl	80070c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69da      	ldr	r2, [r3, #28]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69da      	ldr	r2, [r3, #28]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69d9      	ldr	r1, [r3, #28]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	021a      	lsls	r2, r3, #8
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	61da      	str	r2, [r3, #28]
      break;
 80069e2:	e043      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fbd6 	bl	800719c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0208 	orr.w	r2, r2, #8
 80069fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0204 	bic.w	r2, r2, #4
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a22:	e023      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fc1a 	bl	8007264 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	021a      	lsls	r2, r3, #8
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a64:	e002      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop

08006a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_TIM_ConfigClockSource+0x1c>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e0b6      	b.n	8006c0a <HAL_TIM_ConfigClockSource+0x18a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad8:	d03e      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0xd8>
 8006ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ade:	f200 8087 	bhi.w	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae6:	f000 8086 	beq.w	8006bf6 <HAL_TIM_ConfigClockSource+0x176>
 8006aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aee:	d87f      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006af0:	2b70      	cmp	r3, #112	; 0x70
 8006af2:	d01a      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0xaa>
 8006af4:	2b70      	cmp	r3, #112	; 0x70
 8006af6:	d87b      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006af8:	2b60      	cmp	r3, #96	; 0x60
 8006afa:	d050      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x11e>
 8006afc:	2b60      	cmp	r3, #96	; 0x60
 8006afe:	d877      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006b00:	2b50      	cmp	r3, #80	; 0x50
 8006b02:	d03c      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0xfe>
 8006b04:	2b50      	cmp	r3, #80	; 0x50
 8006b06:	d873      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d058      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x13e>
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d86f      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006b10:	2b30      	cmp	r3, #48	; 0x30
 8006b12:	d064      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x15e>
 8006b14:	2b30      	cmp	r3, #48	; 0x30
 8006b16:	d86b      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d060      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x15e>
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d867      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d05c      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x15e>
 8006b24:	2b10      	cmp	r3, #16
 8006b26:	d05a      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x15e>
 8006b28:	e062      	b.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6899      	ldr	r1, [r3, #8]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f000 fc73 	bl	8007424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	609a      	str	r2, [r3, #8]
      break;
 8006b56:	e04f      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	6899      	ldr	r1, [r3, #8]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f000 fc5c 	bl	8007424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b7a:	609a      	str	r2, [r3, #8]
      break;
 8006b7c:	e03c      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	6859      	ldr	r1, [r3, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f000 fbd0 	bl	8007330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2150      	movs	r1, #80	; 0x50
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fc29 	bl	80073ee <TIM_ITRx_SetConfig>
      break;
 8006b9c:	e02c      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	6859      	ldr	r1, [r3, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f000 fbef 	bl	800738e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2160      	movs	r1, #96	; 0x60
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fc19 	bl	80073ee <TIM_ITRx_SetConfig>
      break;
 8006bbc:	e01c      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	6859      	ldr	r1, [r3, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f000 fbb0 	bl	8007330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2140      	movs	r1, #64	; 0x40
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fc09 	bl	80073ee <TIM_ITRx_SetConfig>
      break;
 8006bdc:	e00c      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4619      	mov	r1, r3
 8006be8:	4610      	mov	r0, r2
 8006bea:	f000 fc00 	bl	80073ee <TIM_ITRx_SetConfig>
      break;
 8006bee:	e003      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf4:	e000      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a3c      	ldr	r2, [pc, #240]	; (8006d68 <TIM_Base_SetConfig+0x104>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d00f      	beq.n	8006c9c <TIM_Base_SetConfig+0x38>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c82:	d00b      	beq.n	8006c9c <TIM_Base_SetConfig+0x38>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a39      	ldr	r2, [pc, #228]	; (8006d6c <TIM_Base_SetConfig+0x108>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d007      	beq.n	8006c9c <TIM_Base_SetConfig+0x38>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a38      	ldr	r2, [pc, #224]	; (8006d70 <TIM_Base_SetConfig+0x10c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d003      	beq.n	8006c9c <TIM_Base_SetConfig+0x38>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a37      	ldr	r2, [pc, #220]	; (8006d74 <TIM_Base_SetConfig+0x110>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d108      	bne.n	8006cae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a2d      	ldr	r2, [pc, #180]	; (8006d68 <TIM_Base_SetConfig+0x104>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d01b      	beq.n	8006cee <TIM_Base_SetConfig+0x8a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cbc:	d017      	beq.n	8006cee <TIM_Base_SetConfig+0x8a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a2a      	ldr	r2, [pc, #168]	; (8006d6c <TIM_Base_SetConfig+0x108>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d013      	beq.n	8006cee <TIM_Base_SetConfig+0x8a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a29      	ldr	r2, [pc, #164]	; (8006d70 <TIM_Base_SetConfig+0x10c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d00f      	beq.n	8006cee <TIM_Base_SetConfig+0x8a>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a28      	ldr	r2, [pc, #160]	; (8006d74 <TIM_Base_SetConfig+0x110>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00b      	beq.n	8006cee <TIM_Base_SetConfig+0x8a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a27      	ldr	r2, [pc, #156]	; (8006d78 <TIM_Base_SetConfig+0x114>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d007      	beq.n	8006cee <TIM_Base_SetConfig+0x8a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a26      	ldr	r2, [pc, #152]	; (8006d7c <TIM_Base_SetConfig+0x118>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d003      	beq.n	8006cee <TIM_Base_SetConfig+0x8a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a25      	ldr	r2, [pc, #148]	; (8006d80 <TIM_Base_SetConfig+0x11c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d108      	bne.n	8006d00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a10      	ldr	r2, [pc, #64]	; (8006d68 <TIM_Base_SetConfig+0x104>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00f      	beq.n	8006d4c <TIM_Base_SetConfig+0xe8>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a11      	ldr	r2, [pc, #68]	; (8006d74 <TIM_Base_SetConfig+0x110>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00b      	beq.n	8006d4c <TIM_Base_SetConfig+0xe8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a10      	ldr	r2, [pc, #64]	; (8006d78 <TIM_Base_SetConfig+0x114>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d007      	beq.n	8006d4c <TIM_Base_SetConfig+0xe8>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a0f      	ldr	r2, [pc, #60]	; (8006d7c <TIM_Base_SetConfig+0x118>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_Base_SetConfig+0xe8>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a0e      	ldr	r2, [pc, #56]	; (8006d80 <TIM_Base_SetConfig+0x11c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d103      	bne.n	8006d54 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	615a      	str	r2, [r3, #20]
}
 8006d5a:	bf00      	nop
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40012c00 	.word	0x40012c00
 8006d6c:	40000400 	.word	0x40000400
 8006d70:	40000800 	.word	0x40000800
 8006d74:	40013400 	.word	0x40013400
 8006d78:	40014000 	.word	0x40014000
 8006d7c:	40014400 	.word	0x40014400
 8006d80:	40014800 	.word	0x40014800

08006d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f023 0201 	bic.w	r2, r3, #1
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0303 	bic.w	r3, r3, #3
 8006dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f023 0302 	bic.w	r3, r3, #2
 8006dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a2c      	ldr	r2, [pc, #176]	; (8006e90 <TIM_OC1_SetConfig+0x10c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00f      	beq.n	8006e04 <TIM_OC1_SetConfig+0x80>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a2b      	ldr	r2, [pc, #172]	; (8006e94 <TIM_OC1_SetConfig+0x110>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00b      	beq.n	8006e04 <TIM_OC1_SetConfig+0x80>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a2a      	ldr	r2, [pc, #168]	; (8006e98 <TIM_OC1_SetConfig+0x114>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d007      	beq.n	8006e04 <TIM_OC1_SetConfig+0x80>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a29      	ldr	r2, [pc, #164]	; (8006e9c <TIM_OC1_SetConfig+0x118>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC1_SetConfig+0x80>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a28      	ldr	r2, [pc, #160]	; (8006ea0 <TIM_OC1_SetConfig+0x11c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d10c      	bne.n	8006e1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f023 0308 	bic.w	r3, r3, #8
 8006e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f023 0304 	bic.w	r3, r3, #4
 8006e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a1b      	ldr	r2, [pc, #108]	; (8006e90 <TIM_OC1_SetConfig+0x10c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d00f      	beq.n	8006e46 <TIM_OC1_SetConfig+0xc2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a1a      	ldr	r2, [pc, #104]	; (8006e94 <TIM_OC1_SetConfig+0x110>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00b      	beq.n	8006e46 <TIM_OC1_SetConfig+0xc2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a19      	ldr	r2, [pc, #100]	; (8006e98 <TIM_OC1_SetConfig+0x114>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d007      	beq.n	8006e46 <TIM_OC1_SetConfig+0xc2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a18      	ldr	r2, [pc, #96]	; (8006e9c <TIM_OC1_SetConfig+0x118>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d003      	beq.n	8006e46 <TIM_OC1_SetConfig+0xc2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a17      	ldr	r2, [pc, #92]	; (8006ea0 <TIM_OC1_SetConfig+0x11c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d111      	bne.n	8006e6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	621a      	str	r2, [r3, #32]
}
 8006e84:	bf00      	nop
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	40012c00 	.word	0x40012c00
 8006e94:	40013400 	.word	0x40013400
 8006e98:	40014000 	.word	0x40014000
 8006e9c:	40014400 	.word	0x40014400
 8006ea0:	40014800 	.word	0x40014800

08006ea4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	f023 0210 	bic.w	r2, r3, #16
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f023 0320 	bic.w	r3, r3, #32
 8006ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	011b      	lsls	r3, r3, #4
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a28      	ldr	r2, [pc, #160]	; (8006fa4 <TIM_OC2_SetConfig+0x100>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d003      	beq.n	8006f10 <TIM_OC2_SetConfig+0x6c>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a27      	ldr	r2, [pc, #156]	; (8006fa8 <TIM_OC2_SetConfig+0x104>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d10d      	bne.n	8006f2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <TIM_OC2_SetConfig+0x100>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00f      	beq.n	8006f54 <TIM_OC2_SetConfig+0xb0>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a1c      	ldr	r2, [pc, #112]	; (8006fa8 <TIM_OC2_SetConfig+0x104>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d00b      	beq.n	8006f54 <TIM_OC2_SetConfig+0xb0>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a1b      	ldr	r2, [pc, #108]	; (8006fac <TIM_OC2_SetConfig+0x108>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d007      	beq.n	8006f54 <TIM_OC2_SetConfig+0xb0>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a1a      	ldr	r2, [pc, #104]	; (8006fb0 <TIM_OC2_SetConfig+0x10c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d003      	beq.n	8006f54 <TIM_OC2_SetConfig+0xb0>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a19      	ldr	r2, [pc, #100]	; (8006fb4 <TIM_OC2_SetConfig+0x110>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d113      	bne.n	8006f7c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f5a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f62:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	621a      	str	r2, [r3, #32]
}
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	40012c00 	.word	0x40012c00
 8006fa8:	40013400 	.word	0x40013400
 8006fac:	40014000 	.word	0x40014000
 8006fb0:	40014400 	.word	0x40014400
 8006fb4:	40014800 	.word	0x40014800

08006fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0303 	bic.w	r3, r3, #3
 8006ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	021b      	lsls	r3, r3, #8
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	4313      	orrs	r3, r2
 8007010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a27      	ldr	r2, [pc, #156]	; (80070b4 <TIM_OC3_SetConfig+0xfc>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d003      	beq.n	8007022 <TIM_OC3_SetConfig+0x6a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a26      	ldr	r2, [pc, #152]	; (80070b8 <TIM_OC3_SetConfig+0x100>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d10d      	bne.n	800703e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800703c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a1c      	ldr	r2, [pc, #112]	; (80070b4 <TIM_OC3_SetConfig+0xfc>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d00f      	beq.n	8007066 <TIM_OC3_SetConfig+0xae>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a1b      	ldr	r2, [pc, #108]	; (80070b8 <TIM_OC3_SetConfig+0x100>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d00b      	beq.n	8007066 <TIM_OC3_SetConfig+0xae>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a1a      	ldr	r2, [pc, #104]	; (80070bc <TIM_OC3_SetConfig+0x104>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d007      	beq.n	8007066 <TIM_OC3_SetConfig+0xae>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <TIM_OC3_SetConfig+0x108>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_OC3_SetConfig+0xae>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a18      	ldr	r2, [pc, #96]	; (80070c4 <TIM_OC3_SetConfig+0x10c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d113      	bne.n	800708e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800706c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	621a      	str	r2, [r3, #32]
}
 80070a8:	bf00      	nop
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	40012c00 	.word	0x40012c00
 80070b8:	40013400 	.word	0x40013400
 80070bc:	40014000 	.word	0x40014000
 80070c0:	40014400 	.word	0x40014400
 80070c4:	40014800 	.word	0x40014800

080070c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	031b      	lsls	r3, r3, #12
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a18      	ldr	r2, [pc, #96]	; (8007188 <TIM_OC4_SetConfig+0xc0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00f      	beq.n	800714c <TIM_OC4_SetConfig+0x84>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a17      	ldr	r2, [pc, #92]	; (800718c <TIM_OC4_SetConfig+0xc4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00b      	beq.n	800714c <TIM_OC4_SetConfig+0x84>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a16      	ldr	r2, [pc, #88]	; (8007190 <TIM_OC4_SetConfig+0xc8>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d007      	beq.n	800714c <TIM_OC4_SetConfig+0x84>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a15      	ldr	r2, [pc, #84]	; (8007194 <TIM_OC4_SetConfig+0xcc>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_OC4_SetConfig+0x84>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a14      	ldr	r2, [pc, #80]	; (8007198 <TIM_OC4_SetConfig+0xd0>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d109      	bne.n	8007160 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	019b      	lsls	r3, r3, #6
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	4313      	orrs	r3, r2
 800715e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	40012c00 	.word	0x40012c00
 800718c:	40013400 	.word	0x40013400
 8007190:	40014000 	.word	0x40014000
 8007194:	40014400 	.word	0x40014400
 8007198:	40014800 	.word	0x40014800

0800719c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80071e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	041b      	lsls	r3, r3, #16
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a17      	ldr	r2, [pc, #92]	; (8007250 <TIM_OC5_SetConfig+0xb4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d00f      	beq.n	8007216 <TIM_OC5_SetConfig+0x7a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a16      	ldr	r2, [pc, #88]	; (8007254 <TIM_OC5_SetConfig+0xb8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00b      	beq.n	8007216 <TIM_OC5_SetConfig+0x7a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a15      	ldr	r2, [pc, #84]	; (8007258 <TIM_OC5_SetConfig+0xbc>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d007      	beq.n	8007216 <TIM_OC5_SetConfig+0x7a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a14      	ldr	r2, [pc, #80]	; (800725c <TIM_OC5_SetConfig+0xc0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d003      	beq.n	8007216 <TIM_OC5_SetConfig+0x7a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a13      	ldr	r2, [pc, #76]	; (8007260 <TIM_OC5_SetConfig+0xc4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d109      	bne.n	800722a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800721c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	021b      	lsls	r3, r3, #8
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	4313      	orrs	r3, r2
 8007228:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	621a      	str	r2, [r3, #32]
}
 8007244:	bf00      	nop
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	40012c00 	.word	0x40012c00
 8007254:	40013400 	.word	0x40013400
 8007258:	40014000 	.word	0x40014000
 800725c:	40014400 	.word	0x40014400
 8007260:	40014800 	.word	0x40014800

08007264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	021b      	lsls	r3, r3, #8
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	051b      	lsls	r3, r3, #20
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a18      	ldr	r2, [pc, #96]	; (800731c <TIM_OC6_SetConfig+0xb8>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00f      	beq.n	80072e0 <TIM_OC6_SetConfig+0x7c>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a17      	ldr	r2, [pc, #92]	; (8007320 <TIM_OC6_SetConfig+0xbc>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00b      	beq.n	80072e0 <TIM_OC6_SetConfig+0x7c>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a16      	ldr	r2, [pc, #88]	; (8007324 <TIM_OC6_SetConfig+0xc0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_OC6_SetConfig+0x7c>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a15      	ldr	r2, [pc, #84]	; (8007328 <TIM_OC6_SetConfig+0xc4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC6_SetConfig+0x7c>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a14      	ldr	r2, [pc, #80]	; (800732c <TIM_OC6_SetConfig+0xc8>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d109      	bne.n	80072f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	029b      	lsls	r3, r3, #10
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	40012c00 	.word	0x40012c00
 8007320:	40013400 	.word	0x40013400
 8007324:	40014000 	.word	0x40014000
 8007328:	40014400 	.word	0x40014400
 800732c:	40014800 	.word	0x40014800

08007330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f023 0201 	bic.w	r2, r3, #1
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800735a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f023 030a 	bic.w	r3, r3, #10
 800736c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	4313      	orrs	r3, r2
 8007374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	621a      	str	r2, [r3, #32]
}
 8007382:	bf00      	nop
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800738e:	b480      	push	{r7}
 8007390:	b087      	sub	sp, #28
 8007392:	af00      	add	r7, sp, #0
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	f023 0210 	bic.w	r2, r3, #16
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	031b      	lsls	r3, r3, #12
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	621a      	str	r2, [r3, #32]
}
 80073e2:	bf00      	nop
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b085      	sub	sp, #20
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4313      	orrs	r3, r2
 800740c:	f043 0307 	orr.w	r3, r3, #7
 8007410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	609a      	str	r2, [r3, #8]
}
 8007418:	bf00      	nop
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800743e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	021a      	lsls	r2, r3, #8
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	431a      	orrs	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4313      	orrs	r3, r2
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	609a      	str	r2, [r3, #8]
}
 8007458:	bf00      	nop
 800745a:	371c      	adds	r7, #28
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f003 031f 	and.w	r3, r3, #31
 8007476:	2201      	movs	r2, #1
 8007478:	fa02 f303 	lsl.w	r3, r2, r3
 800747c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6a1a      	ldr	r2, [r3, #32]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	43db      	mvns	r3, r3
 8007486:	401a      	ands	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a1a      	ldr	r2, [r3, #32]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	fa01 f303 	lsl.w	r3, r1, r3
 800749c:	431a      	orrs	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	621a      	str	r2, [r3, #32]
}
 80074a2:	bf00      	nop
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
	...

080074b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e063      	b.n	8007590 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a2b      	ldr	r2, [pc, #172]	; (800759c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d004      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a2a      	ldr	r2, [pc, #168]	; (80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d108      	bne.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007502:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007514:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1b      	ldr	r2, [pc, #108]	; (800759c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d018      	beq.n	8007564 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800753a:	d013      	beq.n	8007564 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a18      	ldr	r2, [pc, #96]	; (80075a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d00e      	beq.n	8007564 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a17      	ldr	r2, [pc, #92]	; (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d009      	beq.n	8007564 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a12      	ldr	r2, [pc, #72]	; (80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d004      	beq.n	8007564 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a13      	ldr	r2, [pc, #76]	; (80075ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d10c      	bne.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800756a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	4313      	orrs	r3, r2
 8007574:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	40012c00 	.word	0x40012c00
 80075a0:	40013400 	.word	0x40013400
 80075a4:	40000400 	.word	0x40000400
 80075a8:	40000800 	.word	0x40000800
 80075ac:	40014000 	.word	0x40014000

080075b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d101      	bne.n	80075cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075c8:	2302      	movs	r3, #2
 80075ca:	e065      	b.n	8007698 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4313      	orrs	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	4313      	orrs	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	041b      	lsls	r3, r3, #16
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a16      	ldr	r2, [pc, #88]	; (80076a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d004      	beq.n	800765a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a14      	ldr	r2, [pc, #80]	; (80076a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d115      	bne.n	8007686 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	051b      	lsls	r3, r3, #20
 8007666:	4313      	orrs	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	4313      	orrs	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	4313      	orrs	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	40012c00 	.word	0x40012c00
 80076a8:	40013400 	.word	0x40013400

080076ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e040      	b.n	800777c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d106      	bne.n	8007710 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fa fdd6 	bl	80022bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2224      	movs	r2, #36	; 0x24
 8007714:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 0201 	bic.w	r2, r2, #1
 8007724:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fcb6 	bl	8008098 <UART_SetConfig>
 800772c:	4603      	mov	r3, r0
 800772e:	2b01      	cmp	r3, #1
 8007730:	d101      	bne.n	8007736 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e022      	b.n	800777c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fe7e 	bl	8008440 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0201 	orr.w	r2, r2, #1
 8007772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 ff05 	bl	8008584 <UART_CheckIdleState>
 800777a:	4603      	mov	r3, r0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08a      	sub	sp, #40	; 0x28
 8007788:	af02      	add	r7, sp, #8
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	603b      	str	r3, [r7, #0]
 8007790:	4613      	mov	r3, r2
 8007792:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007798:	2b20      	cmp	r3, #32
 800779a:	d178      	bne.n	800788e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <HAL_UART_Transmit+0x24>
 80077a2:	88fb      	ldrh	r3, [r7, #6]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e071      	b.n	8007890 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2221      	movs	r2, #33	; 0x21
 80077b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077ba:	f7fa ff5d 	bl	8002678 <HAL_GetTick>
 80077be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	88fa      	ldrh	r2, [r7, #6]
 80077c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	88fa      	ldrh	r2, [r7, #6]
 80077cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d8:	d108      	bne.n	80077ec <HAL_UART_Transmit+0x68>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d104      	bne.n	80077ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	61bb      	str	r3, [r7, #24]
 80077ea:	e003      	b.n	80077f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077f0:	2300      	movs	r3, #0
 80077f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077f4:	e030      	b.n	8007858 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2200      	movs	r2, #0
 80077fe:	2180      	movs	r1, #128	; 0x80
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 ff67 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d004      	beq.n	8007816 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2220      	movs	r2, #32
 8007810:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e03c      	b.n	8007890 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10b      	bne.n	8007834 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	881a      	ldrh	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007828:	b292      	uxth	r2, r2
 800782a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	3302      	adds	r3, #2
 8007830:	61bb      	str	r3, [r7, #24]
 8007832:	e008      	b.n	8007846 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	781a      	ldrb	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	b292      	uxth	r2, r2
 800783e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	3301      	adds	r3, #1
 8007844:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800784c:	b29b      	uxth	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800785e:	b29b      	uxth	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1c8      	bne.n	80077f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2200      	movs	r2, #0
 800786c:	2140      	movs	r1, #64	; 0x40
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 ff30 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d004      	beq.n	8007884 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2220      	movs	r2, #32
 800787e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e005      	b.n	8007890 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	e000      	b.n	8007890 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800788e:	2302      	movs	r3, #2
  }
}
 8007890:	4618      	mov	r0, r3
 8007892:	3720      	adds	r7, #32
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	; 0x28
 800789c:	af02      	add	r7, sp, #8
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	4613      	mov	r3, r2
 80078a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	f040 80a3 	bne.w	80079fa <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <HAL_UART_Receive+0x28>
 80078ba:	88fb      	ldrh	r3, [r7, #6]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e09b      	b.n	80079fc <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2222      	movs	r2, #34	; 0x22
 80078d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078da:	f7fa fecd 	bl	8002678 <HAL_GetTick>
 80078de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	88fa      	ldrh	r2, [r7, #6]
 80078e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	88fa      	ldrh	r2, [r7, #6]
 80078ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f8:	d10e      	bne.n	8007918 <HAL_UART_Receive+0x80>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d105      	bne.n	800790e <HAL_UART_Receive+0x76>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007908:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800790c:	e01a      	b.n	8007944 <HAL_UART_Receive+0xac>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	22ff      	movs	r2, #255	; 0xff
 8007912:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007916:	e015      	b.n	8007944 <HAL_UART_Receive+0xac>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10d      	bne.n	800793c <HAL_UART_Receive+0xa4>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d104      	bne.n	8007932 <HAL_UART_Receive+0x9a>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	22ff      	movs	r2, #255	; 0xff
 800792c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007930:	e008      	b.n	8007944 <HAL_UART_Receive+0xac>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	227f      	movs	r2, #127	; 0x7f
 8007936:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800793a:	e003      	b.n	8007944 <HAL_UART_Receive+0xac>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800794a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007954:	d108      	bne.n	8007968 <HAL_UART_Receive+0xd0>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d104      	bne.n	8007968 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 800795e:	2300      	movs	r3, #0
 8007960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	61bb      	str	r3, [r7, #24]
 8007966:	e003      	b.n	8007970 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800796c:	2300      	movs	r3, #0
 800796e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007970:	e037      	b.n	80079e2 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2200      	movs	r2, #0
 800797a:	2120      	movs	r1, #32
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 fea9 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d005      	beq.n	8007994 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2220      	movs	r2, #32
 800798c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e033      	b.n	80079fc <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10c      	bne.n	80079b4 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	8a7b      	ldrh	r3, [r7, #18]
 80079a4:	4013      	ands	r3, r2
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	3302      	adds	r3, #2
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	e00d      	b.n	80079d0 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	8a7b      	ldrh	r3, [r7, #18]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	4013      	ands	r3, r2
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	3301      	adds	r3, #1
 80079ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1c1      	bne.n	8007972 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	e000      	b.n	80079fc <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 80079fa:	2302      	movs	r3, #2
  }
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3720      	adds	r7, #32
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08a      	sub	sp, #40	; 0x28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	d132      	bne.n	8007a82 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <HAL_UART_Receive_IT+0x24>
 8007a22:	88fb      	ldrh	r3, [r7, #6]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e02b      	b.n	8007a84 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d018      	beq.n	8007a72 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	623b      	str	r3, [r7, #32]
 8007a60:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	69f9      	ldr	r1, [r7, #28]
 8007a64:	6a3a      	ldr	r2, [r7, #32]
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e6      	bne.n	8007a40 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a72:	88fb      	ldrh	r3, [r7, #6]
 8007a74:	461a      	mov	r2, r3
 8007a76:	68b9      	ldr	r1, [r7, #8]
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 fe93 	bl	80087a4 <UART_Start_Receive_IT>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	e000      	b.n	8007a84 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007a82:	2302      	movs	r3, #2
  }
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3728      	adds	r7, #40	; 0x28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b0ba      	sub	sp, #232	; 0xe8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ab2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ab6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007aba:	4013      	ands	r3, r2
 8007abc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007ac0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d115      	bne.n	8007af4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00f      	beq.n	8007af4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad8:	f003 0320 	and.w	r3, r3, #32
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d009      	beq.n	8007af4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 82ab 	beq.w	8008040 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
      }
      return;
 8007af2:	e2a5      	b.n	8008040 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007af4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 8117 	beq.w	8007d2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d106      	bne.n	8007b18 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007b0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b0e:	4b85      	ldr	r3, [pc, #532]	; (8007d24 <HAL_UART_IRQHandler+0x298>)
 8007b10:	4013      	ands	r3, r2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 810a 	beq.w	8007d2c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d011      	beq.n	8007b48 <HAL_UART_IRQHandler+0xbc>
 8007b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00b      	beq.n	8007b48 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2201      	movs	r2, #1
 8007b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b3e:	f043 0201 	orr.w	r2, r3, #1
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d011      	beq.n	8007b78 <HAL_UART_IRQHandler+0xec>
 8007b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00b      	beq.n	8007b78 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2202      	movs	r2, #2
 8007b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b6e:	f043 0204 	orr.w	r2, r3, #4
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d011      	beq.n	8007ba8 <HAL_UART_IRQHandler+0x11c>
 8007b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00b      	beq.n	8007ba8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2204      	movs	r2, #4
 8007b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b9e:	f043 0202 	orr.w	r2, r3, #2
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bac:	f003 0308 	and.w	r3, r3, #8
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d017      	beq.n	8007be4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb8:	f003 0320 	and.w	r3, r3, #32
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d105      	bne.n	8007bcc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00b      	beq.n	8007be4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bda:	f043 0208 	orr.w	r2, r3, #8
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d012      	beq.n	8007c16 <HAL_UART_IRQHandler+0x18a>
 8007bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00c      	beq.n	8007c16 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c0c:	f043 0220 	orr.w	r2, r3, #32
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 8211 	beq.w	8008044 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c26:	f003 0320 	and.w	r3, r3, #32
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00d      	beq.n	8007c4a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d007      	beq.n	8007c4a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d005      	beq.n	8007c6e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d04f      	beq.n	8007d0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fe4c 	bl	800890c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7e:	2b40      	cmp	r3, #64	; 0x40
 8007c80:	d141      	bne.n	8007d06 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3308      	adds	r3, #8
 8007c88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3308      	adds	r3, #8
 8007caa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1d9      	bne.n	8007c82 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d013      	beq.n	8007cfe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cda:	4a13      	ldr	r2, [pc, #76]	; (8007d28 <HAL_UART_IRQHandler+0x29c>)
 8007cdc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fc f93a 	bl	8003f5c <HAL_DMA_Abort_IT>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d017      	beq.n	8007d1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cfc:	e00f      	b.n	8007d1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f9b4 	bl	800806c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d04:	e00b      	b.n	8007d1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f9b0 	bl	800806c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0c:	e007      	b.n	8007d1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f9ac 	bl	800806c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007d1c:	e192      	b.n	8008044 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1e:	bf00      	nop
    return;
 8007d20:	e190      	b.n	8008044 <HAL_UART_IRQHandler+0x5b8>
 8007d22:	bf00      	nop
 8007d24:	04000120 	.word	0x04000120
 8007d28:	080089d5 	.word	0x080089d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	f040 814b 	bne.w	8007fcc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d3a:	f003 0310 	and.w	r3, r3, #16
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 8144 	beq.w	8007fcc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d48:	f003 0310 	and.w	r3, r3, #16
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 813d 	beq.w	8007fcc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2210      	movs	r2, #16
 8007d58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d64:	2b40      	cmp	r3, #64	; 0x40
 8007d66:	f040 80b5 	bne.w	8007ed4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 8164 	beq.w	8008048 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	f080 815c 	bcs.w	8008048 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	f000 8086 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007db2:	e853 3f00 	ldrex	r3, [r3]
 8007db6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007dd4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ddc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1da      	bne.n	8007da6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3308      	adds	r3, #8
 8007df6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e02:	f023 0301 	bic.w	r3, r3, #1
 8007e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e20:	e841 2300 	strex	r3, r2, [r1]
 8007e24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e1      	bne.n	8007df0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3308      	adds	r3, #8
 8007e32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e58:	e841 2300 	strex	r3, r2, [r1]
 8007e5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e3      	bne.n	8007e2c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e7a:	e853 3f00 	ldrex	r3, [r3]
 8007e7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e82:	f023 0310 	bic.w	r3, r3, #16
 8007e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e94:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e96:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e9c:	e841 2300 	strex	r3, r2, [r1]
 8007ea0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1e4      	bne.n	8007e72 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fc f81c 	bl	8003eea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f8d7 	bl	8008080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ed2:	e0b9      	b.n	8008048 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 80ab 	beq.w	800804c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007ef6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 80a6 	beq.w	800804c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f22:	647b      	str	r3, [r7, #68]	; 0x44
 8007f24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1e4      	bne.n	8007f00 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	623b      	str	r3, [r7, #32]
   return(result);
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	f023 0301 	bic.w	r3, r3, #1
 8007f4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3308      	adds	r3, #8
 8007f56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f5a:	633a      	str	r2, [r7, #48]	; 0x30
 8007f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e3      	bne.n	8007f36 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0310 	bic.w	r3, r3, #16
 8007f96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	69b9      	ldr	r1, [r7, #24]
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e4      	bne.n	8007f82 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f85b 	bl	8008080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fca:	e03f      	b.n	800804c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00e      	beq.n	8007ff6 <HAL_UART_IRQHandler+0x56a>
 8007fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d008      	beq.n	8007ff6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007fec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fed8 	bl	8008da4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ff4:	e02d      	b.n	8008052 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00e      	beq.n	8008020 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800800a:	2b00      	cmp	r3, #0
 800800c:	d008      	beq.n	8008020 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008012:	2b00      	cmp	r3, #0
 8008014:	d01c      	beq.n	8008050 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
    }
    return;
 800801e:	e017      	b.n	8008050 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d012      	beq.n	8008052 <HAL_UART_IRQHandler+0x5c6>
 800802c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00c      	beq.n	8008052 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fce1 	bl	8008a00 <UART_EndTransmit_IT>
    return;
 800803e:	e008      	b.n	8008052 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008040:	bf00      	nop
 8008042:	e006      	b.n	8008052 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008044:	bf00      	nop
 8008046:	e004      	b.n	8008052 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008048:	bf00      	nop
 800804a:	e002      	b.n	8008052 <HAL_UART_IRQHandler+0x5c6>
      return;
 800804c:	bf00      	nop
 800804e:	e000      	b.n	8008052 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008050:	bf00      	nop
  }

}
 8008052:	37e8      	adds	r7, #232	; 0xe8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	431a      	orrs	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	69db      	ldr	r3, [r3, #28]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80080c6:	f023 030c 	bic.w	r3, r3, #12
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6812      	ldr	r2, [r2, #0]
 80080ce:	6979      	ldr	r1, [r7, #20]
 80080d0:	430b      	orrs	r3, r1
 80080d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	430a      	orrs	r2, r1
 800810c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4aa7      	ldr	r2, [pc, #668]	; (80083b0 <UART_SetConfig+0x318>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d120      	bne.n	800815a <UART_SetConfig+0xc2>
 8008118:	4ba6      	ldr	r3, [pc, #664]	; (80083b4 <UART_SetConfig+0x31c>)
 800811a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	2b03      	cmp	r3, #3
 8008122:	d817      	bhi.n	8008154 <UART_SetConfig+0xbc>
 8008124:	a201      	add	r2, pc, #4	; (adr r2, 800812c <UART_SetConfig+0x94>)
 8008126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812a:	bf00      	nop
 800812c:	0800813d 	.word	0x0800813d
 8008130:	08008149 	.word	0x08008149
 8008134:	0800814f 	.word	0x0800814f
 8008138:	08008143 	.word	0x08008143
 800813c:	2301      	movs	r3, #1
 800813e:	77fb      	strb	r3, [r7, #31]
 8008140:	e0b5      	b.n	80082ae <UART_SetConfig+0x216>
 8008142:	2302      	movs	r3, #2
 8008144:	77fb      	strb	r3, [r7, #31]
 8008146:	e0b2      	b.n	80082ae <UART_SetConfig+0x216>
 8008148:	2304      	movs	r3, #4
 800814a:	77fb      	strb	r3, [r7, #31]
 800814c:	e0af      	b.n	80082ae <UART_SetConfig+0x216>
 800814e:	2308      	movs	r3, #8
 8008150:	77fb      	strb	r3, [r7, #31]
 8008152:	e0ac      	b.n	80082ae <UART_SetConfig+0x216>
 8008154:	2310      	movs	r3, #16
 8008156:	77fb      	strb	r3, [r7, #31]
 8008158:	e0a9      	b.n	80082ae <UART_SetConfig+0x216>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a96      	ldr	r2, [pc, #600]	; (80083b8 <UART_SetConfig+0x320>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d124      	bne.n	80081ae <UART_SetConfig+0x116>
 8008164:	4b93      	ldr	r3, [pc, #588]	; (80083b4 <UART_SetConfig+0x31c>)
 8008166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800816c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008170:	d011      	beq.n	8008196 <UART_SetConfig+0xfe>
 8008172:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008176:	d817      	bhi.n	80081a8 <UART_SetConfig+0x110>
 8008178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800817c:	d011      	beq.n	80081a2 <UART_SetConfig+0x10a>
 800817e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008182:	d811      	bhi.n	80081a8 <UART_SetConfig+0x110>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <UART_SetConfig+0xf8>
 8008188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800818c:	d006      	beq.n	800819c <UART_SetConfig+0x104>
 800818e:	e00b      	b.n	80081a8 <UART_SetConfig+0x110>
 8008190:	2300      	movs	r3, #0
 8008192:	77fb      	strb	r3, [r7, #31]
 8008194:	e08b      	b.n	80082ae <UART_SetConfig+0x216>
 8008196:	2302      	movs	r3, #2
 8008198:	77fb      	strb	r3, [r7, #31]
 800819a:	e088      	b.n	80082ae <UART_SetConfig+0x216>
 800819c:	2304      	movs	r3, #4
 800819e:	77fb      	strb	r3, [r7, #31]
 80081a0:	e085      	b.n	80082ae <UART_SetConfig+0x216>
 80081a2:	2308      	movs	r3, #8
 80081a4:	77fb      	strb	r3, [r7, #31]
 80081a6:	e082      	b.n	80082ae <UART_SetConfig+0x216>
 80081a8:	2310      	movs	r3, #16
 80081aa:	77fb      	strb	r3, [r7, #31]
 80081ac:	e07f      	b.n	80082ae <UART_SetConfig+0x216>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a82      	ldr	r2, [pc, #520]	; (80083bc <UART_SetConfig+0x324>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d124      	bne.n	8008202 <UART_SetConfig+0x16a>
 80081b8:	4b7e      	ldr	r3, [pc, #504]	; (80083b4 <UART_SetConfig+0x31c>)
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80081c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80081c4:	d011      	beq.n	80081ea <UART_SetConfig+0x152>
 80081c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80081ca:	d817      	bhi.n	80081fc <UART_SetConfig+0x164>
 80081cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081d0:	d011      	beq.n	80081f6 <UART_SetConfig+0x15e>
 80081d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081d6:	d811      	bhi.n	80081fc <UART_SetConfig+0x164>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <UART_SetConfig+0x14c>
 80081dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081e0:	d006      	beq.n	80081f0 <UART_SetConfig+0x158>
 80081e2:	e00b      	b.n	80081fc <UART_SetConfig+0x164>
 80081e4:	2300      	movs	r3, #0
 80081e6:	77fb      	strb	r3, [r7, #31]
 80081e8:	e061      	b.n	80082ae <UART_SetConfig+0x216>
 80081ea:	2302      	movs	r3, #2
 80081ec:	77fb      	strb	r3, [r7, #31]
 80081ee:	e05e      	b.n	80082ae <UART_SetConfig+0x216>
 80081f0:	2304      	movs	r3, #4
 80081f2:	77fb      	strb	r3, [r7, #31]
 80081f4:	e05b      	b.n	80082ae <UART_SetConfig+0x216>
 80081f6:	2308      	movs	r3, #8
 80081f8:	77fb      	strb	r3, [r7, #31]
 80081fa:	e058      	b.n	80082ae <UART_SetConfig+0x216>
 80081fc:	2310      	movs	r3, #16
 80081fe:	77fb      	strb	r3, [r7, #31]
 8008200:	e055      	b.n	80082ae <UART_SetConfig+0x216>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a6e      	ldr	r2, [pc, #440]	; (80083c0 <UART_SetConfig+0x328>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d124      	bne.n	8008256 <UART_SetConfig+0x1be>
 800820c:	4b69      	ldr	r3, [pc, #420]	; (80083b4 <UART_SetConfig+0x31c>)
 800820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008210:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008214:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008218:	d011      	beq.n	800823e <UART_SetConfig+0x1a6>
 800821a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800821e:	d817      	bhi.n	8008250 <UART_SetConfig+0x1b8>
 8008220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008224:	d011      	beq.n	800824a <UART_SetConfig+0x1b2>
 8008226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800822a:	d811      	bhi.n	8008250 <UART_SetConfig+0x1b8>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <UART_SetConfig+0x1a0>
 8008230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008234:	d006      	beq.n	8008244 <UART_SetConfig+0x1ac>
 8008236:	e00b      	b.n	8008250 <UART_SetConfig+0x1b8>
 8008238:	2300      	movs	r3, #0
 800823a:	77fb      	strb	r3, [r7, #31]
 800823c:	e037      	b.n	80082ae <UART_SetConfig+0x216>
 800823e:	2302      	movs	r3, #2
 8008240:	77fb      	strb	r3, [r7, #31]
 8008242:	e034      	b.n	80082ae <UART_SetConfig+0x216>
 8008244:	2304      	movs	r3, #4
 8008246:	77fb      	strb	r3, [r7, #31]
 8008248:	e031      	b.n	80082ae <UART_SetConfig+0x216>
 800824a:	2308      	movs	r3, #8
 800824c:	77fb      	strb	r3, [r7, #31]
 800824e:	e02e      	b.n	80082ae <UART_SetConfig+0x216>
 8008250:	2310      	movs	r3, #16
 8008252:	77fb      	strb	r3, [r7, #31]
 8008254:	e02b      	b.n	80082ae <UART_SetConfig+0x216>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a5a      	ldr	r2, [pc, #360]	; (80083c4 <UART_SetConfig+0x32c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d124      	bne.n	80082aa <UART_SetConfig+0x212>
 8008260:	4b54      	ldr	r3, [pc, #336]	; (80083b4 <UART_SetConfig+0x31c>)
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008268:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800826c:	d011      	beq.n	8008292 <UART_SetConfig+0x1fa>
 800826e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008272:	d817      	bhi.n	80082a4 <UART_SetConfig+0x20c>
 8008274:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008278:	d011      	beq.n	800829e <UART_SetConfig+0x206>
 800827a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800827e:	d811      	bhi.n	80082a4 <UART_SetConfig+0x20c>
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <UART_SetConfig+0x1f4>
 8008284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008288:	d006      	beq.n	8008298 <UART_SetConfig+0x200>
 800828a:	e00b      	b.n	80082a4 <UART_SetConfig+0x20c>
 800828c:	2300      	movs	r3, #0
 800828e:	77fb      	strb	r3, [r7, #31]
 8008290:	e00d      	b.n	80082ae <UART_SetConfig+0x216>
 8008292:	2302      	movs	r3, #2
 8008294:	77fb      	strb	r3, [r7, #31]
 8008296:	e00a      	b.n	80082ae <UART_SetConfig+0x216>
 8008298:	2304      	movs	r3, #4
 800829a:	77fb      	strb	r3, [r7, #31]
 800829c:	e007      	b.n	80082ae <UART_SetConfig+0x216>
 800829e:	2308      	movs	r3, #8
 80082a0:	77fb      	strb	r3, [r7, #31]
 80082a2:	e004      	b.n	80082ae <UART_SetConfig+0x216>
 80082a4:	2310      	movs	r3, #16
 80082a6:	77fb      	strb	r3, [r7, #31]
 80082a8:	e001      	b.n	80082ae <UART_SetConfig+0x216>
 80082aa:	2310      	movs	r3, #16
 80082ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b6:	d15b      	bne.n	8008370 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80082b8:	7ffb      	ldrb	r3, [r7, #31]
 80082ba:	2b08      	cmp	r3, #8
 80082bc:	d827      	bhi.n	800830e <UART_SetConfig+0x276>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <UART_SetConfig+0x22c>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082e9 	.word	0x080082e9
 80082c8:	080082f1 	.word	0x080082f1
 80082cc:	080082f9 	.word	0x080082f9
 80082d0:	0800830f 	.word	0x0800830f
 80082d4:	080082ff 	.word	0x080082ff
 80082d8:	0800830f 	.word	0x0800830f
 80082dc:	0800830f 	.word	0x0800830f
 80082e0:	0800830f 	.word	0x0800830f
 80082e4:	08008307 	.word	0x08008307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082e8:	f7fd fc48 	bl	8005b7c <HAL_RCC_GetPCLK1Freq>
 80082ec:	61b8      	str	r0, [r7, #24]
        break;
 80082ee:	e013      	b.n	8008318 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082f0:	f7fd fc66 	bl	8005bc0 <HAL_RCC_GetPCLK2Freq>
 80082f4:	61b8      	str	r0, [r7, #24]
        break;
 80082f6:	e00f      	b.n	8008318 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082f8:	4b33      	ldr	r3, [pc, #204]	; (80083c8 <UART_SetConfig+0x330>)
 80082fa:	61bb      	str	r3, [r7, #24]
        break;
 80082fc:	e00c      	b.n	8008318 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082fe:	f7fd fbc7 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 8008302:	61b8      	str	r0, [r7, #24]
        break;
 8008304:	e008      	b.n	8008318 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800830a:	61bb      	str	r3, [r7, #24]
        break;
 800830c:	e004      	b.n	8008318 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	77bb      	strb	r3, [r7, #30]
        break;
 8008316:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 8082 	beq.w	8008424 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	005a      	lsls	r2, r3, #1
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	085b      	lsrs	r3, r3, #1
 800832a:	441a      	add	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	fbb2 f3f3 	udiv	r3, r2, r3
 8008334:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2b0f      	cmp	r3, #15
 800833a:	d916      	bls.n	800836a <UART_SetConfig+0x2d2>
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008342:	d212      	bcs.n	800836a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f023 030f 	bic.w	r3, r3, #15
 800834c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	085b      	lsrs	r3, r3, #1
 8008352:	b29b      	uxth	r3, r3
 8008354:	f003 0307 	and.w	r3, r3, #7
 8008358:	b29a      	uxth	r2, r3
 800835a:	89fb      	ldrh	r3, [r7, #14]
 800835c:	4313      	orrs	r3, r2
 800835e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	89fa      	ldrh	r2, [r7, #14]
 8008366:	60da      	str	r2, [r3, #12]
 8008368:	e05c      	b.n	8008424 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	77bb      	strb	r3, [r7, #30]
 800836e:	e059      	b.n	8008424 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008370:	7ffb      	ldrb	r3, [r7, #31]
 8008372:	2b08      	cmp	r3, #8
 8008374:	d835      	bhi.n	80083e2 <UART_SetConfig+0x34a>
 8008376:	a201      	add	r2, pc, #4	; (adr r2, 800837c <UART_SetConfig+0x2e4>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	080083a1 	.word	0x080083a1
 8008380:	080083a9 	.word	0x080083a9
 8008384:	080083cd 	.word	0x080083cd
 8008388:	080083e3 	.word	0x080083e3
 800838c:	080083d3 	.word	0x080083d3
 8008390:	080083e3 	.word	0x080083e3
 8008394:	080083e3 	.word	0x080083e3
 8008398:	080083e3 	.word	0x080083e3
 800839c:	080083db 	.word	0x080083db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083a0:	f7fd fbec 	bl	8005b7c <HAL_RCC_GetPCLK1Freq>
 80083a4:	61b8      	str	r0, [r7, #24]
        break;
 80083a6:	e021      	b.n	80083ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083a8:	f7fd fc0a 	bl	8005bc0 <HAL_RCC_GetPCLK2Freq>
 80083ac:	61b8      	str	r0, [r7, #24]
        break;
 80083ae:	e01d      	b.n	80083ec <UART_SetConfig+0x354>
 80083b0:	40013800 	.word	0x40013800
 80083b4:	40021000 	.word	0x40021000
 80083b8:	40004400 	.word	0x40004400
 80083bc:	40004800 	.word	0x40004800
 80083c0:	40004c00 	.word	0x40004c00
 80083c4:	40005000 	.word	0x40005000
 80083c8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083cc:	4b1b      	ldr	r3, [pc, #108]	; (800843c <UART_SetConfig+0x3a4>)
 80083ce:	61bb      	str	r3, [r7, #24]
        break;
 80083d0:	e00c      	b.n	80083ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083d2:	f7fd fb5d 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 80083d6:	61b8      	str	r0, [r7, #24]
        break;
 80083d8:	e008      	b.n	80083ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083de:	61bb      	str	r3, [r7, #24]
        break;
 80083e0:	e004      	b.n	80083ec <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	77bb      	strb	r3, [r7, #30]
        break;
 80083ea:	bf00      	nop
    }

    if (pclk != 0U)
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d018      	beq.n	8008424 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	085a      	lsrs	r2, r3, #1
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	441a      	add	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	fbb2 f3f3 	udiv	r3, r2, r3
 8008404:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2b0f      	cmp	r3, #15
 800840a:	d909      	bls.n	8008420 <UART_SetConfig+0x388>
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008412:	d205      	bcs.n	8008420 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	b29a      	uxth	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	60da      	str	r2, [r3, #12]
 800841e:	e001      	b.n	8008424 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008430:	7fbb      	ldrb	r3, [r7, #30]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3720      	adds	r7, #32
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	007a1200 	.word	0x007a1200

08008440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00a      	beq.n	800846a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00a      	beq.n	80084ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	f003 0308 	and.w	r3, r3, #8
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	f003 0310 	and.w	r3, r3, #16
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00a      	beq.n	80084f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00a      	beq.n	8008514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	430a      	orrs	r2, r1
 8008512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01a      	beq.n	8008556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800853e:	d10a      	bne.n	8008556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	605a      	str	r2, [r3, #4]
  }
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b098      	sub	sp, #96	; 0x60
 8008588:	af02      	add	r7, sp, #8
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008594:	f7fa f870 	bl	8002678 <HAL_GetTick>
 8008598:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0308 	and.w	r3, r3, #8
 80085a4:	2b08      	cmp	r3, #8
 80085a6:	d12e      	bne.n	8008606 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085b0:	2200      	movs	r2, #0
 80085b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f88c 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d021      	beq.n	8008606 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ca:	e853 3f00 	ldrex	r3, [r3]
 80085ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085d6:	653b      	str	r3, [r7, #80]	; 0x50
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e0:	647b      	str	r3, [r7, #68]	; 0x44
 80085e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085e8:	e841 2300 	strex	r3, r2, [r1]
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e6      	bne.n	80085c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2220      	movs	r2, #32
 80085f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e062      	b.n	80086cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b04      	cmp	r3, #4
 8008612:	d149      	bne.n	80086a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800861c:	2200      	movs	r2, #0
 800861e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f856 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d03c      	beq.n	80086a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	623b      	str	r3, [r7, #32]
   return(result);
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800864c:	633b      	str	r3, [r7, #48]	; 0x30
 800864e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e6      	bne.n	800862e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3308      	adds	r3, #8
 8008666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f023 0301 	bic.w	r3, r3, #1
 8008676:	64bb      	str	r3, [r7, #72]	; 0x48
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3308      	adds	r3, #8
 800867e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008680:	61fa      	str	r2, [r7, #28]
 8008682:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008684:	69b9      	ldr	r1, [r7, #24]
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	e841 2300 	strex	r3, r2, [r1]
 800868c:	617b      	str	r3, [r7, #20]
   return(result);
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1e5      	bne.n	8008660 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2220      	movs	r2, #32
 8008698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e011      	b.n	80086cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2220      	movs	r2, #32
 80086ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3758      	adds	r7, #88	; 0x58
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	603b      	str	r3, [r7, #0]
 80086e0:	4613      	mov	r3, r2
 80086e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086e4:	e049      	b.n	800877a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ec:	d045      	beq.n	800877a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ee:	f7f9 ffc3 	bl	8002678 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d302      	bcc.n	8008704 <UART_WaitOnFlagUntilTimeout+0x30>
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e048      	b.n	800879a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	2b00      	cmp	r3, #0
 8008714:	d031      	beq.n	800877a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	69db      	ldr	r3, [r3, #28]
 800871c:	f003 0308 	and.w	r3, r3, #8
 8008720:	2b08      	cmp	r3, #8
 8008722:	d110      	bne.n	8008746 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2208      	movs	r2, #8
 800872a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 f8ed 	bl	800890c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2208      	movs	r2, #8
 8008736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e029      	b.n	800879a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008754:	d111      	bne.n	800877a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800875e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 f8d3 	bl	800890c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2220      	movs	r2, #32
 800876a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e00f      	b.n	800879a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	69da      	ldr	r2, [r3, #28]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	4013      	ands	r3, r2
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	429a      	cmp	r2, r3
 8008788:	bf0c      	ite	eq
 800878a:	2301      	moveq	r3, #1
 800878c:	2300      	movne	r3, #0
 800878e:	b2db      	uxtb	r3, r3
 8008790:	461a      	mov	r2, r3
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	429a      	cmp	r2, r3
 8008796:	d0a6      	beq.n	80086e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
	...

080087a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b097      	sub	sp, #92	; 0x5c
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	4613      	mov	r3, r2
 80087b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	88fa      	ldrh	r2, [r7, #6]
 80087bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	88fa      	ldrh	r2, [r7, #6]
 80087c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d6:	d10e      	bne.n	80087f6 <UART_Start_Receive_IT+0x52>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d105      	bne.n	80087ec <UART_Start_Receive_IT+0x48>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80087e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087ea:	e01a      	b.n	8008822 <UART_Start_Receive_IT+0x7e>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	22ff      	movs	r2, #255	; 0xff
 80087f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087f4:	e015      	b.n	8008822 <UART_Start_Receive_IT+0x7e>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10d      	bne.n	800881a <UART_Start_Receive_IT+0x76>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d104      	bne.n	8008810 <UART_Start_Receive_IT+0x6c>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	22ff      	movs	r2, #255	; 0xff
 800880a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800880e:	e008      	b.n	8008822 <UART_Start_Receive_IT+0x7e>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	227f      	movs	r2, #127	; 0x7f
 8008814:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008818:	e003      	b.n	8008822 <UART_Start_Receive_IT+0x7e>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2222      	movs	r2, #34	; 0x22
 800882e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3308      	adds	r3, #8
 8008838:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800883c:	e853 3f00 	ldrex	r3, [r3]
 8008840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	f043 0301 	orr.w	r3, r3, #1
 8008848:	657b      	str	r3, [r7, #84]	; 0x54
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3308      	adds	r3, #8
 8008850:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008852:	64ba      	str	r2, [r7, #72]	; 0x48
 8008854:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008856:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e5      	bne.n	8008832 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800886e:	d107      	bne.n	8008880 <UART_Start_Receive_IT+0xdc>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d103      	bne.n	8008880 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4a22      	ldr	r2, [pc, #136]	; (8008904 <UART_Start_Receive_IT+0x160>)
 800887c:	669a      	str	r2, [r3, #104]	; 0x68
 800887e:	e002      	b.n	8008886 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4a21      	ldr	r2, [pc, #132]	; (8008908 <UART_Start_Receive_IT+0x164>)
 8008884:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d019      	beq.n	80088c2 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	e853 3f00 	ldrex	r3, [r3]
 800889a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80088a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	461a      	mov	r2, r3
 80088aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088ac:	637b      	str	r3, [r7, #52]	; 0x34
 80088ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088b4:	e841 2300 	strex	r3, r2, [r1]
 80088b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1e6      	bne.n	800888e <UART_Start_Receive_IT+0xea>
 80088c0:	e018      	b.n	80088f4 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	613b      	str	r3, [r7, #16]
   return(result);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	f043 0320 	orr.w	r3, r3, #32
 80088d6:	653b      	str	r3, [r7, #80]	; 0x50
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088e0:	623b      	str	r3, [r7, #32]
 80088e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	69f9      	ldr	r1, [r7, #28]
 80088e6:	6a3a      	ldr	r2, [r7, #32]
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e6      	bne.n	80088c2 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	375c      	adds	r7, #92	; 0x5c
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	08008bfd 	.word	0x08008bfd
 8008908:	08008a55 	.word	0x08008a55

0800890c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800890c:	b480      	push	{r7}
 800890e:	b095      	sub	sp, #84	; 0x54
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891c:	e853 3f00 	ldrex	r3, [r3]
 8008920:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008932:	643b      	str	r3, [r7, #64]	; 0x40
 8008934:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800893a:	e841 2300 	strex	r3, r2, [r1]
 800893e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1e6      	bne.n	8008914 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3308      	adds	r3, #8
 800894c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	e853 3f00 	ldrex	r3, [r3]
 8008954:	61fb      	str	r3, [r7, #28]
   return(result);
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	f023 0301 	bic.w	r3, r3, #1
 800895c:	64bb      	str	r3, [r7, #72]	; 0x48
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3308      	adds	r3, #8
 8008964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008968:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800896c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800896e:	e841 2300 	strex	r3, r2, [r1]
 8008972:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1e5      	bne.n	8008946 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800897e:	2b01      	cmp	r3, #1
 8008980:	d118      	bne.n	80089b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f023 0310 	bic.w	r3, r3, #16
 8008996:	647b      	str	r3, [r7, #68]	; 0x44
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	461a      	mov	r2, r3
 800899e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a0:	61bb      	str	r3, [r7, #24]
 80089a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	6979      	ldr	r1, [r7, #20]
 80089a6:	69ba      	ldr	r2, [r7, #24]
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	613b      	str	r3, [r7, #16]
   return(result);
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e6      	bne.n	8008982 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80089c8:	bf00      	nop
 80089ca:	3754      	adds	r7, #84	; 0x54
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f7ff fb3a 	bl	800806c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089f8:	bf00      	nop
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	e853 3f00 	ldrex	r3, [r3]
 8008a14:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a1c:	61fb      	str	r3, [r7, #28]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	61bb      	str	r3, [r7, #24]
 8008a28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2a:	6979      	ldr	r1, [r7, #20]
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	e841 2300 	strex	r3, r2, [r1]
 8008a32:	613b      	str	r3, [r7, #16]
   return(result);
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1e6      	bne.n	8008a08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff fb06 	bl	8008058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a4c:	bf00      	nop
 8008a4e:	3720      	adds	r7, #32
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b09c      	sub	sp, #112	; 0x70
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a62:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a6c:	2b22      	cmp	r3, #34	; 0x22
 8008a6e:	f040 80b9 	bne.w	8008be4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008a80:	b2d9      	uxtb	r1, r3
 8008a82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8c:	400a      	ands	r2, r1
 8008a8e:	b2d2      	uxtb	r2, r2
 8008a90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f040 809c 	bne.w	8008bf4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008acc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ad0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ada:	65bb      	str	r3, [r7, #88]	; 0x58
 8008adc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ae0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e6      	bne.n	8008abc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3308      	adds	r3, #8
 8008af4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b00:	f023 0301 	bic.w	r3, r3, #1
 8008b04:	667b      	str	r3, [r7, #100]	; 0x64
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b0e:	647a      	str	r2, [r7, #68]	; 0x44
 8008b10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e5      	bne.n	8008aee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d018      	beq.n	8008b76 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	623b      	str	r3, [r7, #32]
   return(result);
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b58:	663b      	str	r3, [r7, #96]	; 0x60
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b62:	633b      	str	r3, [r7, #48]	; 0x30
 8008b64:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e6      	bne.n	8008b44 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d12e      	bne.n	8008bdc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f023 0310 	bic.w	r3, r3, #16
 8008b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ba2:	61fb      	str	r3, [r7, #28]
 8008ba4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	69b9      	ldr	r1, [r7, #24]
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	617b      	str	r3, [r7, #20]
   return(result);
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e6      	bne.n	8008b84 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	f003 0310 	and.w	r3, r3, #16
 8008bc0:	2b10      	cmp	r3, #16
 8008bc2:	d103      	bne.n	8008bcc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2210      	movs	r2, #16
 8008bca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff fa53 	bl	8008080 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bda:	e00b      	b.n	8008bf4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7f8 fa1f 	bl	8001020 <HAL_UART_RxCpltCallback>
}
 8008be2:	e007      	b.n	8008bf4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	699a      	ldr	r2, [r3, #24]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0208 	orr.w	r2, r2, #8
 8008bf2:	619a      	str	r2, [r3, #24]
}
 8008bf4:	bf00      	nop
 8008bf6:	3770      	adds	r7, #112	; 0x70
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b09c      	sub	sp, #112	; 0x70
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c0a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c14:	2b22      	cmp	r3, #34	; 0x22
 8008c16:	f040 80b9 	bne.w	8008d8c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008c20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c28:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c2a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008c2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008c32:	4013      	ands	r3, r2
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3e:	1c9a      	adds	r2, r3, #2
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f040 809c 	bne.w	8008d9c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c78:	667b      	str	r3, [r7, #100]	; 0x64
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c82:	657b      	str	r3, [r7, #84]	; 0x54
 8008c84:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e6      	bne.n	8008c64 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca8:	f023 0301 	bic.w	r3, r3, #1
 8008cac:	663b      	str	r3, [r7, #96]	; 0x60
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008cb6:	643a      	str	r2, [r7, #64]	; 0x40
 8008cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e5      	bne.n	8008c96 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d018      	beq.n	8008d1e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	e853 3f00 	ldrex	r3, [r3]
 8008cf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d0c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e6      	bne.n	8008cec <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d12e      	bne.n	8008d84 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	e853 3f00 	ldrex	r3, [r3]
 8008d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	f023 0310 	bic.w	r3, r3, #16
 8008d40:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d4a:	61bb      	str	r3, [r7, #24]
 8008d4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4e:	6979      	ldr	r1, [r7, #20]
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	e841 2300 	strex	r3, r2, [r1]
 8008d56:	613b      	str	r3, [r7, #16]
   return(result);
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e6      	bne.n	8008d2c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	f003 0310 	and.w	r3, r3, #16
 8008d68:	2b10      	cmp	r3, #16
 8008d6a:	d103      	bne.n	8008d74 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2210      	movs	r2, #16
 8008d72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7ff f97f 	bl	8008080 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d82:	e00b      	b.n	8008d9c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7f8 f94b 	bl	8001020 <HAL_UART_RxCpltCallback>
}
 8008d8a:	e007      	b.n	8008d9c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	699a      	ldr	r2, [r3, #24]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f042 0208 	orr.w	r2, r2, #8
 8008d9a:	619a      	str	r2, [r3, #24]
}
 8008d9c:	bf00      	nop
 8008d9e:	3770      	adds	r7, #112	; 0x70
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008dc0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008dc4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	43db      	mvns	r3, r3
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008dee:	b084      	sub	sp, #16
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	f107 0014 	add.w	r0, r7, #20
 8008dfc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	b004      	add	sp, #16
 8008e2e:	4770      	bx	lr

08008e30 <__errno>:
 8008e30:	4b01      	ldr	r3, [pc, #4]	; (8008e38 <__errno+0x8>)
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	20000030 	.word	0x20000030

08008e3c <__libc_init_array>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	4d0d      	ldr	r5, [pc, #52]	; (8008e74 <__libc_init_array+0x38>)
 8008e40:	4c0d      	ldr	r4, [pc, #52]	; (8008e78 <__libc_init_array+0x3c>)
 8008e42:	1b64      	subs	r4, r4, r5
 8008e44:	10a4      	asrs	r4, r4, #2
 8008e46:	2600      	movs	r6, #0
 8008e48:	42a6      	cmp	r6, r4
 8008e4a:	d109      	bne.n	8008e60 <__libc_init_array+0x24>
 8008e4c:	4d0b      	ldr	r5, [pc, #44]	; (8008e7c <__libc_init_array+0x40>)
 8008e4e:	4c0c      	ldr	r4, [pc, #48]	; (8008e80 <__libc_init_array+0x44>)
 8008e50:	f001 fd20 	bl	800a894 <_init>
 8008e54:	1b64      	subs	r4, r4, r5
 8008e56:	10a4      	asrs	r4, r4, #2
 8008e58:	2600      	movs	r6, #0
 8008e5a:	42a6      	cmp	r6, r4
 8008e5c:	d105      	bne.n	8008e6a <__libc_init_array+0x2e>
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e64:	4798      	blx	r3
 8008e66:	3601      	adds	r6, #1
 8008e68:	e7ee      	b.n	8008e48 <__libc_init_array+0xc>
 8008e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e6e:	4798      	blx	r3
 8008e70:	3601      	adds	r6, #1
 8008e72:	e7f2      	b.n	8008e5a <__libc_init_array+0x1e>
 8008e74:	0800ac10 	.word	0x0800ac10
 8008e78:	0800ac10 	.word	0x0800ac10
 8008e7c:	0800ac10 	.word	0x0800ac10
 8008e80:	0800ac14 	.word	0x0800ac14

08008e84 <memset>:
 8008e84:	4402      	add	r2, r0
 8008e86:	4603      	mov	r3, r0
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d100      	bne.n	8008e8e <memset+0xa>
 8008e8c:	4770      	bx	lr
 8008e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e92:	e7f9      	b.n	8008e88 <memset+0x4>

08008e94 <siprintf>:
 8008e94:	b40e      	push	{r1, r2, r3}
 8008e96:	b500      	push	{lr}
 8008e98:	b09c      	sub	sp, #112	; 0x70
 8008e9a:	ab1d      	add	r3, sp, #116	; 0x74
 8008e9c:	9002      	str	r0, [sp, #8]
 8008e9e:	9006      	str	r0, [sp, #24]
 8008ea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ea4:	4809      	ldr	r0, [pc, #36]	; (8008ecc <siprintf+0x38>)
 8008ea6:	9107      	str	r1, [sp, #28]
 8008ea8:	9104      	str	r1, [sp, #16]
 8008eaa:	4909      	ldr	r1, [pc, #36]	; (8008ed0 <siprintf+0x3c>)
 8008eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb0:	9105      	str	r1, [sp, #20]
 8008eb2:	6800      	ldr	r0, [r0, #0]
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	a902      	add	r1, sp, #8
 8008eb8:	f000 f868 	bl	8008f8c <_svfiprintf_r>
 8008ebc:	9b02      	ldr	r3, [sp, #8]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	701a      	strb	r2, [r3, #0]
 8008ec2:	b01c      	add	sp, #112	; 0x70
 8008ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ec8:	b003      	add	sp, #12
 8008eca:	4770      	bx	lr
 8008ecc:	20000030 	.word	0x20000030
 8008ed0:	ffff0208 	.word	0xffff0208

08008ed4 <__ssputs_r>:
 8008ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed8:	688e      	ldr	r6, [r1, #8]
 8008eda:	429e      	cmp	r6, r3
 8008edc:	4682      	mov	sl, r0
 8008ede:	460c      	mov	r4, r1
 8008ee0:	4690      	mov	r8, r2
 8008ee2:	461f      	mov	r7, r3
 8008ee4:	d838      	bhi.n	8008f58 <__ssputs_r+0x84>
 8008ee6:	898a      	ldrh	r2, [r1, #12]
 8008ee8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008eec:	d032      	beq.n	8008f54 <__ssputs_r+0x80>
 8008eee:	6825      	ldr	r5, [r4, #0]
 8008ef0:	6909      	ldr	r1, [r1, #16]
 8008ef2:	eba5 0901 	sub.w	r9, r5, r1
 8008ef6:	6965      	ldr	r5, [r4, #20]
 8008ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008efc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f00:	3301      	adds	r3, #1
 8008f02:	444b      	add	r3, r9
 8008f04:	106d      	asrs	r5, r5, #1
 8008f06:	429d      	cmp	r5, r3
 8008f08:	bf38      	it	cc
 8008f0a:	461d      	movcc	r5, r3
 8008f0c:	0553      	lsls	r3, r2, #21
 8008f0e:	d531      	bpl.n	8008f74 <__ssputs_r+0xa0>
 8008f10:	4629      	mov	r1, r5
 8008f12:	f000 fb63 	bl	80095dc <_malloc_r>
 8008f16:	4606      	mov	r6, r0
 8008f18:	b950      	cbnz	r0, 8008f30 <__ssputs_r+0x5c>
 8008f1a:	230c      	movs	r3, #12
 8008f1c:	f8ca 3000 	str.w	r3, [sl]
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f26:	81a3      	strh	r3, [r4, #12]
 8008f28:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f30:	6921      	ldr	r1, [r4, #16]
 8008f32:	464a      	mov	r2, r9
 8008f34:	f000 fabe 	bl	80094b4 <memcpy>
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f42:	81a3      	strh	r3, [r4, #12]
 8008f44:	6126      	str	r6, [r4, #16]
 8008f46:	6165      	str	r5, [r4, #20]
 8008f48:	444e      	add	r6, r9
 8008f4a:	eba5 0509 	sub.w	r5, r5, r9
 8008f4e:	6026      	str	r6, [r4, #0]
 8008f50:	60a5      	str	r5, [r4, #8]
 8008f52:	463e      	mov	r6, r7
 8008f54:	42be      	cmp	r6, r7
 8008f56:	d900      	bls.n	8008f5a <__ssputs_r+0x86>
 8008f58:	463e      	mov	r6, r7
 8008f5a:	6820      	ldr	r0, [r4, #0]
 8008f5c:	4632      	mov	r2, r6
 8008f5e:	4641      	mov	r1, r8
 8008f60:	f000 fab6 	bl	80094d0 <memmove>
 8008f64:	68a3      	ldr	r3, [r4, #8]
 8008f66:	1b9b      	subs	r3, r3, r6
 8008f68:	60a3      	str	r3, [r4, #8]
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	4433      	add	r3, r6
 8008f6e:	6023      	str	r3, [r4, #0]
 8008f70:	2000      	movs	r0, #0
 8008f72:	e7db      	b.n	8008f2c <__ssputs_r+0x58>
 8008f74:	462a      	mov	r2, r5
 8008f76:	f000 fba5 	bl	80096c4 <_realloc_r>
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d1e1      	bne.n	8008f44 <__ssputs_r+0x70>
 8008f80:	6921      	ldr	r1, [r4, #16]
 8008f82:	4650      	mov	r0, sl
 8008f84:	f000 fabe 	bl	8009504 <_free_r>
 8008f88:	e7c7      	b.n	8008f1a <__ssputs_r+0x46>
	...

08008f8c <_svfiprintf_r>:
 8008f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	4698      	mov	r8, r3
 8008f92:	898b      	ldrh	r3, [r1, #12]
 8008f94:	061b      	lsls	r3, r3, #24
 8008f96:	b09d      	sub	sp, #116	; 0x74
 8008f98:	4607      	mov	r7, r0
 8008f9a:	460d      	mov	r5, r1
 8008f9c:	4614      	mov	r4, r2
 8008f9e:	d50e      	bpl.n	8008fbe <_svfiprintf_r+0x32>
 8008fa0:	690b      	ldr	r3, [r1, #16]
 8008fa2:	b963      	cbnz	r3, 8008fbe <_svfiprintf_r+0x32>
 8008fa4:	2140      	movs	r1, #64	; 0x40
 8008fa6:	f000 fb19 	bl	80095dc <_malloc_r>
 8008faa:	6028      	str	r0, [r5, #0]
 8008fac:	6128      	str	r0, [r5, #16]
 8008fae:	b920      	cbnz	r0, 8008fba <_svfiprintf_r+0x2e>
 8008fb0:	230c      	movs	r3, #12
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb8:	e0d1      	b.n	800915e <_svfiprintf_r+0x1d2>
 8008fba:	2340      	movs	r3, #64	; 0x40
 8008fbc:	616b      	str	r3, [r5, #20]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc2:	2320      	movs	r3, #32
 8008fc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fcc:	2330      	movs	r3, #48	; 0x30
 8008fce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009178 <_svfiprintf_r+0x1ec>
 8008fd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fd6:	f04f 0901 	mov.w	r9, #1
 8008fda:	4623      	mov	r3, r4
 8008fdc:	469a      	mov	sl, r3
 8008fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fe2:	b10a      	cbz	r2, 8008fe8 <_svfiprintf_r+0x5c>
 8008fe4:	2a25      	cmp	r2, #37	; 0x25
 8008fe6:	d1f9      	bne.n	8008fdc <_svfiprintf_r+0x50>
 8008fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8008fec:	d00b      	beq.n	8009006 <_svfiprintf_r+0x7a>
 8008fee:	465b      	mov	r3, fp
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	f7ff ff6d 	bl	8008ed4 <__ssputs_r>
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	f000 80aa 	beq.w	8009154 <_svfiprintf_r+0x1c8>
 8009000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009002:	445a      	add	r2, fp
 8009004:	9209      	str	r2, [sp, #36]	; 0x24
 8009006:	f89a 3000 	ldrb.w	r3, [sl]
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 80a2 	beq.w	8009154 <_svfiprintf_r+0x1c8>
 8009010:	2300      	movs	r3, #0
 8009012:	f04f 32ff 	mov.w	r2, #4294967295
 8009016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800901a:	f10a 0a01 	add.w	sl, sl, #1
 800901e:	9304      	str	r3, [sp, #16]
 8009020:	9307      	str	r3, [sp, #28]
 8009022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009026:	931a      	str	r3, [sp, #104]	; 0x68
 8009028:	4654      	mov	r4, sl
 800902a:	2205      	movs	r2, #5
 800902c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009030:	4851      	ldr	r0, [pc, #324]	; (8009178 <_svfiprintf_r+0x1ec>)
 8009032:	f7f7 f8d5 	bl	80001e0 <memchr>
 8009036:	9a04      	ldr	r2, [sp, #16]
 8009038:	b9d8      	cbnz	r0, 8009072 <_svfiprintf_r+0xe6>
 800903a:	06d0      	lsls	r0, r2, #27
 800903c:	bf44      	itt	mi
 800903e:	2320      	movmi	r3, #32
 8009040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009044:	0711      	lsls	r1, r2, #28
 8009046:	bf44      	itt	mi
 8009048:	232b      	movmi	r3, #43	; 0x2b
 800904a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800904e:	f89a 3000 	ldrb.w	r3, [sl]
 8009052:	2b2a      	cmp	r3, #42	; 0x2a
 8009054:	d015      	beq.n	8009082 <_svfiprintf_r+0xf6>
 8009056:	9a07      	ldr	r2, [sp, #28]
 8009058:	4654      	mov	r4, sl
 800905a:	2000      	movs	r0, #0
 800905c:	f04f 0c0a 	mov.w	ip, #10
 8009060:	4621      	mov	r1, r4
 8009062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009066:	3b30      	subs	r3, #48	; 0x30
 8009068:	2b09      	cmp	r3, #9
 800906a:	d94e      	bls.n	800910a <_svfiprintf_r+0x17e>
 800906c:	b1b0      	cbz	r0, 800909c <_svfiprintf_r+0x110>
 800906e:	9207      	str	r2, [sp, #28]
 8009070:	e014      	b.n	800909c <_svfiprintf_r+0x110>
 8009072:	eba0 0308 	sub.w	r3, r0, r8
 8009076:	fa09 f303 	lsl.w	r3, r9, r3
 800907a:	4313      	orrs	r3, r2
 800907c:	9304      	str	r3, [sp, #16]
 800907e:	46a2      	mov	sl, r4
 8009080:	e7d2      	b.n	8009028 <_svfiprintf_r+0x9c>
 8009082:	9b03      	ldr	r3, [sp, #12]
 8009084:	1d19      	adds	r1, r3, #4
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	9103      	str	r1, [sp, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	bfbb      	ittet	lt
 800908e:	425b      	neglt	r3, r3
 8009090:	f042 0202 	orrlt.w	r2, r2, #2
 8009094:	9307      	strge	r3, [sp, #28]
 8009096:	9307      	strlt	r3, [sp, #28]
 8009098:	bfb8      	it	lt
 800909a:	9204      	strlt	r2, [sp, #16]
 800909c:	7823      	ldrb	r3, [r4, #0]
 800909e:	2b2e      	cmp	r3, #46	; 0x2e
 80090a0:	d10c      	bne.n	80090bc <_svfiprintf_r+0x130>
 80090a2:	7863      	ldrb	r3, [r4, #1]
 80090a4:	2b2a      	cmp	r3, #42	; 0x2a
 80090a6:	d135      	bne.n	8009114 <_svfiprintf_r+0x188>
 80090a8:	9b03      	ldr	r3, [sp, #12]
 80090aa:	1d1a      	adds	r2, r3, #4
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	9203      	str	r2, [sp, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bfb8      	it	lt
 80090b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80090b8:	3402      	adds	r4, #2
 80090ba:	9305      	str	r3, [sp, #20]
 80090bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009188 <_svfiprintf_r+0x1fc>
 80090c0:	7821      	ldrb	r1, [r4, #0]
 80090c2:	2203      	movs	r2, #3
 80090c4:	4650      	mov	r0, sl
 80090c6:	f7f7 f88b 	bl	80001e0 <memchr>
 80090ca:	b140      	cbz	r0, 80090de <_svfiprintf_r+0x152>
 80090cc:	2340      	movs	r3, #64	; 0x40
 80090ce:	eba0 000a 	sub.w	r0, r0, sl
 80090d2:	fa03 f000 	lsl.w	r0, r3, r0
 80090d6:	9b04      	ldr	r3, [sp, #16]
 80090d8:	4303      	orrs	r3, r0
 80090da:	3401      	adds	r4, #1
 80090dc:	9304      	str	r3, [sp, #16]
 80090de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e2:	4826      	ldr	r0, [pc, #152]	; (800917c <_svfiprintf_r+0x1f0>)
 80090e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090e8:	2206      	movs	r2, #6
 80090ea:	f7f7 f879 	bl	80001e0 <memchr>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d038      	beq.n	8009164 <_svfiprintf_r+0x1d8>
 80090f2:	4b23      	ldr	r3, [pc, #140]	; (8009180 <_svfiprintf_r+0x1f4>)
 80090f4:	bb1b      	cbnz	r3, 800913e <_svfiprintf_r+0x1b2>
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	3307      	adds	r3, #7
 80090fa:	f023 0307 	bic.w	r3, r3, #7
 80090fe:	3308      	adds	r3, #8
 8009100:	9303      	str	r3, [sp, #12]
 8009102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009104:	4433      	add	r3, r6
 8009106:	9309      	str	r3, [sp, #36]	; 0x24
 8009108:	e767      	b.n	8008fda <_svfiprintf_r+0x4e>
 800910a:	fb0c 3202 	mla	r2, ip, r2, r3
 800910e:	460c      	mov	r4, r1
 8009110:	2001      	movs	r0, #1
 8009112:	e7a5      	b.n	8009060 <_svfiprintf_r+0xd4>
 8009114:	2300      	movs	r3, #0
 8009116:	3401      	adds	r4, #1
 8009118:	9305      	str	r3, [sp, #20]
 800911a:	4619      	mov	r1, r3
 800911c:	f04f 0c0a 	mov.w	ip, #10
 8009120:	4620      	mov	r0, r4
 8009122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009126:	3a30      	subs	r2, #48	; 0x30
 8009128:	2a09      	cmp	r2, #9
 800912a:	d903      	bls.n	8009134 <_svfiprintf_r+0x1a8>
 800912c:	2b00      	cmp	r3, #0
 800912e:	d0c5      	beq.n	80090bc <_svfiprintf_r+0x130>
 8009130:	9105      	str	r1, [sp, #20]
 8009132:	e7c3      	b.n	80090bc <_svfiprintf_r+0x130>
 8009134:	fb0c 2101 	mla	r1, ip, r1, r2
 8009138:	4604      	mov	r4, r0
 800913a:	2301      	movs	r3, #1
 800913c:	e7f0      	b.n	8009120 <_svfiprintf_r+0x194>
 800913e:	ab03      	add	r3, sp, #12
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	462a      	mov	r2, r5
 8009144:	4b0f      	ldr	r3, [pc, #60]	; (8009184 <_svfiprintf_r+0x1f8>)
 8009146:	a904      	add	r1, sp, #16
 8009148:	4638      	mov	r0, r7
 800914a:	f3af 8000 	nop.w
 800914e:	1c42      	adds	r2, r0, #1
 8009150:	4606      	mov	r6, r0
 8009152:	d1d6      	bne.n	8009102 <_svfiprintf_r+0x176>
 8009154:	89ab      	ldrh	r3, [r5, #12]
 8009156:	065b      	lsls	r3, r3, #25
 8009158:	f53f af2c 	bmi.w	8008fb4 <_svfiprintf_r+0x28>
 800915c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800915e:	b01d      	add	sp, #116	; 0x74
 8009160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009164:	ab03      	add	r3, sp, #12
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	462a      	mov	r2, r5
 800916a:	4b06      	ldr	r3, [pc, #24]	; (8009184 <_svfiprintf_r+0x1f8>)
 800916c:	a904      	add	r1, sp, #16
 800916e:	4638      	mov	r0, r7
 8009170:	f000 f87a 	bl	8009268 <_printf_i>
 8009174:	e7eb      	b.n	800914e <_svfiprintf_r+0x1c2>
 8009176:	bf00      	nop
 8009178:	0800aa04 	.word	0x0800aa04
 800917c:	0800aa0e 	.word	0x0800aa0e
 8009180:	00000000 	.word	0x00000000
 8009184:	08008ed5 	.word	0x08008ed5
 8009188:	0800aa0a 	.word	0x0800aa0a

0800918c <_printf_common>:
 800918c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009190:	4616      	mov	r6, r2
 8009192:	4699      	mov	r9, r3
 8009194:	688a      	ldr	r2, [r1, #8]
 8009196:	690b      	ldr	r3, [r1, #16]
 8009198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800919c:	4293      	cmp	r3, r2
 800919e:	bfb8      	it	lt
 80091a0:	4613      	movlt	r3, r2
 80091a2:	6033      	str	r3, [r6, #0]
 80091a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091a8:	4607      	mov	r7, r0
 80091aa:	460c      	mov	r4, r1
 80091ac:	b10a      	cbz	r2, 80091b2 <_printf_common+0x26>
 80091ae:	3301      	adds	r3, #1
 80091b0:	6033      	str	r3, [r6, #0]
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	0699      	lsls	r1, r3, #26
 80091b6:	bf42      	ittt	mi
 80091b8:	6833      	ldrmi	r3, [r6, #0]
 80091ba:	3302      	addmi	r3, #2
 80091bc:	6033      	strmi	r3, [r6, #0]
 80091be:	6825      	ldr	r5, [r4, #0]
 80091c0:	f015 0506 	ands.w	r5, r5, #6
 80091c4:	d106      	bne.n	80091d4 <_printf_common+0x48>
 80091c6:	f104 0a19 	add.w	sl, r4, #25
 80091ca:	68e3      	ldr	r3, [r4, #12]
 80091cc:	6832      	ldr	r2, [r6, #0]
 80091ce:	1a9b      	subs	r3, r3, r2
 80091d0:	42ab      	cmp	r3, r5
 80091d2:	dc26      	bgt.n	8009222 <_printf_common+0x96>
 80091d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091d8:	1e13      	subs	r3, r2, #0
 80091da:	6822      	ldr	r2, [r4, #0]
 80091dc:	bf18      	it	ne
 80091de:	2301      	movne	r3, #1
 80091e0:	0692      	lsls	r2, r2, #26
 80091e2:	d42b      	bmi.n	800923c <_printf_common+0xb0>
 80091e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091e8:	4649      	mov	r1, r9
 80091ea:	4638      	mov	r0, r7
 80091ec:	47c0      	blx	r8
 80091ee:	3001      	adds	r0, #1
 80091f0:	d01e      	beq.n	8009230 <_printf_common+0xa4>
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	68e5      	ldr	r5, [r4, #12]
 80091f6:	6832      	ldr	r2, [r6, #0]
 80091f8:	f003 0306 	and.w	r3, r3, #6
 80091fc:	2b04      	cmp	r3, #4
 80091fe:	bf08      	it	eq
 8009200:	1aad      	subeq	r5, r5, r2
 8009202:	68a3      	ldr	r3, [r4, #8]
 8009204:	6922      	ldr	r2, [r4, #16]
 8009206:	bf0c      	ite	eq
 8009208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800920c:	2500      	movne	r5, #0
 800920e:	4293      	cmp	r3, r2
 8009210:	bfc4      	itt	gt
 8009212:	1a9b      	subgt	r3, r3, r2
 8009214:	18ed      	addgt	r5, r5, r3
 8009216:	2600      	movs	r6, #0
 8009218:	341a      	adds	r4, #26
 800921a:	42b5      	cmp	r5, r6
 800921c:	d11a      	bne.n	8009254 <_printf_common+0xc8>
 800921e:	2000      	movs	r0, #0
 8009220:	e008      	b.n	8009234 <_printf_common+0xa8>
 8009222:	2301      	movs	r3, #1
 8009224:	4652      	mov	r2, sl
 8009226:	4649      	mov	r1, r9
 8009228:	4638      	mov	r0, r7
 800922a:	47c0      	blx	r8
 800922c:	3001      	adds	r0, #1
 800922e:	d103      	bne.n	8009238 <_printf_common+0xac>
 8009230:	f04f 30ff 	mov.w	r0, #4294967295
 8009234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009238:	3501      	adds	r5, #1
 800923a:	e7c6      	b.n	80091ca <_printf_common+0x3e>
 800923c:	18e1      	adds	r1, r4, r3
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	2030      	movs	r0, #48	; 0x30
 8009242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009246:	4422      	add	r2, r4
 8009248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800924c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009250:	3302      	adds	r3, #2
 8009252:	e7c7      	b.n	80091e4 <_printf_common+0x58>
 8009254:	2301      	movs	r3, #1
 8009256:	4622      	mov	r2, r4
 8009258:	4649      	mov	r1, r9
 800925a:	4638      	mov	r0, r7
 800925c:	47c0      	blx	r8
 800925e:	3001      	adds	r0, #1
 8009260:	d0e6      	beq.n	8009230 <_printf_common+0xa4>
 8009262:	3601      	adds	r6, #1
 8009264:	e7d9      	b.n	800921a <_printf_common+0x8e>
	...

08009268 <_printf_i>:
 8009268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800926c:	7e0f      	ldrb	r7, [r1, #24]
 800926e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009270:	2f78      	cmp	r7, #120	; 0x78
 8009272:	4691      	mov	r9, r2
 8009274:	4680      	mov	r8, r0
 8009276:	460c      	mov	r4, r1
 8009278:	469a      	mov	sl, r3
 800927a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800927e:	d807      	bhi.n	8009290 <_printf_i+0x28>
 8009280:	2f62      	cmp	r7, #98	; 0x62
 8009282:	d80a      	bhi.n	800929a <_printf_i+0x32>
 8009284:	2f00      	cmp	r7, #0
 8009286:	f000 80d8 	beq.w	800943a <_printf_i+0x1d2>
 800928a:	2f58      	cmp	r7, #88	; 0x58
 800928c:	f000 80a3 	beq.w	80093d6 <_printf_i+0x16e>
 8009290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009298:	e03a      	b.n	8009310 <_printf_i+0xa8>
 800929a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800929e:	2b15      	cmp	r3, #21
 80092a0:	d8f6      	bhi.n	8009290 <_printf_i+0x28>
 80092a2:	a101      	add	r1, pc, #4	; (adr r1, 80092a8 <_printf_i+0x40>)
 80092a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092a8:	08009301 	.word	0x08009301
 80092ac:	08009315 	.word	0x08009315
 80092b0:	08009291 	.word	0x08009291
 80092b4:	08009291 	.word	0x08009291
 80092b8:	08009291 	.word	0x08009291
 80092bc:	08009291 	.word	0x08009291
 80092c0:	08009315 	.word	0x08009315
 80092c4:	08009291 	.word	0x08009291
 80092c8:	08009291 	.word	0x08009291
 80092cc:	08009291 	.word	0x08009291
 80092d0:	08009291 	.word	0x08009291
 80092d4:	08009421 	.word	0x08009421
 80092d8:	08009345 	.word	0x08009345
 80092dc:	08009403 	.word	0x08009403
 80092e0:	08009291 	.word	0x08009291
 80092e4:	08009291 	.word	0x08009291
 80092e8:	08009443 	.word	0x08009443
 80092ec:	08009291 	.word	0x08009291
 80092f0:	08009345 	.word	0x08009345
 80092f4:	08009291 	.word	0x08009291
 80092f8:	08009291 	.word	0x08009291
 80092fc:	0800940b 	.word	0x0800940b
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	1d1a      	adds	r2, r3, #4
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	602a      	str	r2, [r5, #0]
 8009308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800930c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009310:	2301      	movs	r3, #1
 8009312:	e0a3      	b.n	800945c <_printf_i+0x1f4>
 8009314:	6820      	ldr	r0, [r4, #0]
 8009316:	6829      	ldr	r1, [r5, #0]
 8009318:	0606      	lsls	r6, r0, #24
 800931a:	f101 0304 	add.w	r3, r1, #4
 800931e:	d50a      	bpl.n	8009336 <_printf_i+0xce>
 8009320:	680e      	ldr	r6, [r1, #0]
 8009322:	602b      	str	r3, [r5, #0]
 8009324:	2e00      	cmp	r6, #0
 8009326:	da03      	bge.n	8009330 <_printf_i+0xc8>
 8009328:	232d      	movs	r3, #45	; 0x2d
 800932a:	4276      	negs	r6, r6
 800932c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009330:	485e      	ldr	r0, [pc, #376]	; (80094ac <_printf_i+0x244>)
 8009332:	230a      	movs	r3, #10
 8009334:	e019      	b.n	800936a <_printf_i+0x102>
 8009336:	680e      	ldr	r6, [r1, #0]
 8009338:	602b      	str	r3, [r5, #0]
 800933a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800933e:	bf18      	it	ne
 8009340:	b236      	sxthne	r6, r6
 8009342:	e7ef      	b.n	8009324 <_printf_i+0xbc>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	6820      	ldr	r0, [r4, #0]
 8009348:	1d19      	adds	r1, r3, #4
 800934a:	6029      	str	r1, [r5, #0]
 800934c:	0601      	lsls	r1, r0, #24
 800934e:	d501      	bpl.n	8009354 <_printf_i+0xec>
 8009350:	681e      	ldr	r6, [r3, #0]
 8009352:	e002      	b.n	800935a <_printf_i+0xf2>
 8009354:	0646      	lsls	r6, r0, #25
 8009356:	d5fb      	bpl.n	8009350 <_printf_i+0xe8>
 8009358:	881e      	ldrh	r6, [r3, #0]
 800935a:	4854      	ldr	r0, [pc, #336]	; (80094ac <_printf_i+0x244>)
 800935c:	2f6f      	cmp	r7, #111	; 0x6f
 800935e:	bf0c      	ite	eq
 8009360:	2308      	moveq	r3, #8
 8009362:	230a      	movne	r3, #10
 8009364:	2100      	movs	r1, #0
 8009366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800936a:	6865      	ldr	r5, [r4, #4]
 800936c:	60a5      	str	r5, [r4, #8]
 800936e:	2d00      	cmp	r5, #0
 8009370:	bfa2      	ittt	ge
 8009372:	6821      	ldrge	r1, [r4, #0]
 8009374:	f021 0104 	bicge.w	r1, r1, #4
 8009378:	6021      	strge	r1, [r4, #0]
 800937a:	b90e      	cbnz	r6, 8009380 <_printf_i+0x118>
 800937c:	2d00      	cmp	r5, #0
 800937e:	d04d      	beq.n	800941c <_printf_i+0x1b4>
 8009380:	4615      	mov	r5, r2
 8009382:	fbb6 f1f3 	udiv	r1, r6, r3
 8009386:	fb03 6711 	mls	r7, r3, r1, r6
 800938a:	5dc7      	ldrb	r7, [r0, r7]
 800938c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009390:	4637      	mov	r7, r6
 8009392:	42bb      	cmp	r3, r7
 8009394:	460e      	mov	r6, r1
 8009396:	d9f4      	bls.n	8009382 <_printf_i+0x11a>
 8009398:	2b08      	cmp	r3, #8
 800939a:	d10b      	bne.n	80093b4 <_printf_i+0x14c>
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	07de      	lsls	r6, r3, #31
 80093a0:	d508      	bpl.n	80093b4 <_printf_i+0x14c>
 80093a2:	6923      	ldr	r3, [r4, #16]
 80093a4:	6861      	ldr	r1, [r4, #4]
 80093a6:	4299      	cmp	r1, r3
 80093a8:	bfde      	ittt	le
 80093aa:	2330      	movle	r3, #48	; 0x30
 80093ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093b4:	1b52      	subs	r2, r2, r5
 80093b6:	6122      	str	r2, [r4, #16]
 80093b8:	f8cd a000 	str.w	sl, [sp]
 80093bc:	464b      	mov	r3, r9
 80093be:	aa03      	add	r2, sp, #12
 80093c0:	4621      	mov	r1, r4
 80093c2:	4640      	mov	r0, r8
 80093c4:	f7ff fee2 	bl	800918c <_printf_common>
 80093c8:	3001      	adds	r0, #1
 80093ca:	d14c      	bne.n	8009466 <_printf_i+0x1fe>
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295
 80093d0:	b004      	add	sp, #16
 80093d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d6:	4835      	ldr	r0, [pc, #212]	; (80094ac <_printf_i+0x244>)
 80093d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80093dc:	6829      	ldr	r1, [r5, #0]
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80093e4:	6029      	str	r1, [r5, #0]
 80093e6:	061d      	lsls	r5, r3, #24
 80093e8:	d514      	bpl.n	8009414 <_printf_i+0x1ac>
 80093ea:	07df      	lsls	r7, r3, #31
 80093ec:	bf44      	itt	mi
 80093ee:	f043 0320 	orrmi.w	r3, r3, #32
 80093f2:	6023      	strmi	r3, [r4, #0]
 80093f4:	b91e      	cbnz	r6, 80093fe <_printf_i+0x196>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	f023 0320 	bic.w	r3, r3, #32
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	2310      	movs	r3, #16
 8009400:	e7b0      	b.n	8009364 <_printf_i+0xfc>
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	f043 0320 	orr.w	r3, r3, #32
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	2378      	movs	r3, #120	; 0x78
 800940c:	4828      	ldr	r0, [pc, #160]	; (80094b0 <_printf_i+0x248>)
 800940e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009412:	e7e3      	b.n	80093dc <_printf_i+0x174>
 8009414:	0659      	lsls	r1, r3, #25
 8009416:	bf48      	it	mi
 8009418:	b2b6      	uxthmi	r6, r6
 800941a:	e7e6      	b.n	80093ea <_printf_i+0x182>
 800941c:	4615      	mov	r5, r2
 800941e:	e7bb      	b.n	8009398 <_printf_i+0x130>
 8009420:	682b      	ldr	r3, [r5, #0]
 8009422:	6826      	ldr	r6, [r4, #0]
 8009424:	6961      	ldr	r1, [r4, #20]
 8009426:	1d18      	adds	r0, r3, #4
 8009428:	6028      	str	r0, [r5, #0]
 800942a:	0635      	lsls	r5, r6, #24
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	d501      	bpl.n	8009434 <_printf_i+0x1cc>
 8009430:	6019      	str	r1, [r3, #0]
 8009432:	e002      	b.n	800943a <_printf_i+0x1d2>
 8009434:	0670      	lsls	r0, r6, #25
 8009436:	d5fb      	bpl.n	8009430 <_printf_i+0x1c8>
 8009438:	8019      	strh	r1, [r3, #0]
 800943a:	2300      	movs	r3, #0
 800943c:	6123      	str	r3, [r4, #16]
 800943e:	4615      	mov	r5, r2
 8009440:	e7ba      	b.n	80093b8 <_printf_i+0x150>
 8009442:	682b      	ldr	r3, [r5, #0]
 8009444:	1d1a      	adds	r2, r3, #4
 8009446:	602a      	str	r2, [r5, #0]
 8009448:	681d      	ldr	r5, [r3, #0]
 800944a:	6862      	ldr	r2, [r4, #4]
 800944c:	2100      	movs	r1, #0
 800944e:	4628      	mov	r0, r5
 8009450:	f7f6 fec6 	bl	80001e0 <memchr>
 8009454:	b108      	cbz	r0, 800945a <_printf_i+0x1f2>
 8009456:	1b40      	subs	r0, r0, r5
 8009458:	6060      	str	r0, [r4, #4]
 800945a:	6863      	ldr	r3, [r4, #4]
 800945c:	6123      	str	r3, [r4, #16]
 800945e:	2300      	movs	r3, #0
 8009460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009464:	e7a8      	b.n	80093b8 <_printf_i+0x150>
 8009466:	6923      	ldr	r3, [r4, #16]
 8009468:	462a      	mov	r2, r5
 800946a:	4649      	mov	r1, r9
 800946c:	4640      	mov	r0, r8
 800946e:	47d0      	blx	sl
 8009470:	3001      	adds	r0, #1
 8009472:	d0ab      	beq.n	80093cc <_printf_i+0x164>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	079b      	lsls	r3, r3, #30
 8009478:	d413      	bmi.n	80094a2 <_printf_i+0x23a>
 800947a:	68e0      	ldr	r0, [r4, #12]
 800947c:	9b03      	ldr	r3, [sp, #12]
 800947e:	4298      	cmp	r0, r3
 8009480:	bfb8      	it	lt
 8009482:	4618      	movlt	r0, r3
 8009484:	e7a4      	b.n	80093d0 <_printf_i+0x168>
 8009486:	2301      	movs	r3, #1
 8009488:	4632      	mov	r2, r6
 800948a:	4649      	mov	r1, r9
 800948c:	4640      	mov	r0, r8
 800948e:	47d0      	blx	sl
 8009490:	3001      	adds	r0, #1
 8009492:	d09b      	beq.n	80093cc <_printf_i+0x164>
 8009494:	3501      	adds	r5, #1
 8009496:	68e3      	ldr	r3, [r4, #12]
 8009498:	9903      	ldr	r1, [sp, #12]
 800949a:	1a5b      	subs	r3, r3, r1
 800949c:	42ab      	cmp	r3, r5
 800949e:	dcf2      	bgt.n	8009486 <_printf_i+0x21e>
 80094a0:	e7eb      	b.n	800947a <_printf_i+0x212>
 80094a2:	2500      	movs	r5, #0
 80094a4:	f104 0619 	add.w	r6, r4, #25
 80094a8:	e7f5      	b.n	8009496 <_printf_i+0x22e>
 80094aa:	bf00      	nop
 80094ac:	0800aa15 	.word	0x0800aa15
 80094b0:	0800aa26 	.word	0x0800aa26

080094b4 <memcpy>:
 80094b4:	440a      	add	r2, r1
 80094b6:	4291      	cmp	r1, r2
 80094b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80094bc:	d100      	bne.n	80094c0 <memcpy+0xc>
 80094be:	4770      	bx	lr
 80094c0:	b510      	push	{r4, lr}
 80094c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094ca:	4291      	cmp	r1, r2
 80094cc:	d1f9      	bne.n	80094c2 <memcpy+0xe>
 80094ce:	bd10      	pop	{r4, pc}

080094d0 <memmove>:
 80094d0:	4288      	cmp	r0, r1
 80094d2:	b510      	push	{r4, lr}
 80094d4:	eb01 0402 	add.w	r4, r1, r2
 80094d8:	d902      	bls.n	80094e0 <memmove+0x10>
 80094da:	4284      	cmp	r4, r0
 80094dc:	4623      	mov	r3, r4
 80094de:	d807      	bhi.n	80094f0 <memmove+0x20>
 80094e0:	1e43      	subs	r3, r0, #1
 80094e2:	42a1      	cmp	r1, r4
 80094e4:	d008      	beq.n	80094f8 <memmove+0x28>
 80094e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ee:	e7f8      	b.n	80094e2 <memmove+0x12>
 80094f0:	4402      	add	r2, r0
 80094f2:	4601      	mov	r1, r0
 80094f4:	428a      	cmp	r2, r1
 80094f6:	d100      	bne.n	80094fa <memmove+0x2a>
 80094f8:	bd10      	pop	{r4, pc}
 80094fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009502:	e7f7      	b.n	80094f4 <memmove+0x24>

08009504 <_free_r>:
 8009504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009506:	2900      	cmp	r1, #0
 8009508:	d044      	beq.n	8009594 <_free_r+0x90>
 800950a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800950e:	9001      	str	r0, [sp, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	f1a1 0404 	sub.w	r4, r1, #4
 8009516:	bfb8      	it	lt
 8009518:	18e4      	addlt	r4, r4, r3
 800951a:	f000 f913 	bl	8009744 <__malloc_lock>
 800951e:	4a1e      	ldr	r2, [pc, #120]	; (8009598 <_free_r+0x94>)
 8009520:	9801      	ldr	r0, [sp, #4]
 8009522:	6813      	ldr	r3, [r2, #0]
 8009524:	b933      	cbnz	r3, 8009534 <_free_r+0x30>
 8009526:	6063      	str	r3, [r4, #4]
 8009528:	6014      	str	r4, [r2, #0]
 800952a:	b003      	add	sp, #12
 800952c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009530:	f000 b90e 	b.w	8009750 <__malloc_unlock>
 8009534:	42a3      	cmp	r3, r4
 8009536:	d908      	bls.n	800954a <_free_r+0x46>
 8009538:	6825      	ldr	r5, [r4, #0]
 800953a:	1961      	adds	r1, r4, r5
 800953c:	428b      	cmp	r3, r1
 800953e:	bf01      	itttt	eq
 8009540:	6819      	ldreq	r1, [r3, #0]
 8009542:	685b      	ldreq	r3, [r3, #4]
 8009544:	1949      	addeq	r1, r1, r5
 8009546:	6021      	streq	r1, [r4, #0]
 8009548:	e7ed      	b.n	8009526 <_free_r+0x22>
 800954a:	461a      	mov	r2, r3
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	b10b      	cbz	r3, 8009554 <_free_r+0x50>
 8009550:	42a3      	cmp	r3, r4
 8009552:	d9fa      	bls.n	800954a <_free_r+0x46>
 8009554:	6811      	ldr	r1, [r2, #0]
 8009556:	1855      	adds	r5, r2, r1
 8009558:	42a5      	cmp	r5, r4
 800955a:	d10b      	bne.n	8009574 <_free_r+0x70>
 800955c:	6824      	ldr	r4, [r4, #0]
 800955e:	4421      	add	r1, r4
 8009560:	1854      	adds	r4, r2, r1
 8009562:	42a3      	cmp	r3, r4
 8009564:	6011      	str	r1, [r2, #0]
 8009566:	d1e0      	bne.n	800952a <_free_r+0x26>
 8009568:	681c      	ldr	r4, [r3, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	6053      	str	r3, [r2, #4]
 800956e:	4421      	add	r1, r4
 8009570:	6011      	str	r1, [r2, #0]
 8009572:	e7da      	b.n	800952a <_free_r+0x26>
 8009574:	d902      	bls.n	800957c <_free_r+0x78>
 8009576:	230c      	movs	r3, #12
 8009578:	6003      	str	r3, [r0, #0]
 800957a:	e7d6      	b.n	800952a <_free_r+0x26>
 800957c:	6825      	ldr	r5, [r4, #0]
 800957e:	1961      	adds	r1, r4, r5
 8009580:	428b      	cmp	r3, r1
 8009582:	bf04      	itt	eq
 8009584:	6819      	ldreq	r1, [r3, #0]
 8009586:	685b      	ldreq	r3, [r3, #4]
 8009588:	6063      	str	r3, [r4, #4]
 800958a:	bf04      	itt	eq
 800958c:	1949      	addeq	r1, r1, r5
 800958e:	6021      	streq	r1, [r4, #0]
 8009590:	6054      	str	r4, [r2, #4]
 8009592:	e7ca      	b.n	800952a <_free_r+0x26>
 8009594:	b003      	add	sp, #12
 8009596:	bd30      	pop	{r4, r5, pc}
 8009598:	200010a8 	.word	0x200010a8

0800959c <sbrk_aligned>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	4e0e      	ldr	r6, [pc, #56]	; (80095d8 <sbrk_aligned+0x3c>)
 80095a0:	460c      	mov	r4, r1
 80095a2:	6831      	ldr	r1, [r6, #0]
 80095a4:	4605      	mov	r5, r0
 80095a6:	b911      	cbnz	r1, 80095ae <sbrk_aligned+0x12>
 80095a8:	f000 f8bc 	bl	8009724 <_sbrk_r>
 80095ac:	6030      	str	r0, [r6, #0]
 80095ae:	4621      	mov	r1, r4
 80095b0:	4628      	mov	r0, r5
 80095b2:	f000 f8b7 	bl	8009724 <_sbrk_r>
 80095b6:	1c43      	adds	r3, r0, #1
 80095b8:	d00a      	beq.n	80095d0 <sbrk_aligned+0x34>
 80095ba:	1cc4      	adds	r4, r0, #3
 80095bc:	f024 0403 	bic.w	r4, r4, #3
 80095c0:	42a0      	cmp	r0, r4
 80095c2:	d007      	beq.n	80095d4 <sbrk_aligned+0x38>
 80095c4:	1a21      	subs	r1, r4, r0
 80095c6:	4628      	mov	r0, r5
 80095c8:	f000 f8ac 	bl	8009724 <_sbrk_r>
 80095cc:	3001      	adds	r0, #1
 80095ce:	d101      	bne.n	80095d4 <sbrk_aligned+0x38>
 80095d0:	f04f 34ff 	mov.w	r4, #4294967295
 80095d4:	4620      	mov	r0, r4
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
 80095d8:	200010ac 	.word	0x200010ac

080095dc <_malloc_r>:
 80095dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e0:	1ccd      	adds	r5, r1, #3
 80095e2:	f025 0503 	bic.w	r5, r5, #3
 80095e6:	3508      	adds	r5, #8
 80095e8:	2d0c      	cmp	r5, #12
 80095ea:	bf38      	it	cc
 80095ec:	250c      	movcc	r5, #12
 80095ee:	2d00      	cmp	r5, #0
 80095f0:	4607      	mov	r7, r0
 80095f2:	db01      	blt.n	80095f8 <_malloc_r+0x1c>
 80095f4:	42a9      	cmp	r1, r5
 80095f6:	d905      	bls.n	8009604 <_malloc_r+0x28>
 80095f8:	230c      	movs	r3, #12
 80095fa:	603b      	str	r3, [r7, #0]
 80095fc:	2600      	movs	r6, #0
 80095fe:	4630      	mov	r0, r6
 8009600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009604:	4e2e      	ldr	r6, [pc, #184]	; (80096c0 <_malloc_r+0xe4>)
 8009606:	f000 f89d 	bl	8009744 <__malloc_lock>
 800960a:	6833      	ldr	r3, [r6, #0]
 800960c:	461c      	mov	r4, r3
 800960e:	bb34      	cbnz	r4, 800965e <_malloc_r+0x82>
 8009610:	4629      	mov	r1, r5
 8009612:	4638      	mov	r0, r7
 8009614:	f7ff ffc2 	bl	800959c <sbrk_aligned>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	4604      	mov	r4, r0
 800961c:	d14d      	bne.n	80096ba <_malloc_r+0xde>
 800961e:	6834      	ldr	r4, [r6, #0]
 8009620:	4626      	mov	r6, r4
 8009622:	2e00      	cmp	r6, #0
 8009624:	d140      	bne.n	80096a8 <_malloc_r+0xcc>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	4631      	mov	r1, r6
 800962a:	4638      	mov	r0, r7
 800962c:	eb04 0803 	add.w	r8, r4, r3
 8009630:	f000 f878 	bl	8009724 <_sbrk_r>
 8009634:	4580      	cmp	r8, r0
 8009636:	d13a      	bne.n	80096ae <_malloc_r+0xd2>
 8009638:	6821      	ldr	r1, [r4, #0]
 800963a:	3503      	adds	r5, #3
 800963c:	1a6d      	subs	r5, r5, r1
 800963e:	f025 0503 	bic.w	r5, r5, #3
 8009642:	3508      	adds	r5, #8
 8009644:	2d0c      	cmp	r5, #12
 8009646:	bf38      	it	cc
 8009648:	250c      	movcc	r5, #12
 800964a:	4629      	mov	r1, r5
 800964c:	4638      	mov	r0, r7
 800964e:	f7ff ffa5 	bl	800959c <sbrk_aligned>
 8009652:	3001      	adds	r0, #1
 8009654:	d02b      	beq.n	80096ae <_malloc_r+0xd2>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	442b      	add	r3, r5
 800965a:	6023      	str	r3, [r4, #0]
 800965c:	e00e      	b.n	800967c <_malloc_r+0xa0>
 800965e:	6822      	ldr	r2, [r4, #0]
 8009660:	1b52      	subs	r2, r2, r5
 8009662:	d41e      	bmi.n	80096a2 <_malloc_r+0xc6>
 8009664:	2a0b      	cmp	r2, #11
 8009666:	d916      	bls.n	8009696 <_malloc_r+0xba>
 8009668:	1961      	adds	r1, r4, r5
 800966a:	42a3      	cmp	r3, r4
 800966c:	6025      	str	r5, [r4, #0]
 800966e:	bf18      	it	ne
 8009670:	6059      	strne	r1, [r3, #4]
 8009672:	6863      	ldr	r3, [r4, #4]
 8009674:	bf08      	it	eq
 8009676:	6031      	streq	r1, [r6, #0]
 8009678:	5162      	str	r2, [r4, r5]
 800967a:	604b      	str	r3, [r1, #4]
 800967c:	4638      	mov	r0, r7
 800967e:	f104 060b 	add.w	r6, r4, #11
 8009682:	f000 f865 	bl	8009750 <__malloc_unlock>
 8009686:	f026 0607 	bic.w	r6, r6, #7
 800968a:	1d23      	adds	r3, r4, #4
 800968c:	1af2      	subs	r2, r6, r3
 800968e:	d0b6      	beq.n	80095fe <_malloc_r+0x22>
 8009690:	1b9b      	subs	r3, r3, r6
 8009692:	50a3      	str	r3, [r4, r2]
 8009694:	e7b3      	b.n	80095fe <_malloc_r+0x22>
 8009696:	6862      	ldr	r2, [r4, #4]
 8009698:	42a3      	cmp	r3, r4
 800969a:	bf0c      	ite	eq
 800969c:	6032      	streq	r2, [r6, #0]
 800969e:	605a      	strne	r2, [r3, #4]
 80096a0:	e7ec      	b.n	800967c <_malloc_r+0xa0>
 80096a2:	4623      	mov	r3, r4
 80096a4:	6864      	ldr	r4, [r4, #4]
 80096a6:	e7b2      	b.n	800960e <_malloc_r+0x32>
 80096a8:	4634      	mov	r4, r6
 80096aa:	6876      	ldr	r6, [r6, #4]
 80096ac:	e7b9      	b.n	8009622 <_malloc_r+0x46>
 80096ae:	230c      	movs	r3, #12
 80096b0:	603b      	str	r3, [r7, #0]
 80096b2:	4638      	mov	r0, r7
 80096b4:	f000 f84c 	bl	8009750 <__malloc_unlock>
 80096b8:	e7a1      	b.n	80095fe <_malloc_r+0x22>
 80096ba:	6025      	str	r5, [r4, #0]
 80096bc:	e7de      	b.n	800967c <_malloc_r+0xa0>
 80096be:	bf00      	nop
 80096c0:	200010a8 	.word	0x200010a8

080096c4 <_realloc_r>:
 80096c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c8:	4680      	mov	r8, r0
 80096ca:	4614      	mov	r4, r2
 80096cc:	460e      	mov	r6, r1
 80096ce:	b921      	cbnz	r1, 80096da <_realloc_r+0x16>
 80096d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096d4:	4611      	mov	r1, r2
 80096d6:	f7ff bf81 	b.w	80095dc <_malloc_r>
 80096da:	b92a      	cbnz	r2, 80096e8 <_realloc_r+0x24>
 80096dc:	f7ff ff12 	bl	8009504 <_free_r>
 80096e0:	4625      	mov	r5, r4
 80096e2:	4628      	mov	r0, r5
 80096e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e8:	f000 f838 	bl	800975c <_malloc_usable_size_r>
 80096ec:	4284      	cmp	r4, r0
 80096ee:	4607      	mov	r7, r0
 80096f0:	d802      	bhi.n	80096f8 <_realloc_r+0x34>
 80096f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096f6:	d812      	bhi.n	800971e <_realloc_r+0x5a>
 80096f8:	4621      	mov	r1, r4
 80096fa:	4640      	mov	r0, r8
 80096fc:	f7ff ff6e 	bl	80095dc <_malloc_r>
 8009700:	4605      	mov	r5, r0
 8009702:	2800      	cmp	r0, #0
 8009704:	d0ed      	beq.n	80096e2 <_realloc_r+0x1e>
 8009706:	42bc      	cmp	r4, r7
 8009708:	4622      	mov	r2, r4
 800970a:	4631      	mov	r1, r6
 800970c:	bf28      	it	cs
 800970e:	463a      	movcs	r2, r7
 8009710:	f7ff fed0 	bl	80094b4 <memcpy>
 8009714:	4631      	mov	r1, r6
 8009716:	4640      	mov	r0, r8
 8009718:	f7ff fef4 	bl	8009504 <_free_r>
 800971c:	e7e1      	b.n	80096e2 <_realloc_r+0x1e>
 800971e:	4635      	mov	r5, r6
 8009720:	e7df      	b.n	80096e2 <_realloc_r+0x1e>
	...

08009724 <_sbrk_r>:
 8009724:	b538      	push	{r3, r4, r5, lr}
 8009726:	4d06      	ldr	r5, [pc, #24]	; (8009740 <_sbrk_r+0x1c>)
 8009728:	2300      	movs	r3, #0
 800972a:	4604      	mov	r4, r0
 800972c:	4608      	mov	r0, r1
 800972e:	602b      	str	r3, [r5, #0]
 8009730:	f7f8 fed6 	bl	80024e0 <_sbrk>
 8009734:	1c43      	adds	r3, r0, #1
 8009736:	d102      	bne.n	800973e <_sbrk_r+0x1a>
 8009738:	682b      	ldr	r3, [r5, #0]
 800973a:	b103      	cbz	r3, 800973e <_sbrk_r+0x1a>
 800973c:	6023      	str	r3, [r4, #0]
 800973e:	bd38      	pop	{r3, r4, r5, pc}
 8009740:	200010b0 	.word	0x200010b0

08009744 <__malloc_lock>:
 8009744:	4801      	ldr	r0, [pc, #4]	; (800974c <__malloc_lock+0x8>)
 8009746:	f000 b811 	b.w	800976c <__retarget_lock_acquire_recursive>
 800974a:	bf00      	nop
 800974c:	200010b4 	.word	0x200010b4

08009750 <__malloc_unlock>:
 8009750:	4801      	ldr	r0, [pc, #4]	; (8009758 <__malloc_unlock+0x8>)
 8009752:	f000 b80c 	b.w	800976e <__retarget_lock_release_recursive>
 8009756:	bf00      	nop
 8009758:	200010b4 	.word	0x200010b4

0800975c <_malloc_usable_size_r>:
 800975c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009760:	1f18      	subs	r0, r3, #4
 8009762:	2b00      	cmp	r3, #0
 8009764:	bfbc      	itt	lt
 8009766:	580b      	ldrlt	r3, [r1, r0]
 8009768:	18c0      	addlt	r0, r0, r3
 800976a:	4770      	bx	lr

0800976c <__retarget_lock_acquire_recursive>:
 800976c:	4770      	bx	lr

0800976e <__retarget_lock_release_recursive>:
 800976e:	4770      	bx	lr

08009770 <round>:
 8009770:	ec51 0b10 	vmov	r0, r1, d0
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800977a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800977e:	2c13      	cmp	r4, #19
 8009780:	ee10 2a10 	vmov	r2, s0
 8009784:	460b      	mov	r3, r1
 8009786:	dc19      	bgt.n	80097bc <round+0x4c>
 8009788:	2c00      	cmp	r4, #0
 800978a:	da09      	bge.n	80097a0 <round+0x30>
 800978c:	3401      	adds	r4, #1
 800978e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009792:	d103      	bne.n	800979c <round+0x2c>
 8009794:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009798:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800979c:	2200      	movs	r2, #0
 800979e:	e028      	b.n	80097f2 <round+0x82>
 80097a0:	4d15      	ldr	r5, [pc, #84]	; (80097f8 <round+0x88>)
 80097a2:	4125      	asrs	r5, r4
 80097a4:	ea01 0605 	and.w	r6, r1, r5
 80097a8:	4332      	orrs	r2, r6
 80097aa:	d00e      	beq.n	80097ca <round+0x5a>
 80097ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80097b0:	fa42 f404 	asr.w	r4, r2, r4
 80097b4:	4423      	add	r3, r4
 80097b6:	ea23 0305 	bic.w	r3, r3, r5
 80097ba:	e7ef      	b.n	800979c <round+0x2c>
 80097bc:	2c33      	cmp	r4, #51	; 0x33
 80097be:	dd07      	ble.n	80097d0 <round+0x60>
 80097c0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80097c4:	d101      	bne.n	80097ca <round+0x5a>
 80097c6:	f7f6 fe8b 	bl	80004e0 <__adddf3>
 80097ca:	ec41 0b10 	vmov	d0, r0, r1
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80097d4:	f04f 35ff 	mov.w	r5, #4294967295
 80097d8:	40f5      	lsrs	r5, r6
 80097da:	4228      	tst	r0, r5
 80097dc:	d0f5      	beq.n	80097ca <round+0x5a>
 80097de:	2101      	movs	r1, #1
 80097e0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80097e4:	fa01 f404 	lsl.w	r4, r1, r4
 80097e8:	1912      	adds	r2, r2, r4
 80097ea:	bf28      	it	cs
 80097ec:	185b      	addcs	r3, r3, r1
 80097ee:	ea22 0205 	bic.w	r2, r2, r5
 80097f2:	4619      	mov	r1, r3
 80097f4:	4610      	mov	r0, r2
 80097f6:	e7e8      	b.n	80097ca <round+0x5a>
 80097f8:	000fffff 	.word	0x000fffff
 80097fc:	00000000 	.word	0x00000000

08009800 <sin>:
 8009800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009802:	ec53 2b10 	vmov	r2, r3, d0
 8009806:	4828      	ldr	r0, [pc, #160]	; (80098a8 <sin+0xa8>)
 8009808:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800980c:	4281      	cmp	r1, r0
 800980e:	dc07      	bgt.n	8009820 <sin+0x20>
 8009810:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80098a0 <sin+0xa0>
 8009814:	2000      	movs	r0, #0
 8009816:	b005      	add	sp, #20
 8009818:	f85d eb04 	ldr.w	lr, [sp], #4
 800981c:	f000 be6c 	b.w	800a4f8 <__kernel_sin>
 8009820:	4822      	ldr	r0, [pc, #136]	; (80098ac <sin+0xac>)
 8009822:	4281      	cmp	r1, r0
 8009824:	dd09      	ble.n	800983a <sin+0x3a>
 8009826:	ee10 0a10 	vmov	r0, s0
 800982a:	4619      	mov	r1, r3
 800982c:	f7f6 fe56 	bl	80004dc <__aeabi_dsub>
 8009830:	ec41 0b10 	vmov	d0, r0, r1
 8009834:	b005      	add	sp, #20
 8009836:	f85d fb04 	ldr.w	pc, [sp], #4
 800983a:	4668      	mov	r0, sp
 800983c:	f000 f838 	bl	80098b0 <__ieee754_rem_pio2>
 8009840:	f000 0003 	and.w	r0, r0, #3
 8009844:	2801      	cmp	r0, #1
 8009846:	d00c      	beq.n	8009862 <sin+0x62>
 8009848:	2802      	cmp	r0, #2
 800984a:	d011      	beq.n	8009870 <sin+0x70>
 800984c:	b9f0      	cbnz	r0, 800988c <sin+0x8c>
 800984e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009852:	ed9d 0b00 	vldr	d0, [sp]
 8009856:	2001      	movs	r0, #1
 8009858:	f000 fe4e 	bl	800a4f8 <__kernel_sin>
 800985c:	ec51 0b10 	vmov	r0, r1, d0
 8009860:	e7e6      	b.n	8009830 <sin+0x30>
 8009862:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009866:	ed9d 0b00 	vldr	d0, [sp]
 800986a:	f000 fa2d 	bl	8009cc8 <__kernel_cos>
 800986e:	e7f5      	b.n	800985c <sin+0x5c>
 8009870:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009874:	ed9d 0b00 	vldr	d0, [sp]
 8009878:	2001      	movs	r0, #1
 800987a:	f000 fe3d 	bl	800a4f8 <__kernel_sin>
 800987e:	ec53 2b10 	vmov	r2, r3, d0
 8009882:	ee10 0a10 	vmov	r0, s0
 8009886:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800988a:	e7d1      	b.n	8009830 <sin+0x30>
 800988c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009890:	ed9d 0b00 	vldr	d0, [sp]
 8009894:	f000 fa18 	bl	8009cc8 <__kernel_cos>
 8009898:	e7f1      	b.n	800987e <sin+0x7e>
 800989a:	bf00      	nop
 800989c:	f3af 8000 	nop.w
	...
 80098a8:	3fe921fb 	.word	0x3fe921fb
 80098ac:	7fefffff 	.word	0x7fefffff

080098b0 <__ieee754_rem_pio2>:
 80098b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b4:	ed2d 8b02 	vpush	{d8}
 80098b8:	ec55 4b10 	vmov	r4, r5, d0
 80098bc:	4bca      	ldr	r3, [pc, #808]	; (8009be8 <__ieee754_rem_pio2+0x338>)
 80098be:	b08b      	sub	sp, #44	; 0x2c
 80098c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80098c4:	4598      	cmp	r8, r3
 80098c6:	4682      	mov	sl, r0
 80098c8:	9502      	str	r5, [sp, #8]
 80098ca:	dc08      	bgt.n	80098de <__ieee754_rem_pio2+0x2e>
 80098cc:	2200      	movs	r2, #0
 80098ce:	2300      	movs	r3, #0
 80098d0:	ed80 0b00 	vstr	d0, [r0]
 80098d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80098d8:	f04f 0b00 	mov.w	fp, #0
 80098dc:	e028      	b.n	8009930 <__ieee754_rem_pio2+0x80>
 80098de:	4bc3      	ldr	r3, [pc, #780]	; (8009bec <__ieee754_rem_pio2+0x33c>)
 80098e0:	4598      	cmp	r8, r3
 80098e2:	dc78      	bgt.n	80099d6 <__ieee754_rem_pio2+0x126>
 80098e4:	9b02      	ldr	r3, [sp, #8]
 80098e6:	4ec2      	ldr	r6, [pc, #776]	; (8009bf0 <__ieee754_rem_pio2+0x340>)
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	ee10 0a10 	vmov	r0, s0
 80098ee:	a3b0      	add	r3, pc, #704	; (adr r3, 8009bb0 <__ieee754_rem_pio2+0x300>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	4629      	mov	r1, r5
 80098f6:	dd39      	ble.n	800996c <__ieee754_rem_pio2+0xbc>
 80098f8:	f7f6 fdf0 	bl	80004dc <__aeabi_dsub>
 80098fc:	45b0      	cmp	r8, r6
 80098fe:	4604      	mov	r4, r0
 8009900:	460d      	mov	r5, r1
 8009902:	d01b      	beq.n	800993c <__ieee754_rem_pio2+0x8c>
 8009904:	a3ac      	add	r3, pc, #688	; (adr r3, 8009bb8 <__ieee754_rem_pio2+0x308>)
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	f7f6 fde7 	bl	80004dc <__aeabi_dsub>
 800990e:	4602      	mov	r2, r0
 8009910:	460b      	mov	r3, r1
 8009912:	e9ca 2300 	strd	r2, r3, [sl]
 8009916:	4620      	mov	r0, r4
 8009918:	4629      	mov	r1, r5
 800991a:	f7f6 fddf 	bl	80004dc <__aeabi_dsub>
 800991e:	a3a6      	add	r3, pc, #664	; (adr r3, 8009bb8 <__ieee754_rem_pio2+0x308>)
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	f7f6 fdda 	bl	80004dc <__aeabi_dsub>
 8009928:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800992c:	f04f 0b01 	mov.w	fp, #1
 8009930:	4658      	mov	r0, fp
 8009932:	b00b      	add	sp, #44	; 0x2c
 8009934:	ecbd 8b02 	vpop	{d8}
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	a3a0      	add	r3, pc, #640	; (adr r3, 8009bc0 <__ieee754_rem_pio2+0x310>)
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	f7f6 fdcb 	bl	80004dc <__aeabi_dsub>
 8009946:	a3a0      	add	r3, pc, #640	; (adr r3, 8009bc8 <__ieee754_rem_pio2+0x318>)
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	4604      	mov	r4, r0
 800994e:	460d      	mov	r5, r1
 8009950:	f7f6 fdc4 	bl	80004dc <__aeabi_dsub>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	e9ca 2300 	strd	r2, r3, [sl]
 800995c:	4620      	mov	r0, r4
 800995e:	4629      	mov	r1, r5
 8009960:	f7f6 fdbc 	bl	80004dc <__aeabi_dsub>
 8009964:	a398      	add	r3, pc, #608	; (adr r3, 8009bc8 <__ieee754_rem_pio2+0x318>)
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	e7db      	b.n	8009924 <__ieee754_rem_pio2+0x74>
 800996c:	f7f6 fdb8 	bl	80004e0 <__adddf3>
 8009970:	45b0      	cmp	r8, r6
 8009972:	4604      	mov	r4, r0
 8009974:	460d      	mov	r5, r1
 8009976:	d016      	beq.n	80099a6 <__ieee754_rem_pio2+0xf6>
 8009978:	a38f      	add	r3, pc, #572	; (adr r3, 8009bb8 <__ieee754_rem_pio2+0x308>)
 800997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997e:	f7f6 fdaf 	bl	80004e0 <__adddf3>
 8009982:	4602      	mov	r2, r0
 8009984:	460b      	mov	r3, r1
 8009986:	e9ca 2300 	strd	r2, r3, [sl]
 800998a:	4620      	mov	r0, r4
 800998c:	4629      	mov	r1, r5
 800998e:	f7f6 fda5 	bl	80004dc <__aeabi_dsub>
 8009992:	a389      	add	r3, pc, #548	; (adr r3, 8009bb8 <__ieee754_rem_pio2+0x308>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f7f6 fda2 	bl	80004e0 <__adddf3>
 800999c:	f04f 3bff 	mov.w	fp, #4294967295
 80099a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80099a4:	e7c4      	b.n	8009930 <__ieee754_rem_pio2+0x80>
 80099a6:	a386      	add	r3, pc, #536	; (adr r3, 8009bc0 <__ieee754_rem_pio2+0x310>)
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	f7f6 fd98 	bl	80004e0 <__adddf3>
 80099b0:	a385      	add	r3, pc, #532	; (adr r3, 8009bc8 <__ieee754_rem_pio2+0x318>)
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	4604      	mov	r4, r0
 80099b8:	460d      	mov	r5, r1
 80099ba:	f7f6 fd91 	bl	80004e0 <__adddf3>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	e9ca 2300 	strd	r2, r3, [sl]
 80099c6:	4620      	mov	r0, r4
 80099c8:	4629      	mov	r1, r5
 80099ca:	f7f6 fd87 	bl	80004dc <__aeabi_dsub>
 80099ce:	a37e      	add	r3, pc, #504	; (adr r3, 8009bc8 <__ieee754_rem_pio2+0x318>)
 80099d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d4:	e7e0      	b.n	8009998 <__ieee754_rem_pio2+0xe8>
 80099d6:	4b87      	ldr	r3, [pc, #540]	; (8009bf4 <__ieee754_rem_pio2+0x344>)
 80099d8:	4598      	cmp	r8, r3
 80099da:	f300 80d9 	bgt.w	8009b90 <__ieee754_rem_pio2+0x2e0>
 80099de:	f000 fe49 	bl	800a674 <fabs>
 80099e2:	ec55 4b10 	vmov	r4, r5, d0
 80099e6:	ee10 0a10 	vmov	r0, s0
 80099ea:	a379      	add	r3, pc, #484	; (adr r3, 8009bd0 <__ieee754_rem_pio2+0x320>)
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7f6 fc45 	bl	8000280 <__aeabi_dmul>
 80099f6:	4b80      	ldr	r3, [pc, #512]	; (8009bf8 <__ieee754_rem_pio2+0x348>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	f7f6 fd71 	bl	80004e0 <__adddf3>
 80099fe:	f7f6 ffad 	bl	800095c <__aeabi_d2iz>
 8009a02:	4683      	mov	fp, r0
 8009a04:	f7f6 feb8 	bl	8000778 <__aeabi_i2d>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	ec43 2b18 	vmov	d8, r2, r3
 8009a10:	a367      	add	r3, pc, #412	; (adr r3, 8009bb0 <__ieee754_rem_pio2+0x300>)
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	f7f6 fc33 	bl	8000280 <__aeabi_dmul>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4620      	mov	r0, r4
 8009a20:	4629      	mov	r1, r5
 8009a22:	f7f6 fd5b 	bl	80004dc <__aeabi_dsub>
 8009a26:	a364      	add	r3, pc, #400	; (adr r3, 8009bb8 <__ieee754_rem_pio2+0x308>)
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	460f      	mov	r7, r1
 8009a30:	ec51 0b18 	vmov	r0, r1, d8
 8009a34:	f7f6 fc24 	bl	8000280 <__aeabi_dmul>
 8009a38:	f1bb 0f1f 	cmp.w	fp, #31
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	460d      	mov	r5, r1
 8009a40:	dc0d      	bgt.n	8009a5e <__ieee754_rem_pio2+0x1ae>
 8009a42:	4b6e      	ldr	r3, [pc, #440]	; (8009bfc <__ieee754_rem_pio2+0x34c>)
 8009a44:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a4c:	4543      	cmp	r3, r8
 8009a4e:	d006      	beq.n	8009a5e <__ieee754_rem_pio2+0x1ae>
 8009a50:	4622      	mov	r2, r4
 8009a52:	462b      	mov	r3, r5
 8009a54:	4630      	mov	r0, r6
 8009a56:	4639      	mov	r1, r7
 8009a58:	f7f6 fd40 	bl	80004dc <__aeabi_dsub>
 8009a5c:	e00f      	b.n	8009a7e <__ieee754_rem_pio2+0x1ce>
 8009a5e:	462b      	mov	r3, r5
 8009a60:	4622      	mov	r2, r4
 8009a62:	4630      	mov	r0, r6
 8009a64:	4639      	mov	r1, r7
 8009a66:	f7f6 fd39 	bl	80004dc <__aeabi_dsub>
 8009a6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009a6e:	9303      	str	r3, [sp, #12]
 8009a70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009a74:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009a78:	f1b8 0f10 	cmp.w	r8, #16
 8009a7c:	dc02      	bgt.n	8009a84 <__ieee754_rem_pio2+0x1d4>
 8009a7e:	e9ca 0100 	strd	r0, r1, [sl]
 8009a82:	e039      	b.n	8009af8 <__ieee754_rem_pio2+0x248>
 8009a84:	a34e      	add	r3, pc, #312	; (adr r3, 8009bc0 <__ieee754_rem_pio2+0x310>)
 8009a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8a:	ec51 0b18 	vmov	r0, r1, d8
 8009a8e:	f7f6 fbf7 	bl	8000280 <__aeabi_dmul>
 8009a92:	4604      	mov	r4, r0
 8009a94:	460d      	mov	r5, r1
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	f7f6 fd1d 	bl	80004dc <__aeabi_dsub>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4680      	mov	r8, r0
 8009aa8:	4689      	mov	r9, r1
 8009aaa:	4630      	mov	r0, r6
 8009aac:	4639      	mov	r1, r7
 8009aae:	f7f6 fd15 	bl	80004dc <__aeabi_dsub>
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	462b      	mov	r3, r5
 8009ab6:	f7f6 fd11 	bl	80004dc <__aeabi_dsub>
 8009aba:	a343      	add	r3, pc, #268	; (adr r3, 8009bc8 <__ieee754_rem_pio2+0x318>)
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	460d      	mov	r5, r1
 8009ac4:	ec51 0b18 	vmov	r0, r1, d8
 8009ac8:	f7f6 fbda 	bl	8000280 <__aeabi_dmul>
 8009acc:	4622      	mov	r2, r4
 8009ace:	462b      	mov	r3, r5
 8009ad0:	f7f6 fd04 	bl	80004dc <__aeabi_dsub>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	4604      	mov	r4, r0
 8009ada:	460d      	mov	r5, r1
 8009adc:	4640      	mov	r0, r8
 8009ade:	4649      	mov	r1, r9
 8009ae0:	f7f6 fcfc 	bl	80004dc <__aeabi_dsub>
 8009ae4:	9a03      	ldr	r2, [sp, #12]
 8009ae6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	2b31      	cmp	r3, #49	; 0x31
 8009aee:	dc24      	bgt.n	8009b3a <__ieee754_rem_pio2+0x28a>
 8009af0:	e9ca 0100 	strd	r0, r1, [sl]
 8009af4:	4646      	mov	r6, r8
 8009af6:	464f      	mov	r7, r9
 8009af8:	e9da 8900 	ldrd	r8, r9, [sl]
 8009afc:	4630      	mov	r0, r6
 8009afe:	4642      	mov	r2, r8
 8009b00:	464b      	mov	r3, r9
 8009b02:	4639      	mov	r1, r7
 8009b04:	f7f6 fcea 	bl	80004dc <__aeabi_dsub>
 8009b08:	462b      	mov	r3, r5
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	f7f6 fce6 	bl	80004dc <__aeabi_dsub>
 8009b10:	9b02      	ldr	r3, [sp, #8]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009b18:	f6bf af0a 	bge.w	8009930 <__ieee754_rem_pio2+0x80>
 8009b1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009b20:	f8ca 3004 	str.w	r3, [sl, #4]
 8009b24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b28:	f8ca 8000 	str.w	r8, [sl]
 8009b2c:	f8ca 0008 	str.w	r0, [sl, #8]
 8009b30:	f8ca 300c 	str.w	r3, [sl, #12]
 8009b34:	f1cb 0b00 	rsb	fp, fp, #0
 8009b38:	e6fa      	b.n	8009930 <__ieee754_rem_pio2+0x80>
 8009b3a:	a327      	add	r3, pc, #156	; (adr r3, 8009bd8 <__ieee754_rem_pio2+0x328>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	ec51 0b18 	vmov	r0, r1, d8
 8009b44:	f7f6 fb9c 	bl	8000280 <__aeabi_dmul>
 8009b48:	4604      	mov	r4, r0
 8009b4a:	460d      	mov	r5, r1
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4640      	mov	r0, r8
 8009b52:	4649      	mov	r1, r9
 8009b54:	f7f6 fcc2 	bl	80004dc <__aeabi_dsub>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	460f      	mov	r7, r1
 8009b60:	4640      	mov	r0, r8
 8009b62:	4649      	mov	r1, r9
 8009b64:	f7f6 fcba 	bl	80004dc <__aeabi_dsub>
 8009b68:	4622      	mov	r2, r4
 8009b6a:	462b      	mov	r3, r5
 8009b6c:	f7f6 fcb6 	bl	80004dc <__aeabi_dsub>
 8009b70:	a31b      	add	r3, pc, #108	; (adr r3, 8009be0 <__ieee754_rem_pio2+0x330>)
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	4604      	mov	r4, r0
 8009b78:	460d      	mov	r5, r1
 8009b7a:	ec51 0b18 	vmov	r0, r1, d8
 8009b7e:	f7f6 fb7f 	bl	8000280 <__aeabi_dmul>
 8009b82:	4622      	mov	r2, r4
 8009b84:	462b      	mov	r3, r5
 8009b86:	f7f6 fca9 	bl	80004dc <__aeabi_dsub>
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	460d      	mov	r5, r1
 8009b8e:	e75f      	b.n	8009a50 <__ieee754_rem_pio2+0x1a0>
 8009b90:	4b1b      	ldr	r3, [pc, #108]	; (8009c00 <__ieee754_rem_pio2+0x350>)
 8009b92:	4598      	cmp	r8, r3
 8009b94:	dd36      	ble.n	8009c04 <__ieee754_rem_pio2+0x354>
 8009b96:	ee10 2a10 	vmov	r2, s0
 8009b9a:	462b      	mov	r3, r5
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	f7f6 fc9c 	bl	80004dc <__aeabi_dsub>
 8009ba4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009ba8:	e9ca 0100 	strd	r0, r1, [sl]
 8009bac:	e694      	b.n	80098d8 <__ieee754_rem_pio2+0x28>
 8009bae:	bf00      	nop
 8009bb0:	54400000 	.word	0x54400000
 8009bb4:	3ff921fb 	.word	0x3ff921fb
 8009bb8:	1a626331 	.word	0x1a626331
 8009bbc:	3dd0b461 	.word	0x3dd0b461
 8009bc0:	1a600000 	.word	0x1a600000
 8009bc4:	3dd0b461 	.word	0x3dd0b461
 8009bc8:	2e037073 	.word	0x2e037073
 8009bcc:	3ba3198a 	.word	0x3ba3198a
 8009bd0:	6dc9c883 	.word	0x6dc9c883
 8009bd4:	3fe45f30 	.word	0x3fe45f30
 8009bd8:	2e000000 	.word	0x2e000000
 8009bdc:	3ba3198a 	.word	0x3ba3198a
 8009be0:	252049c1 	.word	0x252049c1
 8009be4:	397b839a 	.word	0x397b839a
 8009be8:	3fe921fb 	.word	0x3fe921fb
 8009bec:	4002d97b 	.word	0x4002d97b
 8009bf0:	3ff921fb 	.word	0x3ff921fb
 8009bf4:	413921fb 	.word	0x413921fb
 8009bf8:	3fe00000 	.word	0x3fe00000
 8009bfc:	0800aa38 	.word	0x0800aa38
 8009c00:	7fefffff 	.word	0x7fefffff
 8009c04:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009c08:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009c0c:	ee10 0a10 	vmov	r0, s0
 8009c10:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009c14:	ee10 6a10 	vmov	r6, s0
 8009c18:	460f      	mov	r7, r1
 8009c1a:	f7f6 fe9f 	bl	800095c <__aeabi_d2iz>
 8009c1e:	f7f6 fdab 	bl	8000778 <__aeabi_i2d>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4630      	mov	r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c2e:	f7f6 fc55 	bl	80004dc <__aeabi_dsub>
 8009c32:	4b23      	ldr	r3, [pc, #140]	; (8009cc0 <__ieee754_rem_pio2+0x410>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	f7f6 fb23 	bl	8000280 <__aeabi_dmul>
 8009c3a:	460f      	mov	r7, r1
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	f7f6 fe8d 	bl	800095c <__aeabi_d2iz>
 8009c42:	f7f6 fd99 	bl	8000778 <__aeabi_i2d>
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c52:	f7f6 fc43 	bl	80004dc <__aeabi_dsub>
 8009c56:	4b1a      	ldr	r3, [pc, #104]	; (8009cc0 <__ieee754_rem_pio2+0x410>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f7f6 fb11 	bl	8000280 <__aeabi_dmul>
 8009c5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c62:	ad04      	add	r5, sp, #16
 8009c64:	f04f 0803 	mov.w	r8, #3
 8009c68:	46a9      	mov	r9, r5
 8009c6a:	2600      	movs	r6, #0
 8009c6c:	2700      	movs	r7, #0
 8009c6e:	4632      	mov	r2, r6
 8009c70:	463b      	mov	r3, r7
 8009c72:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009c76:	46c3      	mov	fp, r8
 8009c78:	3d08      	subs	r5, #8
 8009c7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c7e:	f7f6 fe3b 	bl	80008f8 <__aeabi_dcmpeq>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d1f3      	bne.n	8009c6e <__ieee754_rem_pio2+0x3be>
 8009c86:	4b0f      	ldr	r3, [pc, #60]	; (8009cc4 <__ieee754_rem_pio2+0x414>)
 8009c88:	9301      	str	r3, [sp, #4]
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	4622      	mov	r2, r4
 8009c90:	465b      	mov	r3, fp
 8009c92:	4651      	mov	r1, sl
 8009c94:	4648      	mov	r0, r9
 8009c96:	f000 f8df 	bl	8009e58 <__kernel_rem_pio2>
 8009c9a:	9b02      	ldr	r3, [sp, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	4683      	mov	fp, r0
 8009ca0:	f6bf ae46 	bge.w	8009930 <__ieee754_rem_pio2+0x80>
 8009ca4:	e9da 2100 	ldrd	r2, r1, [sl]
 8009ca8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cac:	e9ca 2300 	strd	r2, r3, [sl]
 8009cb0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009cb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cb8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009cbc:	e73a      	b.n	8009b34 <__ieee754_rem_pio2+0x284>
 8009cbe:	bf00      	nop
 8009cc0:	41700000 	.word	0x41700000
 8009cc4:	0800aab8 	.word	0x0800aab8

08009cc8 <__kernel_cos>:
 8009cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ccc:	ec57 6b10 	vmov	r6, r7, d0
 8009cd0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009cd4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009cd8:	ed8d 1b00 	vstr	d1, [sp]
 8009cdc:	da07      	bge.n	8009cee <__kernel_cos+0x26>
 8009cde:	ee10 0a10 	vmov	r0, s0
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	f7f6 fe3a 	bl	800095c <__aeabi_d2iz>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	f000 8088 	beq.w	8009dfe <__kernel_cos+0x136>
 8009cee:	4632      	mov	r2, r6
 8009cf0:	463b      	mov	r3, r7
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	4639      	mov	r1, r7
 8009cf6:	f7f6 fac3 	bl	8000280 <__aeabi_dmul>
 8009cfa:	4b51      	ldr	r3, [pc, #324]	; (8009e40 <__kernel_cos+0x178>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	4604      	mov	r4, r0
 8009d00:	460d      	mov	r5, r1
 8009d02:	f7f6 fabd 	bl	8000280 <__aeabi_dmul>
 8009d06:	a340      	add	r3, pc, #256	; (adr r3, 8009e08 <__kernel_cos+0x140>)
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	4682      	mov	sl, r0
 8009d0e:	468b      	mov	fp, r1
 8009d10:	4620      	mov	r0, r4
 8009d12:	4629      	mov	r1, r5
 8009d14:	f7f6 fab4 	bl	8000280 <__aeabi_dmul>
 8009d18:	a33d      	add	r3, pc, #244	; (adr r3, 8009e10 <__kernel_cos+0x148>)
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	f7f6 fbdf 	bl	80004e0 <__adddf3>
 8009d22:	4622      	mov	r2, r4
 8009d24:	462b      	mov	r3, r5
 8009d26:	f7f6 faab 	bl	8000280 <__aeabi_dmul>
 8009d2a:	a33b      	add	r3, pc, #236	; (adr r3, 8009e18 <__kernel_cos+0x150>)
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	f7f6 fbd4 	bl	80004dc <__aeabi_dsub>
 8009d34:	4622      	mov	r2, r4
 8009d36:	462b      	mov	r3, r5
 8009d38:	f7f6 faa2 	bl	8000280 <__aeabi_dmul>
 8009d3c:	a338      	add	r3, pc, #224	; (adr r3, 8009e20 <__kernel_cos+0x158>)
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	f7f6 fbcd 	bl	80004e0 <__adddf3>
 8009d46:	4622      	mov	r2, r4
 8009d48:	462b      	mov	r3, r5
 8009d4a:	f7f6 fa99 	bl	8000280 <__aeabi_dmul>
 8009d4e:	a336      	add	r3, pc, #216	; (adr r3, 8009e28 <__kernel_cos+0x160>)
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	f7f6 fbc2 	bl	80004dc <__aeabi_dsub>
 8009d58:	4622      	mov	r2, r4
 8009d5a:	462b      	mov	r3, r5
 8009d5c:	f7f6 fa90 	bl	8000280 <__aeabi_dmul>
 8009d60:	a333      	add	r3, pc, #204	; (adr r3, 8009e30 <__kernel_cos+0x168>)
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	f7f6 fbbb 	bl	80004e0 <__adddf3>
 8009d6a:	4622      	mov	r2, r4
 8009d6c:	462b      	mov	r3, r5
 8009d6e:	f7f6 fa87 	bl	8000280 <__aeabi_dmul>
 8009d72:	4622      	mov	r2, r4
 8009d74:	462b      	mov	r3, r5
 8009d76:	f7f6 fa83 	bl	8000280 <__aeabi_dmul>
 8009d7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d7e:	4604      	mov	r4, r0
 8009d80:	460d      	mov	r5, r1
 8009d82:	4630      	mov	r0, r6
 8009d84:	4639      	mov	r1, r7
 8009d86:	f7f6 fa7b 	bl	8000280 <__aeabi_dmul>
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	4629      	mov	r1, r5
 8009d90:	4620      	mov	r0, r4
 8009d92:	f7f6 fba3 	bl	80004dc <__aeabi_dsub>
 8009d96:	4b2b      	ldr	r3, [pc, #172]	; (8009e44 <__kernel_cos+0x17c>)
 8009d98:	4598      	cmp	r8, r3
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	dc10      	bgt.n	8009dc2 <__kernel_cos+0xfa>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4650      	mov	r0, sl
 8009da6:	4659      	mov	r1, fp
 8009da8:	f7f6 fb98 	bl	80004dc <__aeabi_dsub>
 8009dac:	460b      	mov	r3, r1
 8009dae:	4926      	ldr	r1, [pc, #152]	; (8009e48 <__kernel_cos+0x180>)
 8009db0:	4602      	mov	r2, r0
 8009db2:	2000      	movs	r0, #0
 8009db4:	f7f6 fb92 	bl	80004dc <__aeabi_dsub>
 8009db8:	ec41 0b10 	vmov	d0, r0, r1
 8009dbc:	b003      	add	sp, #12
 8009dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc2:	4b22      	ldr	r3, [pc, #136]	; (8009e4c <__kernel_cos+0x184>)
 8009dc4:	4920      	ldr	r1, [pc, #128]	; (8009e48 <__kernel_cos+0x180>)
 8009dc6:	4598      	cmp	r8, r3
 8009dc8:	bfcc      	ite	gt
 8009dca:	4d21      	ldrgt	r5, [pc, #132]	; (8009e50 <__kernel_cos+0x188>)
 8009dcc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009dd0:	2400      	movs	r4, #0
 8009dd2:	4622      	mov	r2, r4
 8009dd4:	462b      	mov	r3, r5
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	f7f6 fb80 	bl	80004dc <__aeabi_dsub>
 8009ddc:	4622      	mov	r2, r4
 8009dde:	4680      	mov	r8, r0
 8009de0:	4689      	mov	r9, r1
 8009de2:	462b      	mov	r3, r5
 8009de4:	4650      	mov	r0, sl
 8009de6:	4659      	mov	r1, fp
 8009de8:	f7f6 fb78 	bl	80004dc <__aeabi_dsub>
 8009dec:	4632      	mov	r2, r6
 8009dee:	463b      	mov	r3, r7
 8009df0:	f7f6 fb74 	bl	80004dc <__aeabi_dsub>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4640      	mov	r0, r8
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	e7da      	b.n	8009db4 <__kernel_cos+0xec>
 8009dfe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009e38 <__kernel_cos+0x170>
 8009e02:	e7db      	b.n	8009dbc <__kernel_cos+0xf4>
 8009e04:	f3af 8000 	nop.w
 8009e08:	be8838d4 	.word	0xbe8838d4
 8009e0c:	bda8fae9 	.word	0xbda8fae9
 8009e10:	bdb4b1c4 	.word	0xbdb4b1c4
 8009e14:	3e21ee9e 	.word	0x3e21ee9e
 8009e18:	809c52ad 	.word	0x809c52ad
 8009e1c:	3e927e4f 	.word	0x3e927e4f
 8009e20:	19cb1590 	.word	0x19cb1590
 8009e24:	3efa01a0 	.word	0x3efa01a0
 8009e28:	16c15177 	.word	0x16c15177
 8009e2c:	3f56c16c 	.word	0x3f56c16c
 8009e30:	5555554c 	.word	0x5555554c
 8009e34:	3fa55555 	.word	0x3fa55555
 8009e38:	00000000 	.word	0x00000000
 8009e3c:	3ff00000 	.word	0x3ff00000
 8009e40:	3fe00000 	.word	0x3fe00000
 8009e44:	3fd33332 	.word	0x3fd33332
 8009e48:	3ff00000 	.word	0x3ff00000
 8009e4c:	3fe90000 	.word	0x3fe90000
 8009e50:	3fd20000 	.word	0x3fd20000
 8009e54:	00000000 	.word	0x00000000

08009e58 <__kernel_rem_pio2>:
 8009e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	ed2d 8b02 	vpush	{d8}
 8009e60:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009e64:	f112 0f14 	cmn.w	r2, #20
 8009e68:	9308      	str	r3, [sp, #32]
 8009e6a:	9101      	str	r1, [sp, #4]
 8009e6c:	4bc4      	ldr	r3, [pc, #784]	; (800a180 <__kernel_rem_pio2+0x328>)
 8009e6e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009e70:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e76:	9302      	str	r3, [sp, #8]
 8009e78:	9b08      	ldr	r3, [sp, #32]
 8009e7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e7e:	bfa8      	it	ge
 8009e80:	1ed4      	subge	r4, r2, #3
 8009e82:	9306      	str	r3, [sp, #24]
 8009e84:	bfb2      	itee	lt
 8009e86:	2400      	movlt	r4, #0
 8009e88:	2318      	movge	r3, #24
 8009e8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8009e8e:	f06f 0317 	mvn.w	r3, #23
 8009e92:	fb04 3303 	mla	r3, r4, r3, r3
 8009e96:	eb03 0a02 	add.w	sl, r3, r2
 8009e9a:	9b02      	ldr	r3, [sp, #8]
 8009e9c:	9a06      	ldr	r2, [sp, #24]
 8009e9e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a170 <__kernel_rem_pio2+0x318>
 8009ea2:	eb03 0802 	add.w	r8, r3, r2
 8009ea6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009ea8:	1aa7      	subs	r7, r4, r2
 8009eaa:	ae22      	add	r6, sp, #136	; 0x88
 8009eac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009eb0:	2500      	movs	r5, #0
 8009eb2:	4545      	cmp	r5, r8
 8009eb4:	dd13      	ble.n	8009ede <__kernel_rem_pio2+0x86>
 8009eb6:	9b08      	ldr	r3, [sp, #32]
 8009eb8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a170 <__kernel_rem_pio2+0x318>
 8009ebc:	aa22      	add	r2, sp, #136	; 0x88
 8009ebe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009ec2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009ec6:	f04f 0800 	mov.w	r8, #0
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	4598      	cmp	r8, r3
 8009ece:	dc2f      	bgt.n	8009f30 <__kernel_rem_pio2+0xd8>
 8009ed0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009ed4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009ed8:	462f      	mov	r7, r5
 8009eda:	2600      	movs	r6, #0
 8009edc:	e01b      	b.n	8009f16 <__kernel_rem_pio2+0xbe>
 8009ede:	42ef      	cmn	r7, r5
 8009ee0:	d407      	bmi.n	8009ef2 <__kernel_rem_pio2+0x9a>
 8009ee2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009ee6:	f7f6 fc47 	bl	8000778 <__aeabi_i2d>
 8009eea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009eee:	3501      	adds	r5, #1
 8009ef0:	e7df      	b.n	8009eb2 <__kernel_rem_pio2+0x5a>
 8009ef2:	ec51 0b18 	vmov	r0, r1, d8
 8009ef6:	e7f8      	b.n	8009eea <__kernel_rem_pio2+0x92>
 8009ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009efc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009f00:	f7f6 f9be 	bl	8000280 <__aeabi_dmul>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f0c:	f7f6 fae8 	bl	80004e0 <__adddf3>
 8009f10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f14:	3601      	adds	r6, #1
 8009f16:	9b06      	ldr	r3, [sp, #24]
 8009f18:	429e      	cmp	r6, r3
 8009f1a:	f1a7 0708 	sub.w	r7, r7, #8
 8009f1e:	ddeb      	ble.n	8009ef8 <__kernel_rem_pio2+0xa0>
 8009f20:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009f24:	f108 0801 	add.w	r8, r8, #1
 8009f28:	ecab 7b02 	vstmia	fp!, {d7}
 8009f2c:	3508      	adds	r5, #8
 8009f2e:	e7cc      	b.n	8009eca <__kernel_rem_pio2+0x72>
 8009f30:	9b02      	ldr	r3, [sp, #8]
 8009f32:	aa0e      	add	r2, sp, #56	; 0x38
 8009f34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f38:	930d      	str	r3, [sp, #52]	; 0x34
 8009f3a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009f3c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009f40:	9c02      	ldr	r4, [sp, #8]
 8009f42:	930c      	str	r3, [sp, #48]	; 0x30
 8009f44:	00e3      	lsls	r3, r4, #3
 8009f46:	930a      	str	r3, [sp, #40]	; 0x28
 8009f48:	ab9a      	add	r3, sp, #616	; 0x268
 8009f4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f4e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009f52:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8009f56:	ab72      	add	r3, sp, #456	; 0x1c8
 8009f58:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009f5c:	46c3      	mov	fp, r8
 8009f5e:	46a1      	mov	r9, r4
 8009f60:	f1b9 0f00 	cmp.w	r9, #0
 8009f64:	f1a5 0508 	sub.w	r5, r5, #8
 8009f68:	dc77      	bgt.n	800a05a <__kernel_rem_pio2+0x202>
 8009f6a:	ec47 6b10 	vmov	d0, r6, r7
 8009f6e:	4650      	mov	r0, sl
 8009f70:	f000 fc0a 	bl	800a788 <scalbn>
 8009f74:	ec57 6b10 	vmov	r6, r7, d0
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009f7e:	ee10 0a10 	vmov	r0, s0
 8009f82:	4639      	mov	r1, r7
 8009f84:	f7f6 f97c 	bl	8000280 <__aeabi_dmul>
 8009f88:	ec41 0b10 	vmov	d0, r0, r1
 8009f8c:	f000 fb7c 	bl	800a688 <floor>
 8009f90:	4b7c      	ldr	r3, [pc, #496]	; (800a184 <__kernel_rem_pio2+0x32c>)
 8009f92:	ec51 0b10 	vmov	r0, r1, d0
 8009f96:	2200      	movs	r2, #0
 8009f98:	f7f6 f972 	bl	8000280 <__aeabi_dmul>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	4639      	mov	r1, r7
 8009fa4:	f7f6 fa9a 	bl	80004dc <__aeabi_dsub>
 8009fa8:	460f      	mov	r7, r1
 8009faa:	4606      	mov	r6, r0
 8009fac:	f7f6 fcd6 	bl	800095c <__aeabi_d2iz>
 8009fb0:	9004      	str	r0, [sp, #16]
 8009fb2:	f7f6 fbe1 	bl	8000778 <__aeabi_i2d>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4630      	mov	r0, r6
 8009fbc:	4639      	mov	r1, r7
 8009fbe:	f7f6 fa8d 	bl	80004dc <__aeabi_dsub>
 8009fc2:	f1ba 0f00 	cmp.w	sl, #0
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	460f      	mov	r7, r1
 8009fca:	dd6d      	ble.n	800a0a8 <__kernel_rem_pio2+0x250>
 8009fcc:	1e62      	subs	r2, r4, #1
 8009fce:	ab0e      	add	r3, sp, #56	; 0x38
 8009fd0:	9d04      	ldr	r5, [sp, #16]
 8009fd2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009fd6:	f1ca 0118 	rsb	r1, sl, #24
 8009fda:	fa40 f301 	asr.w	r3, r0, r1
 8009fde:	441d      	add	r5, r3
 8009fe0:	408b      	lsls	r3, r1
 8009fe2:	1ac0      	subs	r0, r0, r3
 8009fe4:	ab0e      	add	r3, sp, #56	; 0x38
 8009fe6:	9504      	str	r5, [sp, #16]
 8009fe8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009fec:	f1ca 0317 	rsb	r3, sl, #23
 8009ff0:	fa40 fb03 	asr.w	fp, r0, r3
 8009ff4:	f1bb 0f00 	cmp.w	fp, #0
 8009ff8:	dd65      	ble.n	800a0c6 <__kernel_rem_pio2+0x26e>
 8009ffa:	9b04      	ldr	r3, [sp, #16]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	3301      	adds	r3, #1
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	4615      	mov	r5, r2
 800a004:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a008:	4294      	cmp	r4, r2
 800a00a:	f300 809c 	bgt.w	800a146 <__kernel_rem_pio2+0x2ee>
 800a00e:	f1ba 0f00 	cmp.w	sl, #0
 800a012:	dd07      	ble.n	800a024 <__kernel_rem_pio2+0x1cc>
 800a014:	f1ba 0f01 	cmp.w	sl, #1
 800a018:	f000 80c0 	beq.w	800a19c <__kernel_rem_pio2+0x344>
 800a01c:	f1ba 0f02 	cmp.w	sl, #2
 800a020:	f000 80c6 	beq.w	800a1b0 <__kernel_rem_pio2+0x358>
 800a024:	f1bb 0f02 	cmp.w	fp, #2
 800a028:	d14d      	bne.n	800a0c6 <__kernel_rem_pio2+0x26e>
 800a02a:	4632      	mov	r2, r6
 800a02c:	463b      	mov	r3, r7
 800a02e:	4956      	ldr	r1, [pc, #344]	; (800a188 <__kernel_rem_pio2+0x330>)
 800a030:	2000      	movs	r0, #0
 800a032:	f7f6 fa53 	bl	80004dc <__aeabi_dsub>
 800a036:	4606      	mov	r6, r0
 800a038:	460f      	mov	r7, r1
 800a03a:	2d00      	cmp	r5, #0
 800a03c:	d043      	beq.n	800a0c6 <__kernel_rem_pio2+0x26e>
 800a03e:	4650      	mov	r0, sl
 800a040:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a178 <__kernel_rem_pio2+0x320>
 800a044:	f000 fba0 	bl	800a788 <scalbn>
 800a048:	4630      	mov	r0, r6
 800a04a:	4639      	mov	r1, r7
 800a04c:	ec53 2b10 	vmov	r2, r3, d0
 800a050:	f7f6 fa44 	bl	80004dc <__aeabi_dsub>
 800a054:	4606      	mov	r6, r0
 800a056:	460f      	mov	r7, r1
 800a058:	e035      	b.n	800a0c6 <__kernel_rem_pio2+0x26e>
 800a05a:	4b4c      	ldr	r3, [pc, #304]	; (800a18c <__kernel_rem_pio2+0x334>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	4630      	mov	r0, r6
 800a060:	4639      	mov	r1, r7
 800a062:	f7f6 f90d 	bl	8000280 <__aeabi_dmul>
 800a066:	f7f6 fc79 	bl	800095c <__aeabi_d2iz>
 800a06a:	f7f6 fb85 	bl	8000778 <__aeabi_i2d>
 800a06e:	4602      	mov	r2, r0
 800a070:	460b      	mov	r3, r1
 800a072:	ec43 2b18 	vmov	d8, r2, r3
 800a076:	4b46      	ldr	r3, [pc, #280]	; (800a190 <__kernel_rem_pio2+0x338>)
 800a078:	2200      	movs	r2, #0
 800a07a:	f7f6 f901 	bl	8000280 <__aeabi_dmul>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	4630      	mov	r0, r6
 800a084:	4639      	mov	r1, r7
 800a086:	f7f6 fa29 	bl	80004dc <__aeabi_dsub>
 800a08a:	f7f6 fc67 	bl	800095c <__aeabi_d2iz>
 800a08e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a092:	f84b 0b04 	str.w	r0, [fp], #4
 800a096:	ec51 0b18 	vmov	r0, r1, d8
 800a09a:	f7f6 fa21 	bl	80004e0 <__adddf3>
 800a09e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	460f      	mov	r7, r1
 800a0a6:	e75b      	b.n	8009f60 <__kernel_rem_pio2+0x108>
 800a0a8:	d106      	bne.n	800a0b8 <__kernel_rem_pio2+0x260>
 800a0aa:	1e63      	subs	r3, r4, #1
 800a0ac:	aa0e      	add	r2, sp, #56	; 0x38
 800a0ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a0b2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a0b6:	e79d      	b.n	8009ff4 <__kernel_rem_pio2+0x19c>
 800a0b8:	4b36      	ldr	r3, [pc, #216]	; (800a194 <__kernel_rem_pio2+0x33c>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f7f6 fc3a 	bl	8000934 <__aeabi_dcmpge>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d13d      	bne.n	800a140 <__kernel_rem_pio2+0x2e8>
 800a0c4:	4683      	mov	fp, r0
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	f7f6 fc13 	bl	80008f8 <__aeabi_dcmpeq>
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	f000 80c0 	beq.w	800a258 <__kernel_rem_pio2+0x400>
 800a0d8:	1e65      	subs	r5, r4, #1
 800a0da:	462b      	mov	r3, r5
 800a0dc:	2200      	movs	r2, #0
 800a0de:	9902      	ldr	r1, [sp, #8]
 800a0e0:	428b      	cmp	r3, r1
 800a0e2:	da6c      	bge.n	800a1be <__kernel_rem_pio2+0x366>
 800a0e4:	2a00      	cmp	r2, #0
 800a0e6:	f000 8089 	beq.w	800a1fc <__kernel_rem_pio2+0x3a4>
 800a0ea:	ab0e      	add	r3, sp, #56	; 0x38
 800a0ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800a0f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 80ad 	beq.w	800a254 <__kernel_rem_pio2+0x3fc>
 800a0fa:	4650      	mov	r0, sl
 800a0fc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a178 <__kernel_rem_pio2+0x320>
 800a100:	f000 fb42 	bl	800a788 <scalbn>
 800a104:	ab9a      	add	r3, sp, #616	; 0x268
 800a106:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a10a:	ec57 6b10 	vmov	r6, r7, d0
 800a10e:	00ec      	lsls	r4, r5, #3
 800a110:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a114:	46aa      	mov	sl, r5
 800a116:	f1ba 0f00 	cmp.w	sl, #0
 800a11a:	f280 80d6 	bge.w	800a2ca <__kernel_rem_pio2+0x472>
 800a11e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a170 <__kernel_rem_pio2+0x318>
 800a122:	462e      	mov	r6, r5
 800a124:	2e00      	cmp	r6, #0
 800a126:	f2c0 8104 	blt.w	800a332 <__kernel_rem_pio2+0x4da>
 800a12a:	ab72      	add	r3, sp, #456	; 0x1c8
 800a12c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a130:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a198 <__kernel_rem_pio2+0x340>
 800a134:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a138:	f04f 0800 	mov.w	r8, #0
 800a13c:	1baf      	subs	r7, r5, r6
 800a13e:	e0ea      	b.n	800a316 <__kernel_rem_pio2+0x4be>
 800a140:	f04f 0b02 	mov.w	fp, #2
 800a144:	e759      	b.n	8009ffa <__kernel_rem_pio2+0x1a2>
 800a146:	f8d8 3000 	ldr.w	r3, [r8]
 800a14a:	b955      	cbnz	r5, 800a162 <__kernel_rem_pio2+0x30a>
 800a14c:	b123      	cbz	r3, 800a158 <__kernel_rem_pio2+0x300>
 800a14e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a152:	f8c8 3000 	str.w	r3, [r8]
 800a156:	2301      	movs	r3, #1
 800a158:	3201      	adds	r2, #1
 800a15a:	f108 0804 	add.w	r8, r8, #4
 800a15e:	461d      	mov	r5, r3
 800a160:	e752      	b.n	800a008 <__kernel_rem_pio2+0x1b0>
 800a162:	1acb      	subs	r3, r1, r3
 800a164:	f8c8 3000 	str.w	r3, [r8]
 800a168:	462b      	mov	r3, r5
 800a16a:	e7f5      	b.n	800a158 <__kernel_rem_pio2+0x300>
 800a16c:	f3af 8000 	nop.w
	...
 800a17c:	3ff00000 	.word	0x3ff00000
 800a180:	0800ac00 	.word	0x0800ac00
 800a184:	40200000 	.word	0x40200000
 800a188:	3ff00000 	.word	0x3ff00000
 800a18c:	3e700000 	.word	0x3e700000
 800a190:	41700000 	.word	0x41700000
 800a194:	3fe00000 	.word	0x3fe00000
 800a198:	0800abc0 	.word	0x0800abc0
 800a19c:	1e62      	subs	r2, r4, #1
 800a19e:	ab0e      	add	r3, sp, #56	; 0x38
 800a1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a1a8:	a90e      	add	r1, sp, #56	; 0x38
 800a1aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a1ae:	e739      	b.n	800a024 <__kernel_rem_pio2+0x1cc>
 800a1b0:	1e62      	subs	r2, r4, #1
 800a1b2:	ab0e      	add	r3, sp, #56	; 0x38
 800a1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a1bc:	e7f4      	b.n	800a1a8 <__kernel_rem_pio2+0x350>
 800a1be:	a90e      	add	r1, sp, #56	; 0x38
 800a1c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	e789      	b.n	800a0de <__kernel_rem_pio2+0x286>
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a1d0:	2900      	cmp	r1, #0
 800a1d2:	d0fa      	beq.n	800a1ca <__kernel_rem_pio2+0x372>
 800a1d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1d6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a1da:	446a      	add	r2, sp
 800a1dc:	3a98      	subs	r2, #152	; 0x98
 800a1de:	920a      	str	r2, [sp, #40]	; 0x28
 800a1e0:	9a08      	ldr	r2, [sp, #32]
 800a1e2:	18e3      	adds	r3, r4, r3
 800a1e4:	18a5      	adds	r5, r4, r2
 800a1e6:	aa22      	add	r2, sp, #136	; 0x88
 800a1e8:	f104 0801 	add.w	r8, r4, #1
 800a1ec:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a1f0:	9304      	str	r3, [sp, #16]
 800a1f2:	9b04      	ldr	r3, [sp, #16]
 800a1f4:	4543      	cmp	r3, r8
 800a1f6:	da04      	bge.n	800a202 <__kernel_rem_pio2+0x3aa>
 800a1f8:	461c      	mov	r4, r3
 800a1fa:	e6a3      	b.n	8009f44 <__kernel_rem_pio2+0xec>
 800a1fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1fe:	2301      	movs	r3, #1
 800a200:	e7e4      	b.n	800a1cc <__kernel_rem_pio2+0x374>
 800a202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a204:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a208:	f7f6 fab6 	bl	8000778 <__aeabi_i2d>
 800a20c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a212:	46ab      	mov	fp, r5
 800a214:	461c      	mov	r4, r3
 800a216:	f04f 0900 	mov.w	r9, #0
 800a21a:	2600      	movs	r6, #0
 800a21c:	2700      	movs	r7, #0
 800a21e:	9b06      	ldr	r3, [sp, #24]
 800a220:	4599      	cmp	r9, r3
 800a222:	dd06      	ble.n	800a232 <__kernel_rem_pio2+0x3da>
 800a224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a226:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a22a:	f108 0801 	add.w	r8, r8, #1
 800a22e:	930a      	str	r3, [sp, #40]	; 0x28
 800a230:	e7df      	b.n	800a1f2 <__kernel_rem_pio2+0x39a>
 800a232:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a236:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a23a:	f7f6 f821 	bl	8000280 <__aeabi_dmul>
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	4630      	mov	r0, r6
 800a244:	4639      	mov	r1, r7
 800a246:	f7f6 f94b 	bl	80004e0 <__adddf3>
 800a24a:	f109 0901 	add.w	r9, r9, #1
 800a24e:	4606      	mov	r6, r0
 800a250:	460f      	mov	r7, r1
 800a252:	e7e4      	b.n	800a21e <__kernel_rem_pio2+0x3c6>
 800a254:	3d01      	subs	r5, #1
 800a256:	e748      	b.n	800a0ea <__kernel_rem_pio2+0x292>
 800a258:	ec47 6b10 	vmov	d0, r6, r7
 800a25c:	f1ca 0000 	rsb	r0, sl, #0
 800a260:	f000 fa92 	bl	800a788 <scalbn>
 800a264:	ec57 6b10 	vmov	r6, r7, d0
 800a268:	4ba0      	ldr	r3, [pc, #640]	; (800a4ec <__kernel_rem_pio2+0x694>)
 800a26a:	ee10 0a10 	vmov	r0, s0
 800a26e:	2200      	movs	r2, #0
 800a270:	4639      	mov	r1, r7
 800a272:	f7f6 fb5f 	bl	8000934 <__aeabi_dcmpge>
 800a276:	b1f8      	cbz	r0, 800a2b8 <__kernel_rem_pio2+0x460>
 800a278:	4b9d      	ldr	r3, [pc, #628]	; (800a4f0 <__kernel_rem_pio2+0x698>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	f7f5 fffe 	bl	8000280 <__aeabi_dmul>
 800a284:	f7f6 fb6a 	bl	800095c <__aeabi_d2iz>
 800a288:	4680      	mov	r8, r0
 800a28a:	f7f6 fa75 	bl	8000778 <__aeabi_i2d>
 800a28e:	4b97      	ldr	r3, [pc, #604]	; (800a4ec <__kernel_rem_pio2+0x694>)
 800a290:	2200      	movs	r2, #0
 800a292:	f7f5 fff5 	bl	8000280 <__aeabi_dmul>
 800a296:	460b      	mov	r3, r1
 800a298:	4602      	mov	r2, r0
 800a29a:	4639      	mov	r1, r7
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7f6 f91d 	bl	80004dc <__aeabi_dsub>
 800a2a2:	f7f6 fb5b 	bl	800095c <__aeabi_d2iz>
 800a2a6:	1c65      	adds	r5, r4, #1
 800a2a8:	ab0e      	add	r3, sp, #56	; 0x38
 800a2aa:	f10a 0a18 	add.w	sl, sl, #24
 800a2ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a2b2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a2b6:	e720      	b.n	800a0fa <__kernel_rem_pio2+0x2a2>
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	4639      	mov	r1, r7
 800a2bc:	f7f6 fb4e 	bl	800095c <__aeabi_d2iz>
 800a2c0:	ab0e      	add	r3, sp, #56	; 0x38
 800a2c2:	4625      	mov	r5, r4
 800a2c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a2c8:	e717      	b.n	800a0fa <__kernel_rem_pio2+0x2a2>
 800a2ca:	ab0e      	add	r3, sp, #56	; 0x38
 800a2cc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a2d0:	f7f6 fa52 	bl	8000778 <__aeabi_i2d>
 800a2d4:	4632      	mov	r2, r6
 800a2d6:	463b      	mov	r3, r7
 800a2d8:	f7f5 ffd2 	bl	8000280 <__aeabi_dmul>
 800a2dc:	4b84      	ldr	r3, [pc, #528]	; (800a4f0 <__kernel_rem_pio2+0x698>)
 800a2de:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	4639      	mov	r1, r7
 800a2e8:	f7f5 ffca 	bl	8000280 <__aeabi_dmul>
 800a2ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	460f      	mov	r7, r1
 800a2f4:	e70f      	b.n	800a116 <__kernel_rem_pio2+0x2be>
 800a2f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a2fa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a2fe:	f7f5 ffbf 	bl	8000280 <__aeabi_dmul>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a30a:	f7f6 f8e9 	bl	80004e0 <__adddf3>
 800a30e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a312:	f108 0801 	add.w	r8, r8, #1
 800a316:	9b02      	ldr	r3, [sp, #8]
 800a318:	4598      	cmp	r8, r3
 800a31a:	dc01      	bgt.n	800a320 <__kernel_rem_pio2+0x4c8>
 800a31c:	45b8      	cmp	r8, r7
 800a31e:	ddea      	ble.n	800a2f6 <__kernel_rem_pio2+0x49e>
 800a320:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a324:	ab4a      	add	r3, sp, #296	; 0x128
 800a326:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a32a:	ed87 7b00 	vstr	d7, [r7]
 800a32e:	3e01      	subs	r6, #1
 800a330:	e6f8      	b.n	800a124 <__kernel_rem_pio2+0x2cc>
 800a332:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a334:	2b02      	cmp	r3, #2
 800a336:	dc0b      	bgt.n	800a350 <__kernel_rem_pio2+0x4f8>
 800a338:	2b00      	cmp	r3, #0
 800a33a:	dc35      	bgt.n	800a3a8 <__kernel_rem_pio2+0x550>
 800a33c:	d059      	beq.n	800a3f2 <__kernel_rem_pio2+0x59a>
 800a33e:	9b04      	ldr	r3, [sp, #16]
 800a340:	f003 0007 	and.w	r0, r3, #7
 800a344:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a348:	ecbd 8b02 	vpop	{d8}
 800a34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a350:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a352:	2b03      	cmp	r3, #3
 800a354:	d1f3      	bne.n	800a33e <__kernel_rem_pio2+0x4e6>
 800a356:	ab4a      	add	r3, sp, #296	; 0x128
 800a358:	4423      	add	r3, r4
 800a35a:	9306      	str	r3, [sp, #24]
 800a35c:	461c      	mov	r4, r3
 800a35e:	469a      	mov	sl, r3
 800a360:	9502      	str	r5, [sp, #8]
 800a362:	9b02      	ldr	r3, [sp, #8]
 800a364:	2b00      	cmp	r3, #0
 800a366:	f1aa 0a08 	sub.w	sl, sl, #8
 800a36a:	dc6b      	bgt.n	800a444 <__kernel_rem_pio2+0x5ec>
 800a36c:	46aa      	mov	sl, r5
 800a36e:	f1ba 0f01 	cmp.w	sl, #1
 800a372:	f1a4 0408 	sub.w	r4, r4, #8
 800a376:	f300 8085 	bgt.w	800a484 <__kernel_rem_pio2+0x62c>
 800a37a:	9c06      	ldr	r4, [sp, #24]
 800a37c:	2000      	movs	r0, #0
 800a37e:	3408      	adds	r4, #8
 800a380:	2100      	movs	r1, #0
 800a382:	2d01      	cmp	r5, #1
 800a384:	f300 809d 	bgt.w	800a4c2 <__kernel_rem_pio2+0x66a>
 800a388:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a38c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a390:	f1bb 0f00 	cmp.w	fp, #0
 800a394:	f040 809b 	bne.w	800a4ce <__kernel_rem_pio2+0x676>
 800a398:	9b01      	ldr	r3, [sp, #4]
 800a39a:	e9c3 5600 	strd	r5, r6, [r3]
 800a39e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a3a2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a3a6:	e7ca      	b.n	800a33e <__kernel_rem_pio2+0x4e6>
 800a3a8:	3408      	adds	r4, #8
 800a3aa:	ab4a      	add	r3, sp, #296	; 0x128
 800a3ac:	441c      	add	r4, r3
 800a3ae:	462e      	mov	r6, r5
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	2e00      	cmp	r6, #0
 800a3b6:	da36      	bge.n	800a426 <__kernel_rem_pio2+0x5ce>
 800a3b8:	f1bb 0f00 	cmp.w	fp, #0
 800a3bc:	d039      	beq.n	800a432 <__kernel_rem_pio2+0x5da>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3c4:	9c01      	ldr	r4, [sp, #4]
 800a3c6:	e9c4 2300 	strd	r2, r3, [r4]
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a3d2:	f7f6 f883 	bl	80004dc <__aeabi_dsub>
 800a3d6:	ae4c      	add	r6, sp, #304	; 0x130
 800a3d8:	2401      	movs	r4, #1
 800a3da:	42a5      	cmp	r5, r4
 800a3dc:	da2c      	bge.n	800a438 <__kernel_rem_pio2+0x5e0>
 800a3de:	f1bb 0f00 	cmp.w	fp, #0
 800a3e2:	d002      	beq.n	800a3ea <__kernel_rem_pio2+0x592>
 800a3e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	9b01      	ldr	r3, [sp, #4]
 800a3ec:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a3f0:	e7a5      	b.n	800a33e <__kernel_rem_pio2+0x4e6>
 800a3f2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a3f6:	eb0d 0403 	add.w	r4, sp, r3
 800a3fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a3fe:	2000      	movs	r0, #0
 800a400:	2100      	movs	r1, #0
 800a402:	2d00      	cmp	r5, #0
 800a404:	da09      	bge.n	800a41a <__kernel_rem_pio2+0x5c2>
 800a406:	f1bb 0f00 	cmp.w	fp, #0
 800a40a:	d002      	beq.n	800a412 <__kernel_rem_pio2+0x5ba>
 800a40c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a410:	4619      	mov	r1, r3
 800a412:	9b01      	ldr	r3, [sp, #4]
 800a414:	e9c3 0100 	strd	r0, r1, [r3]
 800a418:	e791      	b.n	800a33e <__kernel_rem_pio2+0x4e6>
 800a41a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a41e:	f7f6 f85f 	bl	80004e0 <__adddf3>
 800a422:	3d01      	subs	r5, #1
 800a424:	e7ed      	b.n	800a402 <__kernel_rem_pio2+0x5aa>
 800a426:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a42a:	f7f6 f859 	bl	80004e0 <__adddf3>
 800a42e:	3e01      	subs	r6, #1
 800a430:	e7c0      	b.n	800a3b4 <__kernel_rem_pio2+0x55c>
 800a432:	4602      	mov	r2, r0
 800a434:	460b      	mov	r3, r1
 800a436:	e7c5      	b.n	800a3c4 <__kernel_rem_pio2+0x56c>
 800a438:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a43c:	f7f6 f850 	bl	80004e0 <__adddf3>
 800a440:	3401      	adds	r4, #1
 800a442:	e7ca      	b.n	800a3da <__kernel_rem_pio2+0x582>
 800a444:	e9da 8900 	ldrd	r8, r9, [sl]
 800a448:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a44c:	9b02      	ldr	r3, [sp, #8]
 800a44e:	3b01      	subs	r3, #1
 800a450:	9302      	str	r3, [sp, #8]
 800a452:	4632      	mov	r2, r6
 800a454:	463b      	mov	r3, r7
 800a456:	4640      	mov	r0, r8
 800a458:	4649      	mov	r1, r9
 800a45a:	f7f6 f841 	bl	80004e0 <__adddf3>
 800a45e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4640      	mov	r0, r8
 800a468:	4649      	mov	r1, r9
 800a46a:	f7f6 f837 	bl	80004dc <__aeabi_dsub>
 800a46e:	4632      	mov	r2, r6
 800a470:	463b      	mov	r3, r7
 800a472:	f7f6 f835 	bl	80004e0 <__adddf3>
 800a476:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a47a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a47e:	ed8a 7b00 	vstr	d7, [sl]
 800a482:	e76e      	b.n	800a362 <__kernel_rem_pio2+0x50a>
 800a484:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a488:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a48c:	4640      	mov	r0, r8
 800a48e:	4632      	mov	r2, r6
 800a490:	463b      	mov	r3, r7
 800a492:	4649      	mov	r1, r9
 800a494:	f7f6 f824 	bl	80004e0 <__adddf3>
 800a498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	f7f6 f81a 	bl	80004dc <__aeabi_dsub>
 800a4a8:	4632      	mov	r2, r6
 800a4aa:	463b      	mov	r3, r7
 800a4ac:	f7f6 f818 	bl	80004e0 <__adddf3>
 800a4b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a4b8:	ed84 7b00 	vstr	d7, [r4]
 800a4bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4c0:	e755      	b.n	800a36e <__kernel_rem_pio2+0x516>
 800a4c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a4c6:	f7f6 f80b 	bl	80004e0 <__adddf3>
 800a4ca:	3d01      	subs	r5, #1
 800a4cc:	e759      	b.n	800a382 <__kernel_rem_pio2+0x52a>
 800a4ce:	9b01      	ldr	r3, [sp, #4]
 800a4d0:	9a01      	ldr	r2, [sp, #4]
 800a4d2:	601d      	str	r5, [r3, #0]
 800a4d4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a4d8:	605c      	str	r4, [r3, #4]
 800a4da:	609f      	str	r7, [r3, #8]
 800a4dc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a4e0:	60d3      	str	r3, [r2, #12]
 800a4e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4e6:	6110      	str	r0, [r2, #16]
 800a4e8:	6153      	str	r3, [r2, #20]
 800a4ea:	e728      	b.n	800a33e <__kernel_rem_pio2+0x4e6>
 800a4ec:	41700000 	.word	0x41700000
 800a4f0:	3e700000 	.word	0x3e700000
 800a4f4:	00000000 	.word	0x00000000

0800a4f8 <__kernel_sin>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	ed2d 8b04 	vpush	{d8-d9}
 800a500:	eeb0 8a41 	vmov.f32	s16, s2
 800a504:	eef0 8a61 	vmov.f32	s17, s3
 800a508:	ec55 4b10 	vmov	r4, r5, d0
 800a50c:	b083      	sub	sp, #12
 800a50e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a512:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a516:	9001      	str	r0, [sp, #4]
 800a518:	da06      	bge.n	800a528 <__kernel_sin+0x30>
 800a51a:	ee10 0a10 	vmov	r0, s0
 800a51e:	4629      	mov	r1, r5
 800a520:	f7f6 fa1c 	bl	800095c <__aeabi_d2iz>
 800a524:	2800      	cmp	r0, #0
 800a526:	d051      	beq.n	800a5cc <__kernel_sin+0xd4>
 800a528:	4622      	mov	r2, r4
 800a52a:	462b      	mov	r3, r5
 800a52c:	4620      	mov	r0, r4
 800a52e:	4629      	mov	r1, r5
 800a530:	f7f5 fea6 	bl	8000280 <__aeabi_dmul>
 800a534:	4682      	mov	sl, r0
 800a536:	468b      	mov	fp, r1
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	4620      	mov	r0, r4
 800a53e:	4629      	mov	r1, r5
 800a540:	f7f5 fe9e 	bl	8000280 <__aeabi_dmul>
 800a544:	a341      	add	r3, pc, #260	; (adr r3, 800a64c <__kernel_sin+0x154>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	4680      	mov	r8, r0
 800a54c:	4689      	mov	r9, r1
 800a54e:	4650      	mov	r0, sl
 800a550:	4659      	mov	r1, fp
 800a552:	f7f5 fe95 	bl	8000280 <__aeabi_dmul>
 800a556:	a33f      	add	r3, pc, #252	; (adr r3, 800a654 <__kernel_sin+0x15c>)
 800a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55c:	f7f5 ffbe 	bl	80004dc <__aeabi_dsub>
 800a560:	4652      	mov	r2, sl
 800a562:	465b      	mov	r3, fp
 800a564:	f7f5 fe8c 	bl	8000280 <__aeabi_dmul>
 800a568:	a33c      	add	r3, pc, #240	; (adr r3, 800a65c <__kernel_sin+0x164>)
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	f7f5 ffb7 	bl	80004e0 <__adddf3>
 800a572:	4652      	mov	r2, sl
 800a574:	465b      	mov	r3, fp
 800a576:	f7f5 fe83 	bl	8000280 <__aeabi_dmul>
 800a57a:	a33a      	add	r3, pc, #232	; (adr r3, 800a664 <__kernel_sin+0x16c>)
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	f7f5 ffac 	bl	80004dc <__aeabi_dsub>
 800a584:	4652      	mov	r2, sl
 800a586:	465b      	mov	r3, fp
 800a588:	f7f5 fe7a 	bl	8000280 <__aeabi_dmul>
 800a58c:	a337      	add	r3, pc, #220	; (adr r3, 800a66c <__kernel_sin+0x174>)
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	f7f5 ffa5 	bl	80004e0 <__adddf3>
 800a596:	9b01      	ldr	r3, [sp, #4]
 800a598:	4606      	mov	r6, r0
 800a59a:	460f      	mov	r7, r1
 800a59c:	b9eb      	cbnz	r3, 800a5da <__kernel_sin+0xe2>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4650      	mov	r0, sl
 800a5a4:	4659      	mov	r1, fp
 800a5a6:	f7f5 fe6b 	bl	8000280 <__aeabi_dmul>
 800a5aa:	a325      	add	r3, pc, #148	; (adr r3, 800a640 <__kernel_sin+0x148>)
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	f7f5 ff94 	bl	80004dc <__aeabi_dsub>
 800a5b4:	4642      	mov	r2, r8
 800a5b6:	464b      	mov	r3, r9
 800a5b8:	f7f5 fe62 	bl	8000280 <__aeabi_dmul>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	f7f5 ff8c 	bl	80004e0 <__adddf3>
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	460d      	mov	r5, r1
 800a5cc:	ec45 4b10 	vmov	d0, r4, r5
 800a5d0:	b003      	add	sp, #12
 800a5d2:	ecbd 8b04 	vpop	{d8-d9}
 800a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5da:	4b1b      	ldr	r3, [pc, #108]	; (800a648 <__kernel_sin+0x150>)
 800a5dc:	ec51 0b18 	vmov	r0, r1, d8
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f7f5 fe4d 	bl	8000280 <__aeabi_dmul>
 800a5e6:	4632      	mov	r2, r6
 800a5e8:	ec41 0b19 	vmov	d9, r0, r1
 800a5ec:	463b      	mov	r3, r7
 800a5ee:	4640      	mov	r0, r8
 800a5f0:	4649      	mov	r1, r9
 800a5f2:	f7f5 fe45 	bl	8000280 <__aeabi_dmul>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	ec51 0b19 	vmov	r0, r1, d9
 800a5fe:	f7f5 ff6d 	bl	80004dc <__aeabi_dsub>
 800a602:	4652      	mov	r2, sl
 800a604:	465b      	mov	r3, fp
 800a606:	f7f5 fe3b 	bl	8000280 <__aeabi_dmul>
 800a60a:	ec53 2b18 	vmov	r2, r3, d8
 800a60e:	f7f5 ff65 	bl	80004dc <__aeabi_dsub>
 800a612:	a30b      	add	r3, pc, #44	; (adr r3, 800a640 <__kernel_sin+0x148>)
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	4606      	mov	r6, r0
 800a61a:	460f      	mov	r7, r1
 800a61c:	4640      	mov	r0, r8
 800a61e:	4649      	mov	r1, r9
 800a620:	f7f5 fe2e 	bl	8000280 <__aeabi_dmul>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	4630      	mov	r0, r6
 800a62a:	4639      	mov	r1, r7
 800a62c:	f7f5 ff58 	bl	80004e0 <__adddf3>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4620      	mov	r0, r4
 800a636:	4629      	mov	r1, r5
 800a638:	f7f5 ff50 	bl	80004dc <__aeabi_dsub>
 800a63c:	e7c4      	b.n	800a5c8 <__kernel_sin+0xd0>
 800a63e:	bf00      	nop
 800a640:	55555549 	.word	0x55555549
 800a644:	3fc55555 	.word	0x3fc55555
 800a648:	3fe00000 	.word	0x3fe00000
 800a64c:	5acfd57c 	.word	0x5acfd57c
 800a650:	3de5d93a 	.word	0x3de5d93a
 800a654:	8a2b9ceb 	.word	0x8a2b9ceb
 800a658:	3e5ae5e6 	.word	0x3e5ae5e6
 800a65c:	57b1fe7d 	.word	0x57b1fe7d
 800a660:	3ec71de3 	.word	0x3ec71de3
 800a664:	19c161d5 	.word	0x19c161d5
 800a668:	3f2a01a0 	.word	0x3f2a01a0
 800a66c:	1110f8a6 	.word	0x1110f8a6
 800a670:	3f811111 	.word	0x3f811111

0800a674 <fabs>:
 800a674:	ec51 0b10 	vmov	r0, r1, d0
 800a678:	ee10 2a10 	vmov	r2, s0
 800a67c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a680:	ec43 2b10 	vmov	d0, r2, r3
 800a684:	4770      	bx	lr
	...

0800a688 <floor>:
 800a688:	ec51 0b10 	vmov	r0, r1, d0
 800a68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a690:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a694:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a698:	2e13      	cmp	r6, #19
 800a69a:	ee10 5a10 	vmov	r5, s0
 800a69e:	ee10 8a10 	vmov	r8, s0
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	dc32      	bgt.n	800a70c <floor+0x84>
 800a6a6:	2e00      	cmp	r6, #0
 800a6a8:	da14      	bge.n	800a6d4 <floor+0x4c>
 800a6aa:	a333      	add	r3, pc, #204	; (adr r3, 800a778 <floor+0xf0>)
 800a6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b0:	f7f5 ff16 	bl	80004e0 <__adddf3>
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	f7f6 f946 	bl	8000948 <__aeabi_dcmpgt>
 800a6bc:	b138      	cbz	r0, 800a6ce <floor+0x46>
 800a6be:	2c00      	cmp	r4, #0
 800a6c0:	da57      	bge.n	800a772 <floor+0xea>
 800a6c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a6c6:	431d      	orrs	r5, r3
 800a6c8:	d001      	beq.n	800a6ce <floor+0x46>
 800a6ca:	4c2d      	ldr	r4, [pc, #180]	; (800a780 <floor+0xf8>)
 800a6cc:	2500      	movs	r5, #0
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	e025      	b.n	800a720 <floor+0x98>
 800a6d4:	4f2b      	ldr	r7, [pc, #172]	; (800a784 <floor+0xfc>)
 800a6d6:	4137      	asrs	r7, r6
 800a6d8:	ea01 0307 	and.w	r3, r1, r7
 800a6dc:	4303      	orrs	r3, r0
 800a6de:	d01f      	beq.n	800a720 <floor+0x98>
 800a6e0:	a325      	add	r3, pc, #148	; (adr r3, 800a778 <floor+0xf0>)
 800a6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e6:	f7f5 fefb 	bl	80004e0 <__adddf3>
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f7f6 f92b 	bl	8000948 <__aeabi_dcmpgt>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d0eb      	beq.n	800a6ce <floor+0x46>
 800a6f6:	2c00      	cmp	r4, #0
 800a6f8:	bfbe      	ittt	lt
 800a6fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a6fe:	fa43 f606 	asrlt.w	r6, r3, r6
 800a702:	19a4      	addlt	r4, r4, r6
 800a704:	ea24 0407 	bic.w	r4, r4, r7
 800a708:	2500      	movs	r5, #0
 800a70a:	e7e0      	b.n	800a6ce <floor+0x46>
 800a70c:	2e33      	cmp	r6, #51	; 0x33
 800a70e:	dd0b      	ble.n	800a728 <floor+0xa0>
 800a710:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a714:	d104      	bne.n	800a720 <floor+0x98>
 800a716:	ee10 2a10 	vmov	r2, s0
 800a71a:	460b      	mov	r3, r1
 800a71c:	f7f5 fee0 	bl	80004e0 <__adddf3>
 800a720:	ec41 0b10 	vmov	d0, r0, r1
 800a724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a728:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a72c:	f04f 33ff 	mov.w	r3, #4294967295
 800a730:	fa23 f707 	lsr.w	r7, r3, r7
 800a734:	4207      	tst	r7, r0
 800a736:	d0f3      	beq.n	800a720 <floor+0x98>
 800a738:	a30f      	add	r3, pc, #60	; (adr r3, 800a778 <floor+0xf0>)
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	f7f5 fecf 	bl	80004e0 <__adddf3>
 800a742:	2200      	movs	r2, #0
 800a744:	2300      	movs	r3, #0
 800a746:	f7f6 f8ff 	bl	8000948 <__aeabi_dcmpgt>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d0bf      	beq.n	800a6ce <floor+0x46>
 800a74e:	2c00      	cmp	r4, #0
 800a750:	da02      	bge.n	800a758 <floor+0xd0>
 800a752:	2e14      	cmp	r6, #20
 800a754:	d103      	bne.n	800a75e <floor+0xd6>
 800a756:	3401      	adds	r4, #1
 800a758:	ea25 0507 	bic.w	r5, r5, r7
 800a75c:	e7b7      	b.n	800a6ce <floor+0x46>
 800a75e:	2301      	movs	r3, #1
 800a760:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a764:	fa03 f606 	lsl.w	r6, r3, r6
 800a768:	4435      	add	r5, r6
 800a76a:	4545      	cmp	r5, r8
 800a76c:	bf38      	it	cc
 800a76e:	18e4      	addcc	r4, r4, r3
 800a770:	e7f2      	b.n	800a758 <floor+0xd0>
 800a772:	2500      	movs	r5, #0
 800a774:	462c      	mov	r4, r5
 800a776:	e7aa      	b.n	800a6ce <floor+0x46>
 800a778:	8800759c 	.word	0x8800759c
 800a77c:	7e37e43c 	.word	0x7e37e43c
 800a780:	bff00000 	.word	0xbff00000
 800a784:	000fffff 	.word	0x000fffff

0800a788 <scalbn>:
 800a788:	b570      	push	{r4, r5, r6, lr}
 800a78a:	ec55 4b10 	vmov	r4, r5, d0
 800a78e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a792:	4606      	mov	r6, r0
 800a794:	462b      	mov	r3, r5
 800a796:	b99a      	cbnz	r2, 800a7c0 <scalbn+0x38>
 800a798:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a79c:	4323      	orrs	r3, r4
 800a79e:	d036      	beq.n	800a80e <scalbn+0x86>
 800a7a0:	4b39      	ldr	r3, [pc, #228]	; (800a888 <scalbn+0x100>)
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	ee10 0a10 	vmov	r0, s0
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f7f5 fd69 	bl	8000280 <__aeabi_dmul>
 800a7ae:	4b37      	ldr	r3, [pc, #220]	; (800a88c <scalbn+0x104>)
 800a7b0:	429e      	cmp	r6, r3
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	460d      	mov	r5, r1
 800a7b6:	da10      	bge.n	800a7da <scalbn+0x52>
 800a7b8:	a32b      	add	r3, pc, #172	; (adr r3, 800a868 <scalbn+0xe0>)
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	e03a      	b.n	800a836 <scalbn+0xae>
 800a7c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a7c4:	428a      	cmp	r2, r1
 800a7c6:	d10c      	bne.n	800a7e2 <scalbn+0x5a>
 800a7c8:	ee10 2a10 	vmov	r2, s0
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	f7f5 fe86 	bl	80004e0 <__adddf3>
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	460d      	mov	r5, r1
 800a7d8:	e019      	b.n	800a80e <scalbn+0x86>
 800a7da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a7de:	460b      	mov	r3, r1
 800a7e0:	3a36      	subs	r2, #54	; 0x36
 800a7e2:	4432      	add	r2, r6
 800a7e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a7e8:	428a      	cmp	r2, r1
 800a7ea:	dd08      	ble.n	800a7fe <scalbn+0x76>
 800a7ec:	2d00      	cmp	r5, #0
 800a7ee:	a120      	add	r1, pc, #128	; (adr r1, 800a870 <scalbn+0xe8>)
 800a7f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7f4:	da1c      	bge.n	800a830 <scalbn+0xa8>
 800a7f6:	a120      	add	r1, pc, #128	; (adr r1, 800a878 <scalbn+0xf0>)
 800a7f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7fc:	e018      	b.n	800a830 <scalbn+0xa8>
 800a7fe:	2a00      	cmp	r2, #0
 800a800:	dd08      	ble.n	800a814 <scalbn+0x8c>
 800a802:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a806:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a80a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a80e:	ec45 4b10 	vmov	d0, r4, r5
 800a812:	bd70      	pop	{r4, r5, r6, pc}
 800a814:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a818:	da19      	bge.n	800a84e <scalbn+0xc6>
 800a81a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a81e:	429e      	cmp	r6, r3
 800a820:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a824:	dd0a      	ble.n	800a83c <scalbn+0xb4>
 800a826:	a112      	add	r1, pc, #72	; (adr r1, 800a870 <scalbn+0xe8>)
 800a828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1e2      	bne.n	800a7f6 <scalbn+0x6e>
 800a830:	a30f      	add	r3, pc, #60	; (adr r3, 800a870 <scalbn+0xe8>)
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f7f5 fd23 	bl	8000280 <__aeabi_dmul>
 800a83a:	e7cb      	b.n	800a7d4 <scalbn+0x4c>
 800a83c:	a10a      	add	r1, pc, #40	; (adr r1, 800a868 <scalbn+0xe0>)
 800a83e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d0b8      	beq.n	800a7b8 <scalbn+0x30>
 800a846:	a10e      	add	r1, pc, #56	; (adr r1, 800a880 <scalbn+0xf8>)
 800a848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a84c:	e7b4      	b.n	800a7b8 <scalbn+0x30>
 800a84e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a852:	3236      	adds	r2, #54	; 0x36
 800a854:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a858:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a85c:	4620      	mov	r0, r4
 800a85e:	4b0c      	ldr	r3, [pc, #48]	; (800a890 <scalbn+0x108>)
 800a860:	2200      	movs	r2, #0
 800a862:	e7e8      	b.n	800a836 <scalbn+0xae>
 800a864:	f3af 8000 	nop.w
 800a868:	c2f8f359 	.word	0xc2f8f359
 800a86c:	01a56e1f 	.word	0x01a56e1f
 800a870:	8800759c 	.word	0x8800759c
 800a874:	7e37e43c 	.word	0x7e37e43c
 800a878:	8800759c 	.word	0x8800759c
 800a87c:	fe37e43c 	.word	0xfe37e43c
 800a880:	c2f8f359 	.word	0xc2f8f359
 800a884:	81a56e1f 	.word	0x81a56e1f
 800a888:	43500000 	.word	0x43500000
 800a88c:	ffff3cb0 	.word	0xffff3cb0
 800a890:	3c900000 	.word	0x3c900000

0800a894 <_init>:
 800a894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a896:	bf00      	nop
 800a898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89a:	bc08      	pop	{r3}
 800a89c:	469e      	mov	lr, r3
 800a89e:	4770      	bx	lr

0800a8a0 <_fini>:
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a2:	bf00      	nop
 800a8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8a6:	bc08      	pop	{r3}
 800a8a8:	469e      	mov	lr, r3
 800a8aa:	4770      	bx	lr
