
dimmerTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007680  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007858  08007858  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08007858  08007858  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007858  08007858  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007858  08007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000005b4  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005cc  200005cc  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b955  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fca  00000000  00000000  0003b99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0003e968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001550  00000000  00000000  0003ffe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200bf  00000000  00000000  00041530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c824  00000000  00000000  000615ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c591b  00000000  00000000  0007de13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014372e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006104  00000000  00000000  00143780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080077f0 	.word	0x080077f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080077f0 	.word	0x080077f0

080001c8 <warn>:
	unsigned char in_data[100];
	unsigned char message[50];
	int treshhold = 1000;
	int warnsit = 0;

void warn() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	strcpy(message, "wanr on\n");
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <warn+0x40>)
 80001ce:	4a0f      	ldr	r2, [pc, #60]	; (800020c <warn+0x44>)
 80001d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80001d2:	c303      	stmia	r3!, {r0, r1}
 80001d4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, message, 10, 1000);
 80001d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001da:	220a      	movs	r2, #10
 80001dc:	490a      	ldr	r1, [pc, #40]	; (8000208 <warn+0x40>)
 80001de:	480c      	ldr	r0, [pc, #48]	; (8000210 <warn+0x48>)
 80001e0:	f005 ff84 	bl	80060ec <HAL_UART_Transmit>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80001e4:	2100      	movs	r1, #0
 80001e6:	480b      	ldr	r0, [pc, #44]	; (8000214 <warn+0x4c>)
 80001e8:	f004 fe2a 	bl	8004e40 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80001ec:	2104      	movs	r1, #4
 80001ee:	4809      	ldr	r0, [pc, #36]	; (8000214 <warn+0x4c>)
 80001f0:	f004 fe26 	bl	8004e40 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80001f4:	2108      	movs	r1, #8
 80001f6:	4807      	ldr	r0, [pc, #28]	; (8000214 <warn+0x4c>)
 80001f8:	f004 fe22 	bl	8004e40 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 80001fc:	210c      	movs	r1, #12
 80001fe:	4805      	ldr	r0, [pc, #20]	; (8000214 <warn+0x4c>)
 8000200:	f004 fe1e 	bl	8004e40 <HAL_TIM_PWM_Stop>
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}
 8000208:	20000560 	.word	0x20000560
 800020c:	08007808 	.word	0x08007808
 8000210:	20000188 	.word	0x20000188
 8000214:	2000013c 	.word	0x2000013c

08000218 <warnOff>:

void warnOff() {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	strcpy(message, "wanr off\n");
 800021c:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <warnOff+0x40>)
 800021e:	4a0f      	ldr	r2, [pc, #60]	; (800025c <warnOff+0x44>)
 8000220:	ca07      	ldmia	r2, {r0, r1, r2}
 8000222:	c303      	stmia	r3!, {r0, r1}
 8000224:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, message, 10, 1000);
 8000226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022a:	220a      	movs	r2, #10
 800022c:	490a      	ldr	r1, [pc, #40]	; (8000258 <warnOff+0x40>)
 800022e:	480c      	ldr	r0, [pc, #48]	; (8000260 <warnOff+0x48>)
 8000230:	f005 ff5c 	bl	80060ec <HAL_UART_Transmit>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000234:	2100      	movs	r1, #0
 8000236:	480b      	ldr	r0, [pc, #44]	; (8000264 <warnOff+0x4c>)
 8000238:	f004 fd02 	bl	8004c40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800023c:	2104      	movs	r1, #4
 800023e:	4809      	ldr	r0, [pc, #36]	; (8000264 <warnOff+0x4c>)
 8000240:	f004 fcfe 	bl	8004c40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000244:	2108      	movs	r1, #8
 8000246:	4807      	ldr	r0, [pc, #28]	; (8000264 <warnOff+0x4c>)
 8000248:	f004 fcfa 	bl	8004c40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800024c:	210c      	movs	r1, #12
 800024e:	4805      	ldr	r0, [pc, #20]	; (8000264 <warnOff+0x4c>)
 8000250:	f004 fcf6 	bl	8004c40 <HAL_TIM_PWM_Start>
}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000560 	.word	0x20000560
 800025c:	08007814 	.word	0x08007814
 8000260:	20000188 	.word	0x20000188
 8000264:	2000013c 	.word	0x2000013c

08000268 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	static int sample = 0;
	static int buff[10];
	int x;
	buff[sample] = HAL_ADC_GetValue(&hadc1);
 8000270:	4823      	ldr	r0, [pc, #140]	; (8000300 <HAL_ADC_ConvCpltCallback+0x98>)
 8000272:	f001 fa87 	bl	8001784 <HAL_ADC_GetValue>
 8000276:	4602      	mov	r2, r0
 8000278:	4b22      	ldr	r3, [pc, #136]	; (8000304 <HAL_ADC_ConvCpltCallback+0x9c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4611      	mov	r1, r2
 800027e:	4a22      	ldr	r2, [pc, #136]	; (8000308 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000280:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sample += 1;
 8000284:	4b1f      	ldr	r3, [pc, #124]	; (8000304 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	4a1e      	ldr	r2, [pc, #120]	; (8000304 <HAL_ADC_ConvCpltCallback+0x9c>)
 800028c:	6013      	str	r3, [r2, #0]
    if(sample == 10) {
 800028e:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2b0a      	cmp	r3, #10
 8000294:	d12a      	bne.n	80002ec <HAL_ADC_ConvCpltCallback+0x84>
    	sample = 0;
 8000296:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
    	x = 0;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
    	for(int i = 0; i < 10; ++i) {
 80002a0:	2300      	movs	r3, #0
 80002a2:	60bb      	str	r3, [r7, #8]
 80002a4:	e00b      	b.n	80002be <HAL_ADC_ConvCpltCallback+0x56>
    		x = (x > buff[i]) ? x : buff[i];
 80002a6:	4a18      	ldr	r2, [pc, #96]	; (8000308 <HAL_ADC_ConvCpltCallback+0xa0>)
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ae:	68fa      	ldr	r2, [r7, #12]
 80002b0:	4293      	cmp	r3, r2
 80002b2:	bfb8      	it	lt
 80002b4:	4613      	movlt	r3, r2
 80002b6:	60fb      	str	r3, [r7, #12]
    	for(int i = 0; i < 10; ++i) {
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	3301      	adds	r3, #1
 80002bc:	60bb      	str	r3, [r7, #8]
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	2b09      	cmp	r3, #9
 80002c2:	ddf0      	ble.n	80002a6 <HAL_ADC_ConvCpltCallback+0x3e>
    	}
    	if(x > treshhold) {
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <HAL_ADC_ConvCpltCallback+0xa4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	dd05      	ble.n	80002da <HAL_ADC_ConvCpltCallback+0x72>
    			warnsit = 1;
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <HAL_ADC_ConvCpltCallback+0xa8>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	601a      	str	r2, [r3, #0]
    	    	warn();
 80002d4:	f7ff ff78 	bl	80001c8 <warn>
 80002d8:	e008      	b.n	80002ec <HAL_ADC_ConvCpltCallback+0x84>
    	} else if(warnsit == 1) {
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <HAL_ADC_ConvCpltCallback+0xa8>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d104      	bne.n	80002ec <HAL_ADC_ConvCpltCallback+0x84>
    	    	warnOff();
 80002e2:	f7ff ff99 	bl	8000218 <warnOff>
    	    	warnsit = 0;
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <HAL_ADC_ConvCpltCallback+0xa8>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
    	    }
    }
    HAL_Delay(20);
 80002ec:	2014      	movs	r0, #20
 80002ee:	f000 fef1 	bl	80010d4 <HAL_Delay>

    HAL_ADC_Start_IT(&hadc1);
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <HAL_ADC_ConvCpltCallback+0x98>)
 80002f4:	f001 f906 	bl	8001504 <HAL_ADC_Start_IT>
}
 80002f8:	bf00      	nop
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000034 	.word	0x20000034
 8000304:	20000598 	.word	0x20000598
 8000308:	2000059c 	.word	0x2000059c
 800030c:	20000008 	.word	0x20000008
 8000310:	20000594 	.word	0x20000594

08000314 <setDimstep>:

void setDimstep(int val) {
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	if(val >= 0 && val <= 9) {
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b00      	cmp	r3, #0
 8000320:	db2d      	blt.n	800037e <setDimstep+0x6a>
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2b09      	cmp	r3, #9
 8000326:	dc2a      	bgt.n	800037e <setDimstep+0x6a>
		dimstep = val;
 8000328:	4a18      	ldr	r2, [pc, #96]	; (800038c <setDimstep+0x78>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	6013      	str	r3, [r2, #0]
		TIM1->CCR1 = (lights >= 1) ? dimstep : 0;
 800032e:	4b18      	ldr	r3, [pc, #96]	; (8000390 <setDimstep+0x7c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	dd02      	ble.n	800033c <setDimstep+0x28>
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <setDimstep+0x78>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	e000      	b.n	800033e <setDimstep+0x2a>
 800033c:	2300      	movs	r3, #0
 800033e:	4a15      	ldr	r2, [pc, #84]	; (8000394 <setDimstep+0x80>)
 8000340:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = (lights >= 2) ? dimstep : 0;
 8000342:	4b13      	ldr	r3, [pc, #76]	; (8000390 <setDimstep+0x7c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b01      	cmp	r3, #1
 8000348:	dd02      	ble.n	8000350 <setDimstep+0x3c>
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <setDimstep+0x78>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	e000      	b.n	8000352 <setDimstep+0x3e>
 8000350:	2300      	movs	r3, #0
 8000352:	4a10      	ldr	r2, [pc, #64]	; (8000394 <setDimstep+0x80>)
 8000354:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = (lights >= 3) ? dimstep : 0;
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <setDimstep+0x7c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b02      	cmp	r3, #2
 800035c:	dd02      	ble.n	8000364 <setDimstep+0x50>
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <setDimstep+0x78>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	e000      	b.n	8000366 <setDimstep+0x52>
 8000364:	2300      	movs	r3, #0
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <setDimstep+0x80>)
 8000368:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM1->CCR4 = (lights >= 4) ? dimstep : 0;
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <setDimstep+0x7c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b03      	cmp	r3, #3
 8000370:	dd02      	ble.n	8000378 <setDimstep+0x64>
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <setDimstep+0x78>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	e000      	b.n	800037a <setDimstep+0x66>
 8000378:	2300      	movs	r3, #0
 800037a:	4a06      	ldr	r2, [pc, #24]	; (8000394 <setDimstep+0x80>)
 800037c:	6413      	str	r3, [r2, #64]	; 0x40
	} else {
//		printError();
	}
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	20000000 	.word	0x20000000
 8000390:	20000004 	.word	0x20000004
 8000394:	40012c00 	.word	0x40012c00

08000398 <setLights>:

void setLights(int val) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	if(val >= 0 && val <= 4) {
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	db0a      	blt.n	80003bc <setLights+0x24>
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2b04      	cmp	r3, #4
 80003aa:	dc07      	bgt.n	80003bc <setLights+0x24>
		lights = val;
 80003ac:	4a05      	ldr	r2, [pc, #20]	; (80003c4 <setLights+0x2c>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6013      	str	r3, [r2, #0]
		setDimstep(dimstep);
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <setLights+0x30>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ffac 	bl	8000314 <setDimstep>
	}
	else {
//		printError();
	}
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000004 	.word	0x20000004
 80003c8:	20000000 	.word	0x20000000

080003cc <HAL_UART_RxCpltCallback>:
	dest[i] = '\0';

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART2)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a20      	ldr	r2, [pc, #128]	; (800045c <HAL_UART_RxCpltCallback+0x90>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d139      	bne.n	8000452 <HAL_UART_RxCpltCallback+0x86>
    {
    	static unsigned char command[10];
    	static int in_val;
//    	commandExtract(command, 10, in_data);
    	if(in_data[0] == 'D') {
 80003de:	4b20      	ldr	r3, [pc, #128]	; (8000460 <HAL_UART_RxCpltCallback+0x94>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b44      	cmp	r3, #68	; 0x44
 80003e4:	d119      	bne.n	800041a <HAL_UART_RxCpltCallback+0x4e>
    		HAL_UART_Receive(&huart2, in_data, 1, 100);
 80003e6:	2364      	movs	r3, #100	; 0x64
 80003e8:	2201      	movs	r2, #1
 80003ea:	491d      	ldr	r1, [pc, #116]	; (8000460 <HAL_UART_RxCpltCallback+0x94>)
 80003ec:	481d      	ldr	r0, [pc, #116]	; (8000464 <HAL_UART_RxCpltCallback+0x98>)
 80003ee:	f005 ff07 	bl	8006200 <HAL_UART_Receive>
    		message[0] = '\n';
 80003f2:	4b1d      	ldr	r3, [pc, #116]	; (8000468 <HAL_UART_RxCpltCallback+0x9c>)
 80003f4:	220a      	movs	r2, #10
 80003f6:	701a      	strb	r2, [r3, #0]
    		HAL_UART_Transmit(&huart2, message, 1, 100);
 80003f8:	2364      	movs	r3, #100	; 0x64
 80003fa:	2201      	movs	r2, #1
 80003fc:	491a      	ldr	r1, [pc, #104]	; (8000468 <HAL_UART_RxCpltCallback+0x9c>)
 80003fe:	4819      	ldr	r0, [pc, #100]	; (8000464 <HAL_UART_RxCpltCallback+0x98>)
 8000400:	f005 fe74 	bl	80060ec <HAL_UART_Transmit>
    		in_val = in_data[0] - '0';
 8000404:	4b16      	ldr	r3, [pc, #88]	; (8000460 <HAL_UART_RxCpltCallback+0x94>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	3b30      	subs	r3, #48	; 0x30
 800040a:	4a18      	ldr	r2, [pc, #96]	; (800046c <HAL_UART_RxCpltCallback+0xa0>)
 800040c:	6013      	str	r3, [r2, #0]
    		setDimstep(in_val);
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <HAL_UART_RxCpltCallback+0xa0>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff7e 	bl	8000314 <setDimstep>
 8000418:	e016      	b.n	8000448 <HAL_UART_RxCpltCallback+0x7c>
    	}
    	else if(in_data[0] == 'L') {
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <HAL_UART_RxCpltCallback+0x94>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b4c      	cmp	r3, #76	; 0x4c
 8000420:	d112      	bne.n	8000448 <HAL_UART_RxCpltCallback+0x7c>
    		message[0] = '\n';
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <HAL_UART_RxCpltCallback+0x9c>)
 8000424:	220a      	movs	r2, #10
 8000426:	701a      	strb	r2, [r3, #0]
    		HAL_UART_Transmit(&huart2, message, 1, 100);
 8000428:	2364      	movs	r3, #100	; 0x64
 800042a:	2201      	movs	r2, #1
 800042c:	490e      	ldr	r1, [pc, #56]	; (8000468 <HAL_UART_RxCpltCallback+0x9c>)
 800042e:	480d      	ldr	r0, [pc, #52]	; (8000464 <HAL_UART_RxCpltCallback+0x98>)
 8000430:	f005 fe5c 	bl	80060ec <HAL_UART_Transmit>
    		in_val = in_data[7] - '0';
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <HAL_UART_RxCpltCallback+0x94>)
 8000436:	79db      	ldrb	r3, [r3, #7]
 8000438:	3b30      	subs	r3, #48	; 0x30
 800043a:	4a0c      	ldr	r2, [pc, #48]	; (800046c <HAL_UART_RxCpltCallback+0xa0>)
 800043c:	6013      	str	r3, [r2, #0]
    		setLights(in_val);
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <HAL_UART_RxCpltCallback+0xa0>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ffa8 	bl	8000398 <setLights>
//    		HAL_UART_Receive(&huart2, in_data, 1, 100);
//    		in_val = in_data[0] - '0';
//    		setWarnnum(in_val);
//    	}

    	HAL_UART_Receive_IT(&huart2, in_data, 8);
 8000448:	2208      	movs	r2, #8
 800044a:	4905      	ldr	r1, [pc, #20]	; (8000460 <HAL_UART_RxCpltCallback+0x94>)
 800044c:	4805      	ldr	r0, [pc, #20]	; (8000464 <HAL_UART_RxCpltCallback+0x98>)
 800044e:	f005 ff8d 	bl	800636c <HAL_UART_Receive_IT>

    }
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40004400 	.word	0x40004400
 8000460:	200004fc 	.word	0x200004fc
 8000464:	20000188 	.word	0x20000188
 8000468:	20000560 	.word	0x20000560
 800046c:	200005c4 	.word	0x200005c4

08000470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000474:	f000 fdc8 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000478:	f000 f836 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047c:	f000 faac 	bl	80009d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000480:	f000 f90a 	bl	8000698 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000484:	f000 f948 	bl	8000718 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000488:	f000 fa84 	bl	8000994 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 800048c:	f000 f894 	bl	80005b8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000490:	f000 fa50 	bl	8000934 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000494:	f000 f97e 	bl	8000794 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000498:	2100      	movs	r1, #0
 800049a:	480e      	ldr	r0, [pc, #56]	; (80004d4 <main+0x64>)
 800049c:	f004 fbd0 	bl	8004c40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80004a0:	2104      	movs	r1, #4
 80004a2:	480c      	ldr	r0, [pc, #48]	; (80004d4 <main+0x64>)
 80004a4:	f004 fbcc 	bl	8004c40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80004a8:	2108      	movs	r1, #8
 80004aa:	480a      	ldr	r0, [pc, #40]	; (80004d4 <main+0x64>)
 80004ac:	f004 fbc8 	bl	8004c40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80004b0:	210c      	movs	r1, #12
 80004b2:	4808      	ldr	r0, [pc, #32]	; (80004d4 <main+0x64>)
 80004b4:	f004 fbc4 	bl	8004c40 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_IT(&hadc1);
 80004b8:	4807      	ldr	r0, [pc, #28]	; (80004d8 <main+0x68>)
 80004ba:	f001 f823 	bl	8001504 <HAL_ADC_Start_IT>
  HAL_UART_Receive_IT(&huart2, in_data, 8);
 80004be:	2208      	movs	r2, #8
 80004c0:	4906      	ldr	r1, [pc, #24]	; (80004dc <main+0x6c>)
 80004c2:	4807      	ldr	r0, [pc, #28]	; (80004e0 <main+0x70>)
 80004c4:	f005 ff52 	bl	800636c <HAL_UART_Receive_IT>
  setDimstep(dimstep);
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <main+0x74>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff21 	bl	8000314 <setDimstep>

  while (1)
 80004d2:	e7fe      	b.n	80004d2 <main+0x62>
 80004d4:	2000013c 	.word	0x2000013c
 80004d8:	20000034 	.word	0x20000034
 80004dc:	200004fc 	.word	0x200004fc
 80004e0:	20000188 	.word	0x20000188
 80004e4:	20000000 	.word	0x20000000

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09e      	sub	sp, #120	; 0x78
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004f2:	2228      	movs	r2, #40	; 0x28
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f007 f972 	bl	80077e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	223c      	movs	r2, #60	; 0x3c
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f007 f964 	bl	80077e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000518:	2303      	movs	r3, #3
 800051a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800051c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000520:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000526:	2301      	movs	r3, #1
 8000528:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052a:	2310      	movs	r3, #16
 800052c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000536:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000538:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800053c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000542:	4618      	mov	r0, r3
 8000544:	f002 fdf4 	bl	8003130 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800054e:	f000 fac1 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	230f      	movs	r3, #15
 8000554:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	2302      	movs	r3, #2
 8000558:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800055e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000568:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800056c:	2101      	movs	r1, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fe1c 	bl	80041ac <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800057a:	f000 faab 	bl	8000ad4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <SystemClock_Config+0xcc>)
 8000580:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800058a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000590:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000596:	2300      	movs	r3, #0
 8000598:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800059a:	463b      	mov	r3, r7
 800059c:	4618      	mov	r0, r3
 800059e:	f004 f83b 	bl	8004618 <HAL_RCCEx_PeriphCLKConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005a8:	f000 fa94 	bl	8000ad4 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3778      	adds	r7, #120	; 0x78
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	000210a2 	.word	0x000210a2

080005b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
 80005d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <MX_ADC1_Init+0xdc>)
 80005dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005e2:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <MX_ADC1_Init+0xdc>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e8:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <MX_ADC1_Init+0xdc>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ee:	4b29      	ldr	r3, [pc, #164]	; (8000694 <MX_ADC1_Init+0xdc>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_ADC1_Init+0xdc>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005fa:	4b26      	ldr	r3, [pc, #152]	; (8000694 <MX_ADC1_Init+0xdc>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000602:	4b24      	ldr	r3, [pc, #144]	; (8000694 <MX_ADC1_Init+0xdc>)
 8000604:	2200      	movs	r2, #0
 8000606:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_ADC1_Init+0xdc>)
 800060a:	2201      	movs	r2, #1
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_ADC1_Init+0xdc>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC1_Init+0xdc>)
 8000616:	2201      	movs	r2, #1
 8000618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_ADC1_Init+0xdc>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_ADC1_Init+0xdc>)
 8000624:	2204      	movs	r2, #4
 8000626:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ADC1_Init+0xdc>)
 800062a:	2200      	movs	r2, #0
 800062c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_ADC1_Init+0xdc>)
 8000630:	2200      	movs	r2, #0
 8000632:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000634:	4817      	ldr	r0, [pc, #92]	; (8000694 <MX_ADC1_Init+0xdc>)
 8000636:	f000 fd85 	bl	8001144 <HAL_ADC_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000640:	f000 fa48 	bl	8000ad4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	4811      	ldr	r0, [pc, #68]	; (8000694 <MX_ADC1_Init+0xdc>)
 8000650:	f001 fea0 	bl	8002394 <HAL_ADCEx_MultiModeConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800065a:	f000 fa3b 	bl	8000ad4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800065e:	2302      	movs	r3, #2
 8000660:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000662:	2301      	movs	r3, #1
 8000664:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800066a:	2307      	movs	r3, #7
 800066c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4619      	mov	r1, r3
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <MX_ADC1_Init+0xdc>)
 800067c:	f001 fb9e 	bl	8001dbc <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000686:	f000 fa25 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	3728      	adds	r7, #40	; 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000034 	.word	0x20000034

08000698 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_I2C1_Init+0x74>)
 800069e:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <MX_I2C1_Init+0x78>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_I2C1_Init+0x74>)
 80006a4:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <MX_I2C1_Init+0x7c>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_I2C1_Init+0x74>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_I2C1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d2:	480e      	ldr	r0, [pc, #56]	; (800070c <MX_I2C1_Init+0x74>)
 80006d4:	f002 fb34 	bl	8002d40 <HAL_I2C_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006de:	f000 f9f9 	bl	8000ad4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4809      	ldr	r0, [pc, #36]	; (800070c <MX_I2C1_Init+0x74>)
 80006e6:	f002 fbba 	bl	8002e5e <HAL_I2CEx_ConfigAnalogFilter>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006f0:	f000 f9f0 	bl	8000ad4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f4:	2100      	movs	r1, #0
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_I2C1_Init+0x74>)
 80006f8:	f002 fbfc 	bl	8002ef4 <HAL_I2CEx_ConfigDigitalFilter>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000702:	f000 f9e7 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000084 	.word	0x20000084
 8000710:	40005400 	.word	0x40005400
 8000714:	2000090e 	.word	0x2000090e

08000718 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_SPI1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_SPI1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_SPI1_Init+0x74>)
 8000724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_SPI1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI1_Init+0x74>)
 8000732:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000736:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI1_Init+0x74>)
 8000746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI1_Init+0x74>)
 800074e:	2208      	movs	r2, #8
 8000750:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_SPI1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI1_Init+0x74>)
 8000766:	2207      	movs	r2, #7
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI1_Init+0x74>)
 8000772:	2208      	movs	r2, #8
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_SPI1_Init+0x74>)
 8000778:	f004 f8fe 	bl	8004978 <HAL_SPI_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 f9a7 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200000d8 	.word	0x200000d8
 8000790:	40013000 	.word	0x40013000

08000794 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09a      	sub	sp, #104	; 0x68
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]
 80007c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	222c      	movs	r2, #44	; 0x2c
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f007 f806 	bl	80077e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d4:	4b55      	ldr	r3, [pc, #340]	; (800092c <MX_TIM1_Init+0x198>)
 80007d6:	4a56      	ldr	r2, [pc, #344]	; (8000930 <MX_TIM1_Init+0x19c>)
 80007d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4799;
 80007da:	4b54      	ldr	r3, [pc, #336]	; (800092c <MX_TIM1_Init+0x198>)
 80007dc:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80007e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b52      	ldr	r3, [pc, #328]	; (800092c <MX_TIM1_Init+0x198>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 80007e8:	4b50      	ldr	r3, [pc, #320]	; (800092c <MX_TIM1_Init+0x198>)
 80007ea:	2209      	movs	r2, #9
 80007ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ee:	4b4f      	ldr	r3, [pc, #316]	; (800092c <MX_TIM1_Init+0x198>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007f4:	4b4d      	ldr	r3, [pc, #308]	; (800092c <MX_TIM1_Init+0x198>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b4c      	ldr	r3, [pc, #304]	; (800092c <MX_TIM1_Init+0x198>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000800:	484a      	ldr	r0, [pc, #296]	; (800092c <MX_TIM1_Init+0x198>)
 8000802:	f004 f964 	bl	8004ace <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800080c:	f000 f962 	bl	8000ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000816:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800081a:	4619      	mov	r1, r3
 800081c:	4843      	ldr	r0, [pc, #268]	; (800092c <MX_TIM1_Init+0x198>)
 800081e:	f004 fdd9 	bl	80053d4 <HAL_TIM_ConfigClockSource>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000828:	f000 f954 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800082c:	483f      	ldr	r0, [pc, #252]	; (800092c <MX_TIM1_Init+0x198>)
 800082e:	f004 f9a5 	bl	8004b7c <HAL_TIM_PWM_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000838:	f000 f94c 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000848:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800084c:	4619      	mov	r1, r3
 800084e:	4837      	ldr	r0, [pc, #220]	; (800092c <MX_TIM1_Init+0x198>)
 8000850:	f005 fae2 	bl	8005e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800085a:	f000 f93b 	bl	8000ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085e:	2360      	movs	r3, #96	; 0x60
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000866:	2300      	movs	r3, #0
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800086a:	2300      	movs	r3, #0
 800086c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	482a      	ldr	r0, [pc, #168]	; (800092c <MX_TIM1_Init+0x198>)
 8000884:	f004 fc92 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800088e:	f000 f921 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000896:	2204      	movs	r2, #4
 8000898:	4619      	mov	r1, r3
 800089a:	4824      	ldr	r0, [pc, #144]	; (800092c <MX_TIM1_Init+0x198>)
 800089c:	f004 fc86 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80008a6:	f000 f915 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008ae:	2208      	movs	r2, #8
 80008b0:	4619      	mov	r1, r3
 80008b2:	481e      	ldr	r0, [pc, #120]	; (800092c <MX_TIM1_Init+0x198>)
 80008b4:	f004 fc7a 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80008be:	f000 f909 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008c6:	220c      	movs	r2, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	4818      	ldr	r0, [pc, #96]	; (800092c <MX_TIM1_Init+0x198>)
 80008cc:	f004 fc6e 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80008d6:	f000 f8fd 	bl	8000ad4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4619      	mov	r1, r3
 800090e:	4807      	ldr	r0, [pc, #28]	; (800092c <MX_TIM1_Init+0x198>)
 8000910:	f005 fb02 	bl	8005f18 <HAL_TIMEx_ConfigBreakDeadTime>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 800091a:	f000 f8db 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800091e:	4803      	ldr	r0, [pc, #12]	; (800092c <MX_TIM1_Init+0x198>)
 8000920:	f000 fa0a 	bl	8000d38 <HAL_TIM_MspPostInit>

}
 8000924:	bf00      	nop
 8000926:	3768      	adds	r7, #104	; 0x68
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000013c 	.word	0x2000013c
 8000930:	40012c00 	.word	0x40012c00

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART2_UART_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_USART2_UART_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000940:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART2_UART_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000978:	f005 fb6a 	bl	8006050 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000982:	f000 f8a7 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000188 	.word	0x20000188
 8000990:	40004400 	.word	0x40004400

08000994 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <MX_USB_PCD_Init+0x3c>)
 800099a:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <MX_USB_PCD_Init+0x40>)
 800099c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USB_PCD_Init+0x3c>)
 80009a0:	2208      	movs	r2, #8
 80009a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_USB_PCD_Init+0x3c>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USB_PCD_Init+0x3c>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_USB_PCD_Init+0x3c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USB_PCD_Init+0x3c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_USB_PCD_Init+0x3c>)
 80009be:	f002 fae5 	bl	8002f8c <HAL_PCD_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80009c8:	f000 f884 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000210 	.word	0x20000210
 80009d4:	40005c00 	.word	0x40005c00

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ee:	4b37      	ldr	r3, [pc, #220]	; (8000acc <MX_GPIO_Init+0xf4>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a36      	ldr	r2, [pc, #216]	; (8000acc <MX_GPIO_Init+0xf4>)
 80009f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	4b34      	ldr	r3, [pc, #208]	; (8000acc <MX_GPIO_Init+0xf4>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b31      	ldr	r3, [pc, #196]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a30      	ldr	r2, [pc, #192]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a10:	6153      	str	r3, [r2, #20]
 8000a12:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1e:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	4a2a      	ldr	r2, [pc, #168]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a28:	6153      	str	r3, [r2, #20]
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	4a24      	ldr	r2, [pc, #144]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	6153      	str	r3, [r2, #20]
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a58:	6153      	str	r3, [r2, #20]
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_GPIO_Init+0xf4>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD5_Pin|LD9_Pin
 8000a66:	2200      	movs	r2, #0
 8000a68:	f249 5108 	movw	r1, #38152	; 0x9508
 8000a6c:	4818      	ldr	r0, [pc, #96]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000a6e:	f002 f94f 	bl	8002d10 <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000a72:	2337      	movs	r3, #55	; 0x37
 8000a74:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a76:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000a88:	f001 ffc8 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD5_Pin LD9_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD5_Pin|LD9_Pin
 8000a8c:	f249 5308 	movw	r3, #38152	; 0x9508
 8000a90:	617b      	str	r3, [r7, #20]
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000aa6:	f001 ffb9 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac0:	f001 ffac 	bl	8002a1c <HAL_GPIO_Init>

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48001000 	.word	0x48001000

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_MspInit+0x44>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_MspInit+0x44>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_MspInit+0x44>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x44>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x44>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x44>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000b16:	2005      	movs	r0, #5
 8000b18:	f001 fec8 	bl	80028ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b48:	d12c      	bne.n	8000ba4 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_ADC_MspInit+0x84>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_ADC_MspInit+0x84>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6153      	str	r3, [r2, #20]
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_ADC_MspInit+0x84>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_ADC_MspInit+0x84>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <HAL_ADC_MspInit+0x84>)
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	6153      	str	r3, [r2, #20]
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_ADC_MspInit+0x84>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b90:	f001 ff44 	bl	8002a1c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2101      	movs	r1, #1
 8000b98:	2012      	movs	r0, #18
 8000b9a:	f001 fe92 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b9e:	2012      	movs	r0, #18
 8000ba0:	f001 feab 	bl	80028fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_I2C_MspInit+0x7c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d127      	bne.n	8000c22 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a16      	ldr	r2, [pc, #88]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bdc:	6153      	str	r3, [r2, #20]
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000bea:	23c0      	movs	r3, #192	; 0xc0
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bee:	2312      	movs	r3, #18
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <HAL_I2C_MspInit+0x84>)
 8000c06:	f001 ff09 	bl	8002a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48000400 	.word	0x48000400

08000c38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <HAL_SPI_MspInit+0x7c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d128      	bne.n	8000cac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_SPI_MspInit+0x80>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	4a16      	ldr	r2, [pc, #88]	; (8000cb8 <HAL_SPI_MspInit+0x80>)
 8000c60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c64:	6193      	str	r3, [r2, #24]
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_SPI_MspInit+0x80>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_SPI_MspInit+0x80>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_SPI_MspInit+0x80>)
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	6153      	str	r3, [r2, #20]
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_SPI_MspInit+0x80>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000c8a:	23e0      	movs	r3, #224	; 0xe0
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f001 feb8 	bl	8002a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40013000 	.word	0x40013000
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <HAL_TIM_Base_MspInit+0x74>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12b      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_TIM_Base_MspInit+0x78>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <HAL_TIM_Base_MspInit+0x78>)
 8000cd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_TIM_Base_MspInit+0x78>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2018      	movs	r0, #24
 8000cec:	f001 fde9 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000cf0:	2018      	movs	r0, #24
 8000cf2:	f001 fe02 	bl	80028fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2019      	movs	r0, #25
 8000cfc:	f001 fde1 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d00:	2019      	movs	r0, #25
 8000d02:	f001 fdfa 	bl	80028fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	201a      	movs	r0, #26
 8000d0c:	f001 fdd9 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000d10:	201a      	movs	r0, #26
 8000d12:	f001 fdf2 	bl	80028fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201b      	movs	r0, #27
 8000d1c:	f001 fdd1 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d20:	201b      	movs	r0, #27
 8000d22:	f001 fdea 	bl	80028fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40012c00 	.word	0x40012c00
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <HAL_TIM_MspPostInit+0x64>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d11c      	bne.n	8000d94 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_TIM_MspPostInit+0x68>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_TIM_MspPostInit+0x68>)
 8000d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d64:	6153      	str	r3, [r2, #20]
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_TIM_MspPostInit+0x68>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000d72:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000d76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_TIM_MspPostInit+0x6c>)
 8000d90:	f001 fe44 	bl	8002a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d94:	bf00      	nop
 8000d96:	3720      	adds	r7, #32
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40012c00 	.word	0x40012c00
 8000da0:	40021000 	.word	0x40021000
 8000da4:	48001000 	.word	0x48001000

08000da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <HAL_UART_MspInit+0x8c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d130      	bne.n	8000e2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <HAL_UART_MspInit+0x90>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <HAL_UART_MspInit+0x90>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_UART_MspInit+0x90>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_UART_MspInit+0x90>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0x90>)
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_UART_MspInit+0x90>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f001 fe00 	bl	8002a1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2026      	movs	r0, #38	; 0x26
 8000e22:	f001 fd4e 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e26:	2026      	movs	r0, #38	; 0x26
 8000e28:	f001 fd67 	bl	80028fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40004400 	.word	0x40004400
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <HAL_PCD_MspInit+0x80>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d129      	bne.n	8000eb2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_PCD_MspInit+0x84>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_PCD_MspInit+0x84>)
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	6153      	str	r3, [r2, #20]
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_PCD_MspInit+0x84>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000e76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000e88:	230e      	movs	r3, #14
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e96:	f001 fdc1 	bl	8002a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_PCD_MspInit+0x84>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_PCD_MspInit+0x84>)
 8000ea0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_PCD_MspInit+0x84>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40005c00 	.word	0x40005c00
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f8c0 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <ADC1_2_IRQHandler+0x10>)
 8000f1e:	f000 fc3f 	bl	80017a0 <HAL_ADC_IRQHandler>
//  HAL_Delay(500);
//  HAL_ADC_Start_IT(&hadc1);
//

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000034 	.word	0x20000034

08000f2c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000f32:	f004 f81b 	bl	8004f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000013c 	.word	0x2000013c

08000f40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f46:	f004 f811 	bl	8004f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000013c 	.word	0x2000013c

08000f54 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000f5a:	f004 f807 	bl	8004f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000013c 	.word	0x2000013c

08000f68 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM1_CC_IRQHandler+0x10>)
 8000f6e:	f003 fffd 	bl	8004f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000013c 	.word	0x2000013c

08000f7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <USART2_IRQHandler+0x10>)
 8000f82:	f005 fa37 	bl	80063f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000188 	.word	0x20000188

08000f90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb8:	f7ff ffea 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f006 fbd9 	bl	8007798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe6:	f7ff fa43 	bl	8000470 <main>

08000fea <LoopForever>:

LoopForever:
    b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ff8:	08007860 	.word	0x08007860
  ldr r2, =_sbss
 8000ffc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001000:	200005cc 	.word	0x200005cc

08001004 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC3_IRQHandler>
	...

08001008 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_Init+0x28>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_Init+0x28>)
 8001012:	f043 0310 	orr.w	r3, r3, #16
 8001016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f001 fc47 	bl	80028ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f808 	bl	8001034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001024:	f7ff fd5c 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40022000 	.word	0x40022000

08001034 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x54>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fc5f 	bl	8002916 <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00e      	b.n	8001080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d80a      	bhi.n	800107e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f001 fc27 	bl	80028c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <HAL_InitTick+0x5c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000000c 	.word	0x2000000c
 800108c:	20000014 	.word	0x20000014
 8001090:	20000010 	.word	0x20000010

08001094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000014 	.word	0x20000014
 80010b8:	200005c8 	.word	0x200005c8

080010bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;  
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200005c8 	.word	0x200005c8

080010d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000014 	.word	0x20000014

0800111c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b09a      	sub	sp, #104	; 0x68
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e1c9      	b.n	80014f8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b00      	cmp	r3, #0
 8001174:	d176      	bne.n	8001264 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	2b00      	cmp	r3, #0
 800117c:	d152      	bne.n	8001224 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff fcc5 	bl	8000b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d13b      	bne.n	8001224 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f001 fa47 	bl	8002640 <ADC_Disable>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d12f      	bne.n	8001224 <HAL_ADC_Init+0xe0>
 80011c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d12b      	bne.n	8001224 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011d4:	f023 0302 	bic.w	r3, r3, #2
 80011d8:	f043 0202 	orr.w	r2, r3, #2
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011ee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011fe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001200:	4b86      	ldr	r3, [pc, #536]	; (800141c <HAL_ADC_Init+0x2d8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a86      	ldr	r2, [pc, #536]	; (8001420 <HAL_ADC_Init+0x2dc>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	0c9a      	lsrs	r2, r3, #18
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001216:	e002      	b.n	800121e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	3b01      	subs	r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f9      	bne.n	8001218 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800123c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001240:	d110      	bne.n	8001264 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f023 0312 	bic.w	r3, r3, #18
 800124a:	f043 0210 	orr.w	r2, r3, #16
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f043 0201 	orr.w	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	2b00      	cmp	r3, #0
 800126e:	f040 8136 	bne.w	80014de <HAL_ADC_Init+0x39a>
 8001272:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001276:	2b00      	cmp	r3, #0
 8001278:	f040 8131 	bne.w	80014de <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 8129 	bne.w	80014de <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001294:	f043 0202 	orr.w	r2, r3, #2
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012a4:	d004      	beq.n	80012b0 <HAL_ADC_Init+0x16c>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a5e      	ldr	r2, [pc, #376]	; (8001424 <HAL_ADC_Init+0x2e0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d101      	bne.n	80012b4 <HAL_ADC_Init+0x170>
 80012b0:	4b5d      	ldr	r3, [pc, #372]	; (8001428 <HAL_ADC_Init+0x2e4>)
 80012b2:	e000      	b.n	80012b6 <HAL_ADC_Init+0x172>
 80012b4:	4b5d      	ldr	r3, [pc, #372]	; (800142c <HAL_ADC_Init+0x2e8>)
 80012b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012c0:	d102      	bne.n	80012c8 <HAL_ADC_Init+0x184>
 80012c2:	4b58      	ldr	r3, [pc, #352]	; (8001424 <HAL_ADC_Init+0x2e0>)
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e01a      	b.n	80012fe <HAL_ADC_Init+0x1ba>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a55      	ldr	r2, [pc, #340]	; (8001424 <HAL_ADC_Init+0x2e0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d103      	bne.n	80012da <HAL_ADC_Init+0x196>
 80012d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	e011      	b.n	80012fe <HAL_ADC_Init+0x1ba>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a54      	ldr	r2, [pc, #336]	; (8001430 <HAL_ADC_Init+0x2ec>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d102      	bne.n	80012ea <HAL_ADC_Init+0x1a6>
 80012e4:	4b53      	ldr	r3, [pc, #332]	; (8001434 <HAL_ADC_Init+0x2f0>)
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	e009      	b.n	80012fe <HAL_ADC_Init+0x1ba>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a51      	ldr	r2, [pc, #324]	; (8001434 <HAL_ADC_Init+0x2f0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d102      	bne.n	80012fa <HAL_ADC_Init+0x1b6>
 80012f4:	4b4e      	ldr	r3, [pc, #312]	; (8001430 <HAL_ADC_Init+0x2ec>)
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e001      	b.n	80012fe <HAL_ADC_Init+0x1ba>
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b01      	cmp	r3, #1
 800130a:	d108      	bne.n	800131e <HAL_ADC_Init+0x1da>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_ADC_Init+0x1da>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_ADC_Init+0x1dc>
 800131e:	2300      	movs	r3, #0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d11c      	bne.n	800135e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001324:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001326:	2b00      	cmp	r3, #0
 8001328:	d010      	beq.n	800134c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b01      	cmp	r3, #1
 8001334:	d107      	bne.n	8001346 <HAL_ADC_Init+0x202>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <HAL_ADC_Init+0x202>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_ADC_Init+0x204>
 8001346:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001348:	2b00      	cmp	r3, #0
 800134a:	d108      	bne.n	800135e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800134c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	431a      	orrs	r2, r3
 800135a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7e5b      	ldrb	r3, [r3, #25]
 8001362:	035b      	lsls	r3, r3, #13
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001368:	2a01      	cmp	r2, #1
 800136a:	d002      	beq.n	8001372 <HAL_ADC_Init+0x22e>
 800136c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001370:	e000      	b.n	8001374 <HAL_ADC_Init+0x230>
 8001372:	2200      	movs	r2, #0
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	4313      	orrs	r3, r2
 8001382:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001384:	4313      	orrs	r3, r2
 8001386:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d11b      	bne.n	80013ca <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7e5b      	ldrb	r3, [r3, #25]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d109      	bne.n	80013ae <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	3b01      	subs	r3, #1
 80013a0:	045a      	lsls	r2, r3, #17
 80013a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013a4:	4313      	orrs	r3, r2
 80013a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013aa:	663b      	str	r3, [r7, #96]	; 0x60
 80013ac:	e00d      	b.n	80013ca <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80013b6:	f043 0220 	orr.w	r2, r3, #32
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f043 0201 	orr.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d03a      	beq.n	8001448 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a16      	ldr	r2, [pc, #88]	; (8001430 <HAL_ADC_Init+0x2ec>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d004      	beq.n	80013e6 <HAL_ADC_Init+0x2a2>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <HAL_ADC_Init+0x2f0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d128      	bne.n	8001438 <HAL_ADC_Init+0x2f4>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80013ee:	d012      	beq.n	8001416 <HAL_ADC_Init+0x2d2>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013f8:	d00a      	beq.n	8001410 <HAL_ADC_Init+0x2cc>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001402:	d002      	beq.n	800140a <HAL_ADC_Init+0x2c6>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	e018      	b.n	800143c <HAL_ADC_Init+0x2f8>
 800140a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800140e:	e015      	b.n	800143c <HAL_ADC_Init+0x2f8>
 8001410:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001414:	e012      	b.n	800143c <HAL_ADC_Init+0x2f8>
 8001416:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800141a:	e00f      	b.n	800143c <HAL_ADC_Init+0x2f8>
 800141c:	2000000c 	.word	0x2000000c
 8001420:	431bde83 	.word	0x431bde83
 8001424:	50000100 	.word	0x50000100
 8001428:	50000300 	.word	0x50000300
 800142c:	50000700 	.word	0x50000700
 8001430:	50000400 	.word	0x50000400
 8001434:	50000500 	.word	0x50000500
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001440:	4313      	orrs	r3, r2
 8001442:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001444:	4313      	orrs	r3, r2
 8001446:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b00      	cmp	r3, #0
 8001454:	d114      	bne.n	8001480 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001464:	f023 0302 	bic.w	r3, r3, #2
 8001468:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7e1b      	ldrb	r3, [r3, #24]
 800146e:	039a      	lsls	r2, r3, #14
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4313      	orrs	r3, r2
 800147a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800147c:	4313      	orrs	r3, r2
 800147e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <HAL_ADC_Init+0x3bc>)
 8001488:	4013      	ands	r3, r2
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001490:	430b      	orrs	r3, r1
 8001492:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d10c      	bne.n	80014b6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f023 010f 	bic.w	r1, r3, #15
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	1e5a      	subs	r2, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
 80014b4:	e007      	b.n	80014c6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 020f 	bic.w	r2, r2, #15
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f023 0303 	bic.w	r3, r3, #3
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	641a      	str	r2, [r3, #64]	; 0x40
 80014dc:	e00a      	b.n	80014f4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f023 0312 	bic.w	r3, r3, #18
 80014e6:	f043 0210 	orr.w	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80014ee:	2301      	movs	r3, #1
 80014f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80014f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3768      	adds	r7, #104	; 0x68
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	fff0c007 	.word	0xfff0c007

08001504 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 8123 	bne.w	8001766 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001526:	2b01      	cmp	r3, #1
 8001528:	d101      	bne.n	800152e <HAL_ADC_Start_IT+0x2a>
 800152a:	2302      	movs	r3, #2
 800152c:	e11e      	b.n	800176c <HAL_ADC_Start_IT+0x268>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f001 f81e 	bl	8002578 <ADC_Enable>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 810a 	bne.w	800175c <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001564:	d004      	beq.n	8001570 <HAL_ADC_Start_IT+0x6c>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a82      	ldr	r2, [pc, #520]	; (8001774 <HAL_ADC_Start_IT+0x270>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d106      	bne.n	800157e <HAL_ADC_Start_IT+0x7a>
 8001570:	4b81      	ldr	r3, [pc, #516]	; (8001778 <HAL_ADC_Start_IT+0x274>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	2b00      	cmp	r3, #0
 800157a:	d010      	beq.n	800159e <HAL_ADC_Start_IT+0x9a>
 800157c:	e005      	b.n	800158a <HAL_ADC_Start_IT+0x86>
 800157e:	4b7f      	ldr	r3, [pc, #508]	; (800177c <HAL_ADC_Start_IT+0x278>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	2b00      	cmp	r3, #0
 8001588:	d009      	beq.n	800159e <HAL_ADC_Start_IT+0x9a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001592:	d004      	beq.n	800159e <HAL_ADC_Start_IT+0x9a>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a79      	ldr	r2, [pc, #484]	; (8001780 <HAL_ADC_Start_IT+0x27c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d115      	bne.n	80015ca <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d036      	beq.n	8001626 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80015c8:	e02d      	b.n	8001626 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015de:	d004      	beq.n	80015ea <HAL_ADC_Start_IT+0xe6>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a63      	ldr	r2, [pc, #396]	; (8001774 <HAL_ADC_Start_IT+0x270>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d10a      	bne.n	8001600 <HAL_ADC_Start_IT+0xfc>
 80015ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf14      	ite	ne
 80015f8:	2301      	movne	r3, #1
 80015fa:	2300      	moveq	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	e008      	b.n	8001612 <HAL_ADC_Start_IT+0x10e>
 8001600:	4b5f      	ldr	r3, [pc, #380]	; (8001780 <HAL_ADC_Start_IT+0x27c>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf14      	ite	ne
 800160c:	2301      	movne	r3, #1
 800160e:	2300      	moveq	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800161e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001632:	d106      	bne.n	8001642 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001638:	f023 0206 	bic.w	r2, r3, #6
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	645a      	str	r2, [r3, #68]	; 0x44
 8001640:	e002      	b.n	8001648 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	221c      	movs	r2, #28
 8001656:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	2b08      	cmp	r3, #8
 800165e:	d110      	bne.n	8001682 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0204 	bic.w	r2, r2, #4
 800166e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0208 	orr.w	r2, r2, #8
 800167e:	605a      	str	r2, [r3, #4]
          break;
 8001680:	e008      	b.n	8001694 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 020c 	orr.w	r2, r2, #12
 8001690:	605a      	str	r2, [r3, #4]
          break;
 8001692:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001698:	2b01      	cmp	r3, #1
 800169a:	d107      	bne.n	80016ac <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0210 	bic.w	r2, r2, #16
 80016aa:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016b4:	d004      	beq.n	80016c0 <HAL_ADC_Start_IT+0x1bc>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a2e      	ldr	r2, [pc, #184]	; (8001774 <HAL_ADC_Start_IT+0x270>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d106      	bne.n	80016ce <HAL_ADC_Start_IT+0x1ca>
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_ADC_Start_IT+0x274>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d03e      	beq.n	800174a <HAL_ADC_Start_IT+0x246>
 80016cc:	e005      	b.n	80016da <HAL_ADC_Start_IT+0x1d6>
 80016ce:	4b2b      	ldr	r3, [pc, #172]	; (800177c <HAL_ADC_Start_IT+0x278>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 031f 	and.w	r3, r3, #31
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d037      	beq.n	800174a <HAL_ADC_Start_IT+0x246>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e2:	d004      	beq.n	80016ee <HAL_ADC_Start_IT+0x1ea>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a22      	ldr	r2, [pc, #136]	; (8001774 <HAL_ADC_Start_IT+0x270>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d106      	bne.n	80016fc <HAL_ADC_Start_IT+0x1f8>
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_ADC_Start_IT+0x274>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d027      	beq.n	800174a <HAL_ADC_Start_IT+0x246>
 80016fa:	e005      	b.n	8001708 <HAL_ADC_Start_IT+0x204>
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <HAL_ADC_Start_IT+0x278>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	2b05      	cmp	r3, #5
 8001706:	d020      	beq.n	800174a <HAL_ADC_Start_IT+0x246>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001710:	d004      	beq.n	800171c <HAL_ADC_Start_IT+0x218>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a17      	ldr	r2, [pc, #92]	; (8001774 <HAL_ADC_Start_IT+0x270>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d106      	bne.n	800172a <HAL_ADC_Start_IT+0x226>
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_ADC_Start_IT+0x274>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	2b09      	cmp	r3, #9
 8001726:	d010      	beq.n	800174a <HAL_ADC_Start_IT+0x246>
 8001728:	e005      	b.n	8001736 <HAL_ADC_Start_IT+0x232>
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_ADC_Start_IT+0x278>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	2b09      	cmp	r3, #9
 8001734:	d009      	beq.n	800174a <HAL_ADC_Start_IT+0x246>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800173e:	d004      	beq.n	800174a <HAL_ADC_Start_IT+0x246>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <HAL_ADC_Start_IT+0x27c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10f      	bne.n	800176a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0204 	orr.w	r2, r2, #4
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	e006      	b.n	800176a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001764:	e001      	b.n	800176a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001766:	2302      	movs	r3, #2
 8001768:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	50000100 	.word	0x50000100
 8001778:	50000300 	.word	0x50000300
 800177c:	50000700 	.word	0x50000700
 8001780:	50000400 	.word	0x50000400

08001784 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d004      	beq.n	80017d8 <HAL_ADC_IRQHandler+0x38>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10b      	bne.n	80017f0 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80bc 	beq.w	800195c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 80b6 	beq.w	800195c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001810:	d004      	beq.n	800181c <HAL_ADC_IRQHandler+0x7c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a90      	ldr	r2, [pc, #576]	; (8001a58 <HAL_ADC_IRQHandler+0x2b8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d106      	bne.n	800182a <HAL_ADC_IRQHandler+0x8a>
 800181c:	4b8f      	ldr	r3, [pc, #572]	; (8001a5c <HAL_ADC_IRQHandler+0x2bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	2b00      	cmp	r3, #0
 8001826:	d03e      	beq.n	80018a6 <HAL_ADC_IRQHandler+0x106>
 8001828:	e005      	b.n	8001836 <HAL_ADC_IRQHandler+0x96>
 800182a:	4b8d      	ldr	r3, [pc, #564]	; (8001a60 <HAL_ADC_IRQHandler+0x2c0>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	2b00      	cmp	r3, #0
 8001834:	d037      	beq.n	80018a6 <HAL_ADC_IRQHandler+0x106>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800183e:	d004      	beq.n	800184a <HAL_ADC_IRQHandler+0xaa>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a84      	ldr	r2, [pc, #528]	; (8001a58 <HAL_ADC_IRQHandler+0x2b8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d106      	bne.n	8001858 <HAL_ADC_IRQHandler+0xb8>
 800184a:	4b84      	ldr	r3, [pc, #528]	; (8001a5c <HAL_ADC_IRQHandler+0x2bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	2b05      	cmp	r3, #5
 8001854:	d027      	beq.n	80018a6 <HAL_ADC_IRQHandler+0x106>
 8001856:	e005      	b.n	8001864 <HAL_ADC_IRQHandler+0xc4>
 8001858:	4b81      	ldr	r3, [pc, #516]	; (8001a60 <HAL_ADC_IRQHandler+0x2c0>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	2b05      	cmp	r3, #5
 8001862:	d020      	beq.n	80018a6 <HAL_ADC_IRQHandler+0x106>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800186c:	d004      	beq.n	8001878 <HAL_ADC_IRQHandler+0xd8>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a79      	ldr	r2, [pc, #484]	; (8001a58 <HAL_ADC_IRQHandler+0x2b8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d106      	bne.n	8001886 <HAL_ADC_IRQHandler+0xe6>
 8001878:	4b78      	ldr	r3, [pc, #480]	; (8001a5c <HAL_ADC_IRQHandler+0x2bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	2b09      	cmp	r3, #9
 8001882:	d010      	beq.n	80018a6 <HAL_ADC_IRQHandler+0x106>
 8001884:	e005      	b.n	8001892 <HAL_ADC_IRQHandler+0xf2>
 8001886:	4b76      	ldr	r3, [pc, #472]	; (8001a60 <HAL_ADC_IRQHandler+0x2c0>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	2b09      	cmp	r3, #9
 8001890:	d009      	beq.n	80018a6 <HAL_ADC_IRQHandler+0x106>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800189a:	d004      	beq.n	80018a6 <HAL_ADC_IRQHandler+0x106>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a70      	ldr	r2, [pc, #448]	; (8001a64 <HAL_ADC_IRQHandler+0x2c4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d104      	bne.n	80018b0 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	e00f      	b.n	80018d0 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b8:	d004      	beq.n	80018c4 <HAL_ADC_IRQHandler+0x124>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a66      	ldr	r2, [pc, #408]	; (8001a58 <HAL_ADC_IRQHandler+0x2b8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d102      	bne.n	80018ca <HAL_ADC_IRQHandler+0x12a>
 80018c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018c8:	e000      	b.n	80018cc <HAL_ADC_IRQHandler+0x12c>
 80018ca:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <HAL_ADC_IRQHandler+0x2c4>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d137      	bne.n	800194e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d132      	bne.n	800194e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d02d      	beq.n	800194e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d11a      	bne.n	8001936 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 020c 	bic.w	r2, r2, #12
 800190e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d112      	bne.n	800194e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	641a      	str	r2, [r3, #64]	; 0x40
 8001934:	e00b      	b.n	800194e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f043 0210 	orr.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7fe fc8a 	bl	8000268 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	220c      	movs	r2, #12
 800195a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	2b00      	cmp	r3, #0
 8001964:	d004      	beq.n	8001970 <HAL_ADC_IRQHandler+0x1d0>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10b      	bne.n	8001988 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8138 	beq.w	8001bec <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8132 	beq.w	8001bec <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800199c:	d004      	beq.n	80019a8 <HAL_ADC_IRQHandler+0x208>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a2d      	ldr	r2, [pc, #180]	; (8001a58 <HAL_ADC_IRQHandler+0x2b8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d106      	bne.n	80019b6 <HAL_ADC_IRQHandler+0x216>
 80019a8:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <HAL_ADC_IRQHandler+0x2bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d03e      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x292>
 80019b4:	e005      	b.n	80019c2 <HAL_ADC_IRQHandler+0x222>
 80019b6:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <HAL_ADC_IRQHandler+0x2c0>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d037      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x292>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ca:	d004      	beq.n	80019d6 <HAL_ADC_IRQHandler+0x236>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <HAL_ADC_IRQHandler+0x2b8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d106      	bne.n	80019e4 <HAL_ADC_IRQHandler+0x244>
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <HAL_ADC_IRQHandler+0x2bc>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d027      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x292>
 80019e2:	e005      	b.n	80019f0 <HAL_ADC_IRQHandler+0x250>
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_ADC_IRQHandler+0x2c0>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d020      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x292>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019f8:	d004      	beq.n	8001a04 <HAL_ADC_IRQHandler+0x264>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a16      	ldr	r2, [pc, #88]	; (8001a58 <HAL_ADC_IRQHandler+0x2b8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d106      	bne.n	8001a12 <HAL_ADC_IRQHandler+0x272>
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_ADC_IRQHandler+0x2bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	2b09      	cmp	r3, #9
 8001a0e:	d010      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x292>
 8001a10:	e005      	b.n	8001a1e <HAL_ADC_IRQHandler+0x27e>
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_ADC_IRQHandler+0x2c0>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	2b09      	cmp	r3, #9
 8001a1c:	d009      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x292>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a26:	d004      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x292>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_ADC_IRQHandler+0x2c4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d104      	bne.n	8001a3c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	e018      	b.n	8001a6e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a44:	d004      	beq.n	8001a50 <HAL_ADC_IRQHandler+0x2b0>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <HAL_ADC_IRQHandler+0x2b8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d10b      	bne.n	8001a68 <HAL_ADC_IRQHandler+0x2c8>
 8001a50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a54:	e009      	b.n	8001a6a <HAL_ADC_IRQHandler+0x2ca>
 8001a56:	bf00      	nop
 8001a58:	50000100 	.word	0x50000100
 8001a5c:	50000300 	.word	0x50000300
 8001a60:	50000700 	.word	0x50000700
 8001a64:	50000400 	.word	0x50000400
 8001a68:	4b92      	ldr	r3, [pc, #584]	; (8001cb4 <HAL_ADC_IRQHandler+0x514>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 80b0 	bne.w	8001bde <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00d      	beq.n	8001aa4 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 80a3 	bne.w	8001bde <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f040 809d 	bne.w	8001bde <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8097 	beq.w	8001bde <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ab8:	d004      	beq.n	8001ac4 <HAL_ADC_IRQHandler+0x324>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7e      	ldr	r2, [pc, #504]	; (8001cb8 <HAL_ADC_IRQHandler+0x518>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d106      	bne.n	8001ad2 <HAL_ADC_IRQHandler+0x332>
 8001ac4:	4b7d      	ldr	r3, [pc, #500]	; (8001cbc <HAL_ADC_IRQHandler+0x51c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d03e      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x3ae>
 8001ad0:	e005      	b.n	8001ade <HAL_ADC_IRQHandler+0x33e>
 8001ad2:	4b7b      	ldr	r3, [pc, #492]	; (8001cc0 <HAL_ADC_IRQHandler+0x520>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 031f 	and.w	r3, r3, #31
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d037      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x3ae>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae6:	d004      	beq.n	8001af2 <HAL_ADC_IRQHandler+0x352>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a72      	ldr	r2, [pc, #456]	; (8001cb8 <HAL_ADC_IRQHandler+0x518>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d106      	bne.n	8001b00 <HAL_ADC_IRQHandler+0x360>
 8001af2:	4b72      	ldr	r3, [pc, #456]	; (8001cbc <HAL_ADC_IRQHandler+0x51c>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d027      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x3ae>
 8001afe:	e005      	b.n	8001b0c <HAL_ADC_IRQHandler+0x36c>
 8001b00:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <HAL_ADC_IRQHandler+0x520>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	2b06      	cmp	r3, #6
 8001b0a:	d020      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x3ae>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b14:	d004      	beq.n	8001b20 <HAL_ADC_IRQHandler+0x380>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a67      	ldr	r2, [pc, #412]	; (8001cb8 <HAL_ADC_IRQHandler+0x518>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d106      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x38e>
 8001b20:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <HAL_ADC_IRQHandler+0x51c>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	2b07      	cmp	r3, #7
 8001b2a:	d010      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x3ae>
 8001b2c:	e005      	b.n	8001b3a <HAL_ADC_IRQHandler+0x39a>
 8001b2e:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <HAL_ADC_IRQHandler+0x520>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2b07      	cmp	r3, #7
 8001b38:	d009      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x3ae>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b42:	d004      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x3ae>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <HAL_ADC_IRQHandler+0x514>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d104      	bne.n	8001b58 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e00f      	b.n	8001b78 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b60:	d004      	beq.n	8001b6c <HAL_ADC_IRQHandler+0x3cc>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a54      	ldr	r2, [pc, #336]	; (8001cb8 <HAL_ADC_IRQHandler+0x518>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d102      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x3d2>
 8001b6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b70:	e000      	b.n	8001b74 <HAL_ADC_IRQHandler+0x3d4>
 8001b72:	4b50      	ldr	r3, [pc, #320]	; (8001cb4 <HAL_ADC_IRQHandler+0x514>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d12d      	bne.n	8001bde <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d11a      	bne.n	8001bc6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b9e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d112      	bne.n	8001bde <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
 8001bc4:	e00b      	b.n	8001bde <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f043 0210 	orr.w	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8c4 	bl	8001d6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2260      	movs	r2, #96	; 0x60
 8001bea:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d011      	beq.n	8001c1a <HAL_ADC_IRQHandler+0x47a>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fa85 	bl	800111c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2280      	movs	r2, #128	; 0x80
 8001c18:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d012      	beq.n	8001c4a <HAL_ADC_IRQHandler+0x4aa>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00d      	beq.n	8001c4a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f8aa 	bl	8001d94 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c48:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d012      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x4da>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00d      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f89c 	bl	8001da8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c78:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d04f      	beq.n	8001d24 <HAL_ADC_IRQHandler+0x584>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d04a      	beq.n	8001d24 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d102      	bne.n	8001c9c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	e02d      	b.n	8001cf8 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ca4:	d004      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x510>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <HAL_ADC_IRQHandler+0x518>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d109      	bne.n	8001cc4 <HAL_ADC_IRQHandler+0x524>
 8001cb0:	4b02      	ldr	r3, [pc, #8]	; (8001cbc <HAL_ADC_IRQHandler+0x51c>)
 8001cb2:	e008      	b.n	8001cc6 <HAL_ADC_IRQHandler+0x526>
 8001cb4:	50000400 	.word	0x50000400
 8001cb8:	50000100 	.word	0x50000100
 8001cbc:	50000300 	.word	0x50000300
 8001cc0:	50000700 	.word	0x50000700
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_ADC_IRQHandler+0x5c8>)
 8001cc6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d10a      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e007      	b.n	8001cf8 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d10e      	bne.n	8001d1c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f043 0202 	orr.w	r2, r3, #2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fa0a 	bl	8001130 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2210      	movs	r2, #16
 8001d22:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d018      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x5c0>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d013      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d48:	f043 0208 	orr.w	r2, r3, #8
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d58:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f810 	bl	8001d80 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	50000700 	.word	0x50000700

08001d6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b09b      	sub	sp, #108	; 0x6c
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x22>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e2ca      	b.n	8002374 <HAL_ADC_ConfigChannel+0x5b8>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f040 82ae 	bne.w	8002352 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d81c      	bhi.n	8001e38 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	461a      	mov	r2, r3
 8001e12:	231f      	movs	r3, #31
 8001e14:	4093      	lsls	r3, r2
 8001e16:	43db      	mvns	r3, r3
 8001e18:	4019      	ands	r1, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	631a      	str	r2, [r3, #48]	; 0x30
 8001e36:	e063      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d81e      	bhi.n	8001e7e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	3b1e      	subs	r3, #30
 8001e54:	221f      	movs	r2, #31
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	4019      	ands	r1, r3
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	3b1e      	subs	r3, #30
 8001e70:	fa00 f203 	lsl.w	r2, r0, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e7c:	e040      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b0e      	cmp	r3, #14
 8001e84:	d81e      	bhi.n	8001ec4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	3b3c      	subs	r3, #60	; 0x3c
 8001e9a:	221f      	movs	r2, #31
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	4019      	ands	r1, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	3b3c      	subs	r3, #60	; 0x3c
 8001eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	639a      	str	r2, [r3, #56]	; 0x38
 8001ec2:	e01d      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	3b5a      	subs	r3, #90	; 0x5a
 8001ed8:	221f      	movs	r2, #31
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	4019      	ands	r1, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	3b5a      	subs	r3, #90	; 0x5a
 8001ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f040 80e5 	bne.w	80020da <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d91c      	bls.n	8001f52 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6999      	ldr	r1, [r3, #24]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	3b1e      	subs	r3, #30
 8001f2a:	2207      	movs	r2, #7
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4019      	ands	r1, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6898      	ldr	r0, [r3, #8]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	3b1e      	subs	r3, #30
 8001f44:	fa00 f203 	lsl.w	r2, r0, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	619a      	str	r2, [r3, #24]
 8001f50:	e019      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6959      	ldr	r1, [r3, #20]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	2207      	movs	r2, #7
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	4019      	ands	r1, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6898      	ldr	r0, [r3, #8]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	08db      	lsrs	r3, r3, #3
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d84f      	bhi.n	8002048 <HAL_ADC_ConfigChannel+0x28c>
 8001fa8:	a201      	add	r2, pc, #4	; (adr r2, 8001fb0 <HAL_ADC_ConfigChannel+0x1f4>)
 8001faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fae:	bf00      	nop
 8001fb0:	08001fc1 	.word	0x08001fc1
 8001fb4:	08001fe3 	.word	0x08001fe3
 8001fb8:	08002005 	.word	0x08002005
 8001fbc:	08002027 	.word	0x08002027
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fc6:	4b9a      	ldr	r3, [pc, #616]	; (8002230 <HAL_ADC_ConfigChannel+0x474>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	0691      	lsls	r1, r2, #26
 8001fd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fde:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fe0:	e07e      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fe8:	4b91      	ldr	r3, [pc, #580]	; (8002230 <HAL_ADC_ConfigChannel+0x474>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	0691      	lsls	r1, r2, #26
 8001ff2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002000:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002002:	e06d      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800200a:	4b89      	ldr	r3, [pc, #548]	; (8002230 <HAL_ADC_ConfigChannel+0x474>)
 800200c:	4013      	ands	r3, r2
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	0691      	lsls	r1, r2, #26
 8002014:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002016:	430a      	orrs	r2, r1
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002022:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002024:	e05c      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800202c:	4b80      	ldr	r3, [pc, #512]	; (8002230 <HAL_ADC_ConfigChannel+0x474>)
 800202e:	4013      	ands	r3, r2
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	0691      	lsls	r1, r2, #26
 8002036:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002038:	430a      	orrs	r2, r1
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002044:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002046:	e04b      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	069b      	lsls	r3, r3, #26
 8002058:	429a      	cmp	r2, r3
 800205a:	d107      	bne.n	800206c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800206a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002072:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	069b      	lsls	r3, r3, #26
 800207c:	429a      	cmp	r2, r3
 800207e:	d107      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800208e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002096:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	069b      	lsls	r3, r3, #26
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d107      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020b2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	069b      	lsls	r3, r3, #26
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d10a      	bne.n	80020de <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020d6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80020d8:	e001      	b.n	80020de <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80020da:	bf00      	nop
 80020dc:	e000      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80020de:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x344>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x344>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_ADC_ConfigChannel+0x346>
 8002100:	2300      	movs	r3, #0
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 8130 	bne.w	8002368 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d00f      	beq.n	8002130 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	400a      	ands	r2, r1
 800212a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800212e:	e049      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2201      	movs	r2, #1
 800213e:	409a      	lsls	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b09      	cmp	r3, #9
 8002150:	d91c      	bls.n	800218c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6999      	ldr	r1, [r3, #24]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	3b1b      	subs	r3, #27
 8002164:	2207      	movs	r2, #7
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	4019      	ands	r1, r3
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6898      	ldr	r0, [r3, #8]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	3b1b      	subs	r3, #27
 800217e:	fa00 f203 	lsl.w	r2, r0, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	619a      	str	r2, [r3, #24]
 800218a:	e01b      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6959      	ldr	r1, [r3, #20]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	2207      	movs	r2, #7
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	4019      	ands	r1, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6898      	ldr	r0, [r3, #8]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	fa00 f203 	lsl.w	r2, r0, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021cc:	d004      	beq.n	80021d8 <HAL_ADC_ConfigChannel+0x41c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a18      	ldr	r2, [pc, #96]	; (8002234 <HAL_ADC_ConfigChannel+0x478>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d101      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x420>
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_ADC_ConfigChannel+0x47c>)
 80021da:	e000      	b.n	80021de <HAL_ADC_ConfigChannel+0x422>
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_ADC_ConfigChannel+0x480>)
 80021de:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d105      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d015      	beq.n	8002220 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021f8:	2b11      	cmp	r3, #17
 80021fa:	d105      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00b      	beq.n	8002220 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800220c:	2b12      	cmp	r3, #18
 800220e:	f040 80ab 	bne.w	8002368 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800221a:	2b00      	cmp	r3, #0
 800221c:	f040 80a4 	bne.w	8002368 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002228:	d10a      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x484>
 800222a:	4b02      	ldr	r3, [pc, #8]	; (8002234 <HAL_ADC_ConfigChannel+0x478>)
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e022      	b.n	8002276 <HAL_ADC_ConfigChannel+0x4ba>
 8002230:	83fff000 	.word	0x83fff000
 8002234:	50000100 	.word	0x50000100
 8002238:	50000300 	.word	0x50000300
 800223c:	50000700 	.word	0x50000700
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a4e      	ldr	r2, [pc, #312]	; (8002380 <HAL_ADC_ConfigChannel+0x5c4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d103      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x496>
 800224a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e011      	b.n	8002276 <HAL_ADC_ConfigChannel+0x4ba>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a4b      	ldr	r2, [pc, #300]	; (8002384 <HAL_ADC_ConfigChannel+0x5c8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d102      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x4a6>
 800225c:	4b4a      	ldr	r3, [pc, #296]	; (8002388 <HAL_ADC_ConfigChannel+0x5cc>)
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e009      	b.n	8002276 <HAL_ADC_ConfigChannel+0x4ba>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a48      	ldr	r2, [pc, #288]	; (8002388 <HAL_ADC_ConfigChannel+0x5cc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d102      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x4b6>
 800226c:	4b45      	ldr	r3, [pc, #276]	; (8002384 <HAL_ADC_ConfigChannel+0x5c8>)
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e001      	b.n	8002276 <HAL_ADC_ConfigChannel+0x4ba>
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d108      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x4da>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x4da>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_ADC_ConfigChannel+0x4dc>
 8002296:	2300      	movs	r3, #0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d150      	bne.n	800233e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800229c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d010      	beq.n	80022c4 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d107      	bne.n	80022be <HAL_ADC_ConfigChannel+0x502>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_ADC_ConfigChannel+0x502>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x504>
 80022be:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d13c      	bne.n	800233e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b10      	cmp	r3, #16
 80022ca:	d11d      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x54c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022d4:	d118      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80022d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022e2:	4b2a      	ldr	r3, [pc, #168]	; (800238c <HAL_ADC_ConfigChannel+0x5d0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a2a      	ldr	r2, [pc, #168]	; (8002390 <HAL_ADC_ConfigChannel+0x5d4>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	0c9a      	lsrs	r2, r3, #18
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022f8:	e002      	b.n	8002300 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f9      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002306:	e02e      	b.n	8002366 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b11      	cmp	r3, #17
 800230e:	d10b      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x56c>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002318:	d106      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800231a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002324:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002326:	e01e      	b.n	8002366 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b12      	cmp	r3, #18
 800232e:	d11a      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800233c:	e013      	b.n	8002366 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f043 0220 	orr.w	r2, r3, #32
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002350:	e00a      	b.n	8002368 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f043 0220 	orr.w	r2, r3, #32
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002364:	e000      	b.n	8002368 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002366:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002370:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002374:	4618      	mov	r0, r3
 8002376:	376c      	adds	r7, #108	; 0x6c
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	50000100 	.word	0x50000100
 8002384:	50000400 	.word	0x50000400
 8002388:	50000500 	.word	0x50000500
 800238c:	2000000c 	.word	0x2000000c
 8002390:	431bde83 	.word	0x431bde83

08002394 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002394:	b480      	push	{r7}
 8002396:	b099      	sub	sp, #100	; 0x64
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ac:	d102      	bne.n	80023b4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80023ae:	4b6d      	ldr	r3, [pc, #436]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	e01a      	b.n	80023ea <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a6a      	ldr	r2, [pc, #424]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d103      	bne.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80023be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	e011      	b.n	80023ea <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a67      	ldr	r2, [pc, #412]	; (8002568 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d102      	bne.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023d0:	4b66      	ldr	r3, [pc, #408]	; (800256c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	e009      	b.n	80023ea <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a64      	ldr	r2, [pc, #400]	; (800256c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d102      	bne.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80023e0:	4b61      	ldr	r3, [pc, #388]	; (8002568 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	e001      	b.n	80023ea <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0b0      	b.n	8002556 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80023fe:	2302      	movs	r3, #2
 8002400:	e0a9      	b.n	8002556 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 808d 	bne.w	8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	f040 8086 	bne.w	8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002430:	d004      	beq.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a4b      	ldr	r2, [pc, #300]	; (8002564 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d101      	bne.n	8002440 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800243c:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800243e:	e000      	b.n	8002442 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002440:	4b4c      	ldr	r3, [pc, #304]	; (8002574 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002442:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d040      	beq.n	80024ce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800244c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800245e:	035b      	lsls	r3, r3, #13
 8002460:	430b      	orrs	r3, r1
 8002462:	431a      	orrs	r2, r3
 8002464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002466:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d108      	bne.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002488:	2300      	movs	r3, #0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d15c      	bne.n	8002548 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d107      	bne.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80024aa:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d14b      	bne.n	8002548 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80024b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024b8:	f023 030f 	bic.w	r3, r3, #15
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	6811      	ldr	r1, [r2, #0]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	6892      	ldr	r2, [r2, #8]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	431a      	orrs	r2, r3
 80024c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024ca:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024cc:	e03c      	b.n	8002548 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024d8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d108      	bne.n	80024fa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d123      	bne.n	8002548 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800251c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800251e:	2b00      	cmp	r3, #0
 8002520:	d112      	bne.n	8002548 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800252a:	f023 030f 	bic.w	r3, r3, #15
 800252e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002530:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002532:	e009      	b.n	8002548 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f043 0220 	orr.w	r2, r3, #32
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002546:	e000      	b.n	800254a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002548:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002556:	4618      	mov	r0, r3
 8002558:	3764      	adds	r7, #100	; 0x64
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	50000100 	.word	0x50000100
 8002568:	50000400 	.word	0x50000400
 800256c:	50000500 	.word	0x50000500
 8002570:	50000300 	.word	0x50000300
 8002574:	50000700 	.word	0x50000700

08002578 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d108      	bne.n	80025a4 <ADC_Enable+0x2c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <ADC_Enable+0x2c>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <ADC_Enable+0x2e>
 80025a4:	2300      	movs	r3, #0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d143      	bne.n	8002632 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <ADC_Enable+0xc4>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f043 0210 	orr.w	r2, r3, #16
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e02f      	b.n	8002634 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80025e4:	f7fe fd6a 	bl	80010bc <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025ea:	e01b      	b.n	8002624 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025ec:	f7fe fd66 	bl	80010bc <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d914      	bls.n	8002624 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	d00d      	beq.n	8002624 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f043 0210 	orr.w	r2, r3, #16
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	f043 0201 	orr.w	r2, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e007      	b.n	8002634 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b01      	cmp	r3, #1
 8002630:	d1dc      	bne.n	80025ec <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	8000003f 	.word	0x8000003f

08002640 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d108      	bne.n	800266c <ADC_Disable+0x2c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <ADC_Disable+0x2c>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <ADC_Disable+0x2e>
 800266c:	2300      	movs	r3, #0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d047      	beq.n	8002702 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 030d 	and.w	r3, r3, #13
 800267c:	2b01      	cmp	r3, #1
 800267e:	d10f      	bne.n	80026a0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0202 	orr.w	r2, r2, #2
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2203      	movs	r2, #3
 8002696:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002698:	f7fe fd10 	bl	80010bc <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800269e:	e029      	b.n	80026f4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f043 0210 	orr.w	r2, r3, #16
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	f043 0201 	orr.w	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e023      	b.n	8002704 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026bc:	f7fe fcfe 	bl	80010bc <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d914      	bls.n	80026f4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d10d      	bne.n	80026f4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f043 0210 	orr.w	r2, r3, #16
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d0dc      	beq.n	80026bc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002728:	4013      	ands	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273e:	4a04      	ldr	r2, [pc, #16]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	60d3      	str	r3, [r2, #12]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <__NVIC_GetPriorityGrouping+0x18>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	f003 0307 	and.w	r3, r3, #7
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	db0b      	blt.n	800279a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <__NVIC_EnableIRQ+0x38>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2001      	movs	r0, #1
 8002792:	fa00 f202 	lsl.w	r2, r0, r2
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	; (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f1c3 0307 	rsb	r3, r3, #7
 800281a:	2b04      	cmp	r3, #4
 800281c:	bf28      	it	cs
 800281e:	2304      	movcs	r3, #4
 8002820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3304      	adds	r3, #4
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <NVIC_EncodePriority+0x30>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3b03      	subs	r3, #3
 800282e:	e000      	b.n	8002832 <NVIC_EncodePriority+0x32>
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	f04f 32ff 	mov.w	r2, #4294967295
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43d9      	mvns	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	4313      	orrs	r3, r2
         );
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002878:	d301      	bcc.n	800287e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287a:	2301      	movs	r3, #1
 800287c:	e00f      	b.n	800289e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287e:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <SysTick_Config+0x40>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002886:	210f      	movs	r1, #15
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	f7ff ff8e 	bl	80027ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <SysTick_Config+0x40>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002896:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <SysTick_Config+0x40>)
 8002898:	2207      	movs	r2, #7
 800289a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	e000e010 	.word	0xe000e010

080028ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff29 	bl	800270c <__NVIC_SetPriorityGrouping>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d4:	f7ff ff3e 	bl	8002754 <__NVIC_GetPriorityGrouping>
 80028d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	6978      	ldr	r0, [r7, #20]
 80028e0:	f7ff ff8e 	bl	8002800 <NVIC_EncodePriority>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff5d 	bl	80027ac <__NVIC_SetPriority>
}
 80028f2:	bf00      	nop
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff31 	bl	8002770 <__NVIC_EnableIRQ>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ffa2 	bl	8002868 <SysTick_Config>
 8002924:	4603      	mov	r3, r0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800293c:	2b02      	cmp	r3, #2
 800293e:	d008      	beq.n	8002952 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2204      	movs	r2, #4
 8002944:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e020      	b.n	8002994 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 020e 	bic.w	r2, r2, #14
 8002960:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f202 	lsl.w	r2, r1, r2
 8002980:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d005      	beq.n	80029c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2204      	movs	r2, #4
 80029ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	e027      	b.n	8002a12 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 020e 	bic.w	r2, r2, #14
 80029d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
    } 
  }
  return status;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2a:	e154      	b.n	8002cd6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2101      	movs	r1, #1
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8146 	beq.w	8002cd0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d005      	beq.n	8002a5c <HAL_GPIO_Init+0x40>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d130      	bne.n	8002abe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a92:	2201      	movs	r2, #1
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	f003 0201 	and.w	r2, r3, #1
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d017      	beq.n	8002afa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d123      	bne.n	8002b4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	08da      	lsrs	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3208      	adds	r2, #8
 8002b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	220f      	movs	r2, #15
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	08da      	lsrs	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3208      	adds	r2, #8
 8002b48:	6939      	ldr	r1, [r7, #16]
 8002b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0203 	and.w	r2, r3, #3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 80a0 	beq.w	8002cd0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b90:	4b58      	ldr	r3, [pc, #352]	; (8002cf4 <HAL_GPIO_Init+0x2d8>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	4a57      	ldr	r2, [pc, #348]	; (8002cf4 <HAL_GPIO_Init+0x2d8>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6193      	str	r3, [r2, #24]
 8002b9c:	4b55      	ldr	r3, [pc, #340]	; (8002cf4 <HAL_GPIO_Init+0x2d8>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba8:	4a53      	ldr	r2, [pc, #332]	; (8002cf8 <HAL_GPIO_Init+0x2dc>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	220f      	movs	r2, #15
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bd2:	d019      	beq.n	8002c08 <HAL_GPIO_Init+0x1ec>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a49      	ldr	r2, [pc, #292]	; (8002cfc <HAL_GPIO_Init+0x2e0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d013      	beq.n	8002c04 <HAL_GPIO_Init+0x1e8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a48      	ldr	r2, [pc, #288]	; (8002d00 <HAL_GPIO_Init+0x2e4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00d      	beq.n	8002c00 <HAL_GPIO_Init+0x1e4>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a47      	ldr	r2, [pc, #284]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d007      	beq.n	8002bfc <HAL_GPIO_Init+0x1e0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a46      	ldr	r2, [pc, #280]	; (8002d08 <HAL_GPIO_Init+0x2ec>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d101      	bne.n	8002bf8 <HAL_GPIO_Init+0x1dc>
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	e008      	b.n	8002c0a <HAL_GPIO_Init+0x1ee>
 8002bf8:	2305      	movs	r3, #5
 8002bfa:	e006      	b.n	8002c0a <HAL_GPIO_Init+0x1ee>
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e004      	b.n	8002c0a <HAL_GPIO_Init+0x1ee>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e002      	b.n	8002c0a <HAL_GPIO_Init+0x1ee>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_GPIO_Init+0x1ee>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	f002 0203 	and.w	r2, r2, #3
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	4093      	lsls	r3, r2
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c1a:	4937      	ldr	r1, [pc, #220]	; (8002cf8 <HAL_GPIO_Init+0x2dc>)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	3302      	adds	r3, #2
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c28:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <HAL_GPIO_Init+0x2f0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c4c:	4a2f      	ldr	r2, [pc, #188]	; (8002d0c <HAL_GPIO_Init+0x2f0>)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c52:	4b2e      	ldr	r3, [pc, #184]	; (8002d0c <HAL_GPIO_Init+0x2f0>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c76:	4a25      	ldr	r2, [pc, #148]	; (8002d0c <HAL_GPIO_Init+0x2f0>)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c7c:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <HAL_GPIO_Init+0x2f0>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ca0:	4a1a      	ldr	r2, [pc, #104]	; (8002d0c <HAL_GPIO_Init+0x2f0>)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_GPIO_Init+0x2f0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cca:	4a10      	ldr	r2, [pc, #64]	; (8002d0c <HAL_GPIO_Init+0x2f0>)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f47f aea3 	bne.w	8002a2c <HAL_GPIO_Init+0x10>
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	48000400 	.word	0x48000400
 8002d00:	48000800 	.word	0x48000800
 8002d04:	48000c00 	.word	0x48000c00
 8002d08:	48001000 	.word	0x48001000
 8002d0c:	40010400 	.word	0x40010400

08002d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d20:	787b      	ldrb	r3, [r7, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d2c:	e002      	b.n	8002d34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e081      	b.n	8002e56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fd ff22 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	; 0x24
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d107      	bne.n	8002dba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	e006      	b.n	8002dc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002dc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d104      	bne.n	8002dda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69d9      	ldr	r1, [r3, #28]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1a      	ldr	r2, [r3, #32]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d138      	bne.n	8002ee6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e032      	b.n	8002ee8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2224      	movs	r2, #36	; 0x24
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6819      	ldr	r1, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
  }
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d139      	bne.n	8002f7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e033      	b.n	8002f80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2224      	movs	r2, #36	; 0x24
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8e:	b08b      	sub	sp, #44	; 0x2c
 8002f90:	af06      	add	r7, sp, #24
 8002f92:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0c4      	b.n	8003128 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd ff42 	bl	8000e3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2203      	movs	r2, #3
 8002fbc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f004 fbab 	bl	8007720 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	e040      	b.n	8003052 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	440b      	add	r3, r1
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	440b      	add	r3, r1
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	440b      	add	r3, r1
 800300a:	3303      	adds	r3, #3
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	440b      	add	r3, r1
 800301e:	3338      	adds	r3, #56	; 0x38
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	333c      	adds	r3, #60	; 0x3c
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	3340      	adds	r3, #64	; 0x40
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	3301      	adds	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	d3b9      	bcc.n	8002fd0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	e044      	b.n	80030ec <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	440b      	add	r3, r1
 80030c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	440b      	add	r3, r1
 80030de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	3301      	adds	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d3b5      	bcc.n	8003062 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	687e      	ldr	r6, [r7, #4]
 80030fe:	466d      	mov	r5, sp
 8003100:	f106 0410 	add.w	r4, r6, #16
 8003104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	602b      	str	r3, [r5, #0]
 800310c:	1d33      	adds	r3, r6, #4
 800310e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003110:	6838      	ldr	r0, [r7, #0]
 8003112:	f004 fb20 	bl	8007756 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003136:	af00      	add	r7, sp, #0
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003140:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	f001 b823 	b.w	800419c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 817d 	beq.w	8003466 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800316c:	4bbc      	ldr	r3, [pc, #752]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 030c 	and.w	r3, r3, #12
 8003174:	2b04      	cmp	r3, #4
 8003176:	d00c      	beq.n	8003192 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003178:	4bb9      	ldr	r3, [pc, #740]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 030c 	and.w	r3, r3, #12
 8003180:	2b08      	cmp	r3, #8
 8003182:	d15c      	bne.n	800323e <HAL_RCC_OscConfig+0x10e>
 8003184:	4bb6      	ldr	r3, [pc, #728]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d155      	bne.n	800323e <HAL_RCC_OscConfig+0x10e>
 8003192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003196:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d102      	bne.n	80031c4 <HAL_RCC_OscConfig+0x94>
 80031be:	4ba8      	ldr	r3, [pc, #672]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	e015      	b.n	80031f0 <HAL_RCC_OscConfig+0xc0>
 80031c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80031d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80031e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80031ec:	4b9c      	ldr	r3, [pc, #624]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80031f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80031fc:	fa92 f2a2 	rbit	r2, r2
 8003200:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003204:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003208:	fab2 f282 	clz	r2, r2
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	f042 0220 	orr.w	r2, r2, #32
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	f002 021f 	and.w	r2, r2, #31
 8003218:	2101      	movs	r1, #1
 800321a:	fa01 f202 	lsl.w	r2, r1, r2
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 811f 	beq.w	8003464 <HAL_RCC_OscConfig+0x334>
 8003226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 8116 	bne.w	8003464 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	f000 bfaf 	b.w	800419c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x12e>
 8003250:	4b83      	ldr	r3, [pc, #524]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a82      	ldr	r2, [pc, #520]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e036      	b.n	80032cc <HAL_RCC_OscConfig+0x19c>
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0x158>
 800326e:	4b7c      	ldr	r3, [pc, #496]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7b      	ldr	r2, [pc, #492]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 8003274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b79      	ldr	r3, [pc, #484]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a78      	ldr	r2, [pc, #480]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 8003280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e021      	b.n	80032cc <HAL_RCC_OscConfig+0x19c>
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x184>
 800329a:	4b71      	ldr	r3, [pc, #452]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a70      	ldr	r2, [pc, #448]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 80032a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	4b6e      	ldr	r3, [pc, #440]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a6d      	ldr	r2, [pc, #436]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 80032ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	e00b      	b.n	80032cc <HAL_RCC_OscConfig+0x19c>
 80032b4:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a69      	ldr	r2, [pc, #420]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 80032ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	4b67      	ldr	r3, [pc, #412]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a66      	ldr	r2, [pc, #408]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 80032c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032cc:	4b64      	ldr	r3, [pc, #400]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	f023 020f 	bic.w	r2, r3, #15
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	495f      	ldr	r1, [pc, #380]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d059      	beq.n	80033aa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f6:	f7fd fee1 	bl	80010bc <HAL_GetTick>
 80032fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003300:	f7fd fedc 	bl	80010bc <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b64      	cmp	r3, #100	; 0x64
 800330e:	d902      	bls.n	8003316 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	f000 bf43 	b.w	800419c <HAL_RCC_OscConfig+0x106c>
 8003316:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800331a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800332a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <HAL_RCC_OscConfig+0x218>
 8003342:	4b47      	ldr	r3, [pc, #284]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	e015      	b.n	8003374 <HAL_RCC_OscConfig+0x244>
 8003348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800334c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800335c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003360:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003364:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003370:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003378:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800337c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003380:	fa92 f2a2 	rbit	r2, r2
 8003384:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003388:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800338c:	fab2 f282 	clz	r2, r2
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	f042 0220 	orr.w	r2, r2, #32
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	f002 021f 	and.w	r2, r2, #31
 800339c:	2101      	movs	r1, #1
 800339e:	fa01 f202 	lsl.w	r2, r1, r2
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ab      	beq.n	8003300 <HAL_RCC_OscConfig+0x1d0>
 80033a8:	e05d      	b.n	8003466 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033aa:	f7fd fe87 	bl	80010bc <HAL_GetTick>
 80033ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b2:	e00a      	b.n	80033ca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fd fe82 	bl	80010bc <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	; 0x64
 80033c2:	d902      	bls.n	80033ca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	f000 bee9 	b.w	800419c <HAL_RCC_OscConfig+0x106c>
 80033ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80033de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d102      	bne.n	80033fc <HAL_RCC_OscConfig+0x2cc>
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	e015      	b.n	8003428 <HAL_RCC_OscConfig+0x2f8>
 80033fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003400:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003414:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003418:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003424:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <HAL_RCC_OscConfig+0x330>)
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800342c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003430:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003434:	fa92 f2a2 	rbit	r2, r2
 8003438:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800343c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003440:	fab2 f282 	clz	r2, r2
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	f042 0220 	orr.w	r2, r2, #32
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	f002 021f 	and.w	r2, r2, #31
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f202 	lsl.w	r2, r1, r2
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ab      	bne.n	80033b4 <HAL_RCC_OscConfig+0x284>
 800345c:	e003      	b.n	8003466 <HAL_RCC_OscConfig+0x336>
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 817d 	beq.w	8003776 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800347c:	4ba6      	ldr	r3, [pc, #664]	; (8003718 <HAL_RCC_OscConfig+0x5e8>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00b      	beq.n	80034a0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003488:	4ba3      	ldr	r3, [pc, #652]	; (8003718 <HAL_RCC_OscConfig+0x5e8>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b08      	cmp	r3, #8
 8003492:	d172      	bne.n	800357a <HAL_RCC_OscConfig+0x44a>
 8003494:	4ba0      	ldr	r3, [pc, #640]	; (8003718 <HAL_RCC_OscConfig+0x5e8>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d16c      	bne.n	800357a <HAL_RCC_OscConfig+0x44a>
 80034a0:	2302      	movs	r3, #2
 80034a2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80034b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <HAL_RCC_OscConfig+0x3a0>
 80034ca:	4b93      	ldr	r3, [pc, #588]	; (8003718 <HAL_RCC_OscConfig+0x5e8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	e013      	b.n	80034f8 <HAL_RCC_OscConfig+0x3c8>
 80034d0:	2302      	movs	r3, #2
 80034d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80034e2:	2302      	movs	r3, #2
 80034e4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80034e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80034f4:	4b88      	ldr	r3, [pc, #544]	; (8003718 <HAL_RCC_OscConfig+0x5e8>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2202      	movs	r2, #2
 80034fa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80034fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003502:	fa92 f2a2 	rbit	r2, r2
 8003506:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800350a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800350e:	fab2 f282 	clz	r2, r2
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	f042 0220 	orr.w	r2, r2, #32
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	f002 021f 	and.w	r2, r2, #31
 800351e:	2101      	movs	r1, #1
 8003520:	fa01 f202 	lsl.w	r2, r1, r2
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCC_OscConfig+0x410>
 800352a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d002      	beq.n	8003540 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f000 be2e 	b.w	800419c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003540:	4b75      	ldr	r3, [pc, #468]	; (8003718 <HAL_RCC_OscConfig+0x5e8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	21f8      	movs	r1, #248	; 0xf8
 8003556:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800355e:	fa91 f1a1 	rbit	r1, r1
 8003562:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003566:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800356a:	fab1 f181 	clz	r1, r1
 800356e:	b2c9      	uxtb	r1, r1
 8003570:	408b      	lsls	r3, r1
 8003572:	4969      	ldr	r1, [pc, #420]	; (8003718 <HAL_RCC_OscConfig+0x5e8>)
 8003574:	4313      	orrs	r3, r2
 8003576:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003578:	e0fd      	b.n	8003776 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800357a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8088 	beq.w	800369c <HAL_RCC_OscConfig+0x56c>
 800358c:	2301      	movs	r3, #1
 800358e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800359e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	461a      	mov	r2, r3
 80035b4:	2301      	movs	r3, #1
 80035b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fd fd80 	bl	80010bc <HAL_GetTick>
 80035bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c2:	f7fd fd7b 	bl	80010bc <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d902      	bls.n	80035d8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	f000 bde2 	b.w	800419c <HAL_RCC_OscConfig+0x106c>
 80035d8:	2302      	movs	r3, #2
 80035da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80035ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d102      	bne.n	8003608 <HAL_RCC_OscConfig+0x4d8>
 8003602:	4b45      	ldr	r3, [pc, #276]	; (8003718 <HAL_RCC_OscConfig+0x5e8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	e013      	b.n	8003630 <HAL_RCC_OscConfig+0x500>
 8003608:	2302      	movs	r3, #2
 800360a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800361a:	2302      	movs	r3, #2
 800361c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003620:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800362c:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <HAL_RCC_OscConfig+0x5e8>)
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	2202      	movs	r2, #2
 8003632:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003636:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800363a:	fa92 f2a2 	rbit	r2, r2
 800363e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003642:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003646:	fab2 f282 	clz	r2, r2
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	f042 0220 	orr.w	r2, r2, #32
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	f002 021f 	and.w	r2, r2, #31
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f202 	lsl.w	r2, r1, r2
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0af      	beq.n	80035c2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003662:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <HAL_RCC_OscConfig+0x5e8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	21f8      	movs	r1, #248	; 0xf8
 8003678:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003680:	fa91 f1a1 	rbit	r1, r1
 8003684:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003688:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800368c:	fab1 f181 	clz	r1, r1
 8003690:	b2c9      	uxtb	r1, r1
 8003692:	408b      	lsls	r3, r1
 8003694:	4920      	ldr	r1, [pc, #128]	; (8003718 <HAL_RCC_OscConfig+0x5e8>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
 800369a:	e06c      	b.n	8003776 <HAL_RCC_OscConfig+0x646>
 800369c:	2301      	movs	r3, #1
 800369e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80036ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	461a      	mov	r2, r3
 80036c4:	2300      	movs	r3, #0
 80036c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fd fcf8 	bl	80010bc <HAL_GetTick>
 80036cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d2:	f7fd fcf3 	bl	80010bc <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d902      	bls.n	80036e8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	f000 bd5a 	b.w	800419c <HAL_RCC_OscConfig+0x106c>
 80036e8:	2302      	movs	r3, #2
 80036ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80036fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	d104      	bne.n	800371c <HAL_RCC_OscConfig+0x5ec>
 8003712:	4b01      	ldr	r3, [pc, #4]	; (8003718 <HAL_RCC_OscConfig+0x5e8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	e015      	b.n	8003744 <HAL_RCC_OscConfig+0x614>
 8003718:	40021000 	.word	0x40021000
 800371c:	2302      	movs	r3, #2
 800371e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800372e:	2302      	movs	r3, #2
 8003730:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003734:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003740:	4bc8      	ldr	r3, [pc, #800]	; (8003a64 <HAL_RCC_OscConfig+0x934>)
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	2202      	movs	r2, #2
 8003746:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800374a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800374e:	fa92 f2a2 	rbit	r2, r2
 8003752:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003756:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800375a:	fab2 f282 	clz	r2, r2
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	f042 0220 	orr.w	r2, r2, #32
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	f002 021f 	and.w	r2, r2, #31
 800376a:	2101      	movs	r1, #1
 800376c:	fa01 f202 	lsl.w	r2, r1, r2
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ad      	bne.n	80036d2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8110 	beq.w	80039ac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800378c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003790:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d079      	beq.n	8003890 <HAL_RCC_OscConfig+0x760>
 800379c:	2301      	movs	r3, #1
 800379e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80037ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	4bab      	ldr	r3, [pc, #684]	; (8003a68 <HAL_RCC_OscConfig+0x938>)
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	461a      	mov	r2, r3
 80037c2:	2301      	movs	r3, #1
 80037c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c6:	f7fd fc79 	bl	80010bc <HAL_GetTick>
 80037ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d0:	f7fd fc74 	bl	80010bc <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d902      	bls.n	80037e6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	f000 bcdb 	b.w	800419c <HAL_RCC_OscConfig+0x106c>
 80037e6:	2302      	movs	r3, #2
 80037e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80037f0:	fa93 f3a3 	rbit	r3, r3
 80037f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003800:	2202      	movs	r2, #2
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003808:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	fa93 f2a3 	rbit	r2, r3
 8003812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003824:	2202      	movs	r2, #2
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	fa93 f2a3 	rbit	r2, r3
 8003836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800383e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003840:	4b88      	ldr	r3, [pc, #544]	; (8003a64 <HAL_RCC_OscConfig+0x934>)
 8003842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003848:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800384c:	2102      	movs	r1, #2
 800384e:	6019      	str	r1, [r3, #0]
 8003850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003854:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	fa93 f1a3 	rbit	r1, r3
 800385e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003862:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003866:	6019      	str	r1, [r3, #0]
  return result;
 8003868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	2101      	movs	r1, #1
 8003884:	fa01 f303 	lsl.w	r3, r1, r3
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0a0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x6a0>
 800388e:	e08d      	b.n	80039ac <HAL_RCC_OscConfig+0x87c>
 8003890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003894:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	fa93 f2a3 	rbit	r2, r3
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038b2:	601a      	str	r2, [r3, #0]
  return result;
 80038b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038bc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	4b68      	ldr	r3, [pc, #416]	; (8003a68 <HAL_RCC_OscConfig+0x938>)
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	461a      	mov	r2, r3
 80038ce:	2300      	movs	r3, #0
 80038d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d2:	f7fd fbf3 	bl	80010bc <HAL_GetTick>
 80038d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fd fbee 	bl	80010bc <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d902      	bls.n	80038f2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	f000 bc55 	b.w	800419c <HAL_RCC_OscConfig+0x106c>
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80038fa:	2202      	movs	r2, #2
 80038fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003902:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	fa93 f2a3 	rbit	r2, r3
 800390c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003910:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800391e:	2202      	movs	r2, #2
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003926:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	fa93 f2a3 	rbit	r2, r3
 8003930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003942:	2202      	movs	r2, #2
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	fa93 f2a3 	rbit	r2, r3
 8003954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003958:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800395c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800395e:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_RCC_OscConfig+0x934>)
 8003960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003966:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800396a:	2102      	movs	r1, #2
 800396c:	6019      	str	r1, [r3, #0]
 800396e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003972:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	fa93 f1a3 	rbit	r1, r3
 800397c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003980:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003984:	6019      	str	r1, [r3, #0]
  return result;
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	fab3 f383 	clz	r3, r3
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2101      	movs	r1, #1
 80039a2:	fa01 f303 	lsl.w	r3, r1, r3
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d197      	bne.n	80038dc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 81a1 	beq.w	8003d04 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c8:	4b26      	ldr	r3, [pc, #152]	; (8003a64 <HAL_RCC_OscConfig+0x934>)
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d116      	bne.n	8003a02 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d4:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <HAL_RCC_OscConfig+0x934>)
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	4a22      	ldr	r2, [pc, #136]	; (8003a64 <HAL_RCC_OscConfig+0x934>)
 80039da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039de:	61d3      	str	r3, [r2, #28]
 80039e0:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <HAL_RCC_OscConfig+0x934>)
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80039e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80039fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <HAL_RCC_OscConfig+0x93c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d11a      	bne.n	8003a44 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HAL_RCC_OscConfig+0x93c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <HAL_RCC_OscConfig+0x93c>)
 8003a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1a:	f7fd fb4f 	bl	80010bc <HAL_GetTick>
 8003a1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a22:	e009      	b.n	8003a38 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a24:	f7fd fb4a 	bl	80010bc <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b64      	cmp	r3, #100	; 0x64
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e3b1      	b.n	800419c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <HAL_RCC_OscConfig+0x93c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0ef      	beq.n	8003a24 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d10d      	bne.n	8003a70 <HAL_RCC_OscConfig+0x940>
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_RCC_OscConfig+0x934>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4a02      	ldr	r2, [pc, #8]	; (8003a64 <HAL_RCC_OscConfig+0x934>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6213      	str	r3, [r2, #32]
 8003a60:	e03c      	b.n	8003adc <HAL_RCC_OscConfig+0x9ac>
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	10908120 	.word	0x10908120
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10c      	bne.n	8003a9a <HAL_RCC_OscConfig+0x96a>
 8003a80:	4bc1      	ldr	r3, [pc, #772]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4ac0      	ldr	r2, [pc, #768]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	6213      	str	r3, [r2, #32]
 8003a8c:	4bbe      	ldr	r3, [pc, #760]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4abd      	ldr	r2, [pc, #756]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003a92:	f023 0304 	bic.w	r3, r3, #4
 8003a96:	6213      	str	r3, [r2, #32]
 8003a98:	e020      	b.n	8003adc <HAL_RCC_OscConfig+0x9ac>
 8003a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b05      	cmp	r3, #5
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x994>
 8003aaa:	4bb7      	ldr	r3, [pc, #732]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	4ab6      	ldr	r2, [pc, #728]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	6213      	str	r3, [r2, #32]
 8003ab6:	4bb4      	ldr	r3, [pc, #720]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4ab3      	ldr	r2, [pc, #716]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	6213      	str	r3, [r2, #32]
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0x9ac>
 8003ac4:	4bb0      	ldr	r3, [pc, #704]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	4aaf      	ldr	r2, [pc, #700]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	6213      	str	r3, [r2, #32]
 8003ad0:	4bad      	ldr	r3, [pc, #692]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4aac      	ldr	r2, [pc, #688]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003ad6:	f023 0304 	bic.w	r3, r3, #4
 8003ada:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8081 	beq.w	8003bf0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aee:	f7fd fae5 	bl	80010bc <HAL_GetTick>
 8003af2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af6:	e00b      	b.n	8003b10 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af8:	f7fd fae0 	bl	80010bc <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e345      	b.n	800419c <HAL_RCC_OscConfig+0x106c>
 8003b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b14:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b18:	2202      	movs	r2, #2
 8003b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	fa93 f2a3 	rbit	r2, r3
 8003b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	fa93 f2a3 	rbit	r2, r3
 8003b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b56:	601a      	str	r2, [r3, #0]
  return result;
 8003b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f043 0302 	orr.w	r3, r3, #2
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d102      	bne.n	8003b7c <HAL_RCC_OscConfig+0xa4c>
 8003b76:	4b84      	ldr	r3, [pc, #528]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	e013      	b.n	8003ba4 <HAL_RCC_OscConfig+0xa74>
 8003b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b80:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b84:	2202      	movs	r2, #2
 8003b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	fa93 f2a3 	rbit	r2, r3
 8003b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	4b79      	ldr	r3, [pc, #484]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ba8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003bac:	2102      	movs	r1, #2
 8003bae:	6011      	str	r1, [r2, #0]
 8003bb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bb4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	fa92 f1a2 	rbit	r1, r2
 8003bbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bc2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003bc6:	6011      	str	r1, [r2, #0]
  return result;
 8003bc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bcc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	fab2 f282 	clz	r2, r2
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	f002 021f 	and.w	r2, r2, #31
 8003be2:	2101      	movs	r1, #1
 8003be4:	fa01 f202 	lsl.w	r2, r1, r2
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d084      	beq.n	8003af8 <HAL_RCC_OscConfig+0x9c8>
 8003bee:	e07f      	b.n	8003cf0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf0:	f7fd fa64 	bl	80010bc <HAL_GetTick>
 8003bf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf8:	e00b      	b.n	8003c12 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bfa:	f7fd fa5f 	bl	80010bc <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e2c4      	b.n	800419c <HAL_RCC_OscConfig+0x106c>
 8003c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c16:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	fa93 f2a3 	rbit	r2, r3
 8003c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c3e:	2202      	movs	r2, #2
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	fa93 f2a3 	rbit	r2, r3
 8003c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c58:	601a      	str	r2, [r3, #0]
  return result;
 8003c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c64:	fab3 f383 	clz	r3, r3
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f043 0302 	orr.w	r3, r3, #2
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d102      	bne.n	8003c7e <HAL_RCC_OscConfig+0xb4e>
 8003c78:	4b43      	ldr	r3, [pc, #268]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	e013      	b.n	8003ca6 <HAL_RCC_OscConfig+0xb76>
 8003c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c82:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c86:	2202      	movs	r2, #2
 8003c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	fa93 f2a3 	rbit	r2, r3
 8003c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	4b39      	ldr	r3, [pc, #228]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003caa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003cae:	2102      	movs	r1, #2
 8003cb0:	6011      	str	r1, [r2, #0]
 8003cb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	fa92 f1a2 	rbit	r1, r2
 8003cc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cc4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003cc8:	6011      	str	r1, [r2, #0]
  return result;
 8003cca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	fab2 f282 	clz	r2, r2
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	f002 021f 	and.w	r2, r2, #31
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d184      	bne.n	8003bfa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cf0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf8:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d02:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 8242 	beq.w	800419a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d16:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <HAL_RCC_OscConfig+0xc58>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	f000 8213 	beq.w	800414a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	f040 8162 	bne.w	8003ffa <HAL_RCC_OscConfig+0xeca>
 8003d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003d3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d48:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	fa93 f2a3 	rbit	r2, r3
 8003d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d56:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d5a:	601a      	str	r2, [r3, #0]
  return result;
 8003d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d60:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d64:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d66:	fab3 f383 	clz	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	461a      	mov	r2, r3
 8003d78:	2300      	movs	r3, #0
 8003d7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fd f99e 	bl	80010bc <HAL_GetTick>
 8003d80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d84:	e00c      	b.n	8003da0 <HAL_RCC_OscConfig+0xc70>
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7fd f996 	bl	80010bc <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e1fd      	b.n	800419c <HAL_RCC_OscConfig+0x106c>
 8003da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003da8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	fa93 f2a3 	rbit	r2, r3
 8003dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003dc4:	601a      	str	r2, [r3, #0]
  return result;
 8003dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003dce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd0:	fab3 f383 	clz	r3, r3
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d102      	bne.n	8003dea <HAL_RCC_OscConfig+0xcba>
 8003de4:	4bb0      	ldr	r3, [pc, #704]	; (80040a8 <HAL_RCC_OscConfig+0xf78>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	e027      	b.n	8003e3a <HAL_RCC_OscConfig+0xd0a>
 8003dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003df2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003df6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dfc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	fa93 f2a3 	rbit	r2, r3
 8003e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e14:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e22:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	fa93 f2a3 	rbit	r2, r3
 8003e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	4b9c      	ldr	r3, [pc, #624]	; (80040a8 <HAL_RCC_OscConfig+0xf78>)
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e3e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003e42:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e46:	6011      	str	r1, [r2, #0]
 8003e48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e4c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	fa92 f1a2 	rbit	r1, r2
 8003e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e5a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e5e:	6011      	str	r1, [r2, #0]
  return result;
 8003e60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e64:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	fab2 f282 	clz	r2, r2
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	f042 0220 	orr.w	r2, r2, #32
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	f002 021f 	and.w	r2, r2, #31
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d182      	bne.n	8003d8c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e86:	4b88      	ldr	r3, [pc, #544]	; (80040a8 <HAL_RCC_OscConfig+0xf78>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	430b      	orrs	r3, r1
 8003ea8:	497f      	ldr	r1, [pc, #508]	; (80040a8 <HAL_RCC_OscConfig+0xf78>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	604b      	str	r3, [r1, #4]
 8003eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003eb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	fa93 f2a3 	rbit	r2, r3
 8003eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ece:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003ed2:	601a      	str	r2, [r3, #0]
  return result;
 8003ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003edc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ede:	fab3 f383 	clz	r3, r3
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ee8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	461a      	mov	r2, r3
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef4:	f7fd f8e2 	bl	80010bc <HAL_GetTick>
 8003ef8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003efc:	e009      	b.n	8003f12 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efe:	f7fd f8dd 	bl	80010bc <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e144      	b.n	800419c <HAL_RCC_OscConfig+0x106c>
 8003f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f16:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f24:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	fa93 f2a3 	rbit	r2, r3
 8003f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f32:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f36:	601a      	str	r2, [r3, #0]
  return result;
 8003f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d102      	bne.n	8003f5c <HAL_RCC_OscConfig+0xe2c>
 8003f56:	4b54      	ldr	r3, [pc, #336]	; (80040a8 <HAL_RCC_OscConfig+0xf78>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	e027      	b.n	8003fac <HAL_RCC_OscConfig+0xe7c>
 8003f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f60:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	fa93 f2a3 	rbit	r2, r3
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f86:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f94:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	fa93 f2a3 	rbit	r2, r3
 8003f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <HAL_RCC_OscConfig+0xf78>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fb0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003fb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fb8:	6011      	str	r1, [r2, #0]
 8003fba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fbe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	fa92 f1a2 	rbit	r1, r2
 8003fc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fcc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003fd0:	6011      	str	r1, [r2, #0]
  return result;
 8003fd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fd6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	fab2 f282 	clz	r2, r2
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	f042 0220 	orr.w	r2, r2, #32
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	f002 021f 	and.w	r2, r2, #31
 8003fec:	2101      	movs	r1, #1
 8003fee:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d082      	beq.n	8003efe <HAL_RCC_OscConfig+0xdce>
 8003ff8:	e0cf      	b.n	800419a <HAL_RCC_OscConfig+0x106a>
 8003ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004002:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	fa93 f2a3 	rbit	r2, r3
 8004016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800401e:	601a      	str	r2, [r3, #0]
  return result;
 8004020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004024:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004028:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004034:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	461a      	mov	r2, r3
 800403c:	2300      	movs	r3, #0
 800403e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fd f83c 	bl	80010bc <HAL_GetTick>
 8004044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004048:	e009      	b.n	800405e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404a:	f7fd f837 	bl	80010bc <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e09e      	b.n	800419c <HAL_RCC_OscConfig+0x106c>
 800405e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004062:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800406a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004070:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	fa93 f2a3 	rbit	r2, r3
 800407a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004082:	601a      	str	r2, [r3, #0]
  return result;
 8004084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004088:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800408c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800408e:	fab3 f383 	clz	r3, r3
 8004092:	b2db      	uxtb	r3, r3
 8004094:	095b      	lsrs	r3, r3, #5
 8004096:	b2db      	uxtb	r3, r3
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d104      	bne.n	80040ac <HAL_RCC_OscConfig+0xf7c>
 80040a2:	4b01      	ldr	r3, [pc, #4]	; (80040a8 <HAL_RCC_OscConfig+0xf78>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	e029      	b.n	80040fc <HAL_RCC_OscConfig+0xfcc>
 80040a8:	40021000 	.word	0x40021000
 80040ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80040b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	fa93 f2a3 	rbit	r2, r3
 80040c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80040da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	fa93 f2a3 	rbit	r2, r3
 80040ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_RCC_OscConfig+0x1078>)
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004100:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004104:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004108:	6011      	str	r1, [r2, #0]
 800410a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800410e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	fa92 f1a2 	rbit	r1, r2
 8004118:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800411c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004120:	6011      	str	r1, [r2, #0]
  return result;
 8004122:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004126:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	fab2 f282 	clz	r2, r2
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	f042 0220 	orr.w	r2, r2, #32
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	f002 021f 	and.w	r2, r2, #31
 800413c:	2101      	movs	r1, #1
 800413e:	fa01 f202 	lsl.w	r2, r1, r2
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d180      	bne.n	800404a <HAL_RCC_OscConfig+0xf1a>
 8004148:	e027      	b.n	800419a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800414a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e01e      	b.n	800419c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <HAL_RCC_OscConfig+0x1078>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004166:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800416a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800416e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004172:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	429a      	cmp	r2, r3
 800417c:	d10b      	bne.n	8004196 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800417e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004182:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004192:	429a      	cmp	r2, r3
 8004194:	d001      	beq.n	800419a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000

080041ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b09e      	sub	sp, #120	; 0x78
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e162      	b.n	800448a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c4:	4b90      	ldr	r3, [pc, #576]	; (8004408 <HAL_RCC_ClockConfig+0x25c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d910      	bls.n	80041f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b8d      	ldr	r3, [pc, #564]	; (8004408 <HAL_RCC_ClockConfig+0x25c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 0207 	bic.w	r2, r3, #7
 80041da:	498b      	ldr	r1, [pc, #556]	; (8004408 <HAL_RCC_ClockConfig+0x25c>)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b89      	ldr	r3, [pc, #548]	; (8004408 <HAL_RCC_ClockConfig+0x25c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e14a      	b.n	800448a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004200:	4b82      	ldr	r3, [pc, #520]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	497f      	ldr	r1, [pc, #508]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 800420e:	4313      	orrs	r3, r2
 8004210:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80dc 	beq.w	80043d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d13c      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xf6>
 8004228:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800422c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004230:	fa93 f3a3 	rbit	r3, r3
 8004234:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004238:	fab3 f383 	clz	r3, r3
 800423c:	b2db      	uxtb	r3, r3
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d102      	bne.n	8004252 <HAL_RCC_ClockConfig+0xa6>
 800424c:	4b6f      	ldr	r3, [pc, #444]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	e00f      	b.n	8004272 <HAL_RCC_ClockConfig+0xc6>
 8004252:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004256:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800425a:	fa93 f3a3 	rbit	r3, r3
 800425e:	667b      	str	r3, [r7, #100]	; 0x64
 8004260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004264:	663b      	str	r3, [r7, #96]	; 0x60
 8004266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004268:	fa93 f3a3 	rbit	r3, r3
 800426c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800426e:	4b67      	ldr	r3, [pc, #412]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004276:	65ba      	str	r2, [r7, #88]	; 0x58
 8004278:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800427a:	fa92 f2a2 	rbit	r2, r2
 800427e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004280:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004282:	fab2 f282 	clz	r2, r2
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	f042 0220 	orr.w	r2, r2, #32
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	f002 021f 	and.w	r2, r2, #31
 8004292:	2101      	movs	r1, #1
 8004294:	fa01 f202 	lsl.w	r2, r1, r2
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d17b      	bne.n	8004396 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e0f3      	b.n	800448a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d13c      	bne.n	8004324 <HAL_RCC_ClockConfig+0x178>
 80042aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d102      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x128>
 80042ce:	4b4f      	ldr	r3, [pc, #316]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	e00f      	b.n	80042f4 <HAL_RCC_ClockConfig+0x148>
 80042d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042dc:	fa93 f3a3 	rbit	r3, r3
 80042e0:	647b      	str	r3, [r7, #68]	; 0x44
 80042e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e6:	643b      	str	r3, [r7, #64]	; 0x40
 80042e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f0:	4b46      	ldr	r3, [pc, #280]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80042fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042fc:	fa92 f2a2 	rbit	r2, r2
 8004300:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004304:	fab2 f282 	clz	r2, r2
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	f042 0220 	orr.w	r2, r2, #32
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	f002 021f 	and.w	r2, r2, #31
 8004314:	2101      	movs	r1, #1
 8004316:	fa01 f202 	lsl.w	r2, r1, r2
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d13a      	bne.n	8004396 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0b2      	b.n	800448a <HAL_RCC_ClockConfig+0x2de>
 8004324:	2302      	movs	r3, #2
 8004326:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b01      	cmp	r3, #1
 8004344:	d102      	bne.n	800434c <HAL_RCC_ClockConfig+0x1a0>
 8004346:	4b31      	ldr	r3, [pc, #196]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	e00d      	b.n	8004368 <HAL_RCC_ClockConfig+0x1bc>
 800434c:	2302      	movs	r3, #2
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	fa93 f3a3 	rbit	r3, r3
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
 8004358:	2302      	movs	r3, #2
 800435a:	623b      	str	r3, [r7, #32]
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	fa93 f3a3 	rbit	r3, r3
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	4b29      	ldr	r3, [pc, #164]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	2202      	movs	r2, #2
 800436a:	61ba      	str	r2, [r7, #24]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	fa92 f2a2 	rbit	r2, r2
 8004372:	617a      	str	r2, [r7, #20]
  return result;
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	fab2 f282 	clz	r2, r2
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	f042 0220 	orr.w	r2, r2, #32
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	f002 021f 	and.w	r2, r2, #31
 8004386:	2101      	movs	r1, #1
 8004388:	fa01 f202 	lsl.w	r2, r1, r2
 800438c:	4013      	ands	r3, r2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e079      	b.n	800448a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004396:	4b1d      	ldr	r3, [pc, #116]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f023 0203 	bic.w	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	491a      	ldr	r1, [pc, #104]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a8:	f7fc fe88 	bl	80010bc <HAL_GetTick>
 80043ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b0:	f7fc fe84 	bl	80010bc <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e061      	b.n	800448a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	4b11      	ldr	r3, [pc, #68]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 020c 	and.w	r2, r3, #12
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d1eb      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_ClockConfig+0x25c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d214      	bcs.n	8004410 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b08      	ldr	r3, [pc, #32]	; (8004408 <HAL_RCC_ClockConfig+0x25c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 0207 	bic.w	r2, r3, #7
 80043ee:	4906      	ldr	r1, [pc, #24]	; (8004408 <HAL_RCC_ClockConfig+0x25c>)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b04      	ldr	r3, [pc, #16]	; (8004408 <HAL_RCC_ClockConfig+0x25c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d005      	beq.n	8004410 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e040      	b.n	800448a <HAL_RCC_ClockConfig+0x2de>
 8004408:	40022000 	.word	0x40022000
 800440c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800441c:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <HAL_RCC_ClockConfig+0x2e8>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	491a      	ldr	r1, [pc, #104]	; (8004494 <HAL_RCC_ClockConfig+0x2e8>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800443a:	4b16      	ldr	r3, [pc, #88]	; (8004494 <HAL_RCC_ClockConfig+0x2e8>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4912      	ldr	r1, [pc, #72]	; (8004494 <HAL_RCC_ClockConfig+0x2e8>)
 800444a:	4313      	orrs	r3, r2
 800444c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800444e:	f000 f829 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8004452:	4601      	mov	r1, r0
 8004454:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <HAL_RCC_ClockConfig+0x2e8>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800445c:	22f0      	movs	r2, #240	; 0xf0
 800445e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	fa92 f2a2 	rbit	r2, r2
 8004466:	60fa      	str	r2, [r7, #12]
  return result;
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	fab2 f282 	clz	r2, r2
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	40d3      	lsrs	r3, r2
 8004472:	4a09      	ldr	r2, [pc, #36]	; (8004498 <HAL_RCC_ClockConfig+0x2ec>)
 8004474:	5cd3      	ldrb	r3, [r2, r3]
 8004476:	fa21 f303 	lsr.w	r3, r1, r3
 800447a:	4a08      	ldr	r2, [pc, #32]	; (800449c <HAL_RCC_ClockConfig+0x2f0>)
 800447c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <HAL_RCC_ClockConfig+0x2f4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7fc fdd6 	bl	8001034 <HAL_InitTick>
  
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3778      	adds	r7, #120	; 0x78
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000
 8004498:	08007820 	.word	0x08007820
 800449c:	2000000c 	.word	0x2000000c
 80044a0:	20000010 	.word	0x20000010

080044a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b08b      	sub	sp, #44	; 0x2c
 80044a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80044be:	4b29      	ldr	r3, [pc, #164]	; (8004564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d002      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x30>
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d003      	beq.n	80044da <HAL_RCC_GetSysClockFreq+0x36>
 80044d2:	e03c      	b.n	800454e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044d4:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044d6:	623b      	str	r3, [r7, #32]
      break;
 80044d8:	e03c      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044e4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	fa92 f2a2 	rbit	r2, r2
 80044ec:	607a      	str	r2, [r7, #4]
  return result;
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	fab2 f282 	clz	r2, r2
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	40d3      	lsrs	r3, r2
 80044f8:	4a1c      	ldr	r2, [pc, #112]	; (800456c <HAL_RCC_GetSysClockFreq+0xc8>)
 80044fa:	5cd3      	ldrb	r3, [r2, r3]
 80044fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044fe:	4b19      	ldr	r3, [pc, #100]	; (8004564 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	220f      	movs	r2, #15
 8004508:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	fa92 f2a2 	rbit	r2, r2
 8004510:	60fa      	str	r2, [r7, #12]
  return result;
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	fab2 f282 	clz	r2, r2
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	40d3      	lsrs	r3, r2
 800451c:	4a14      	ldr	r2, [pc, #80]	; (8004570 <HAL_RCC_GetSysClockFreq+0xcc>)
 800451e:	5cd3      	ldrb	r3, [r2, r3]
 8004520:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800452c:	4a0e      	ldr	r2, [pc, #56]	; (8004568 <HAL_RCC_GetSysClockFreq+0xc4>)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	fbb2 f2f3 	udiv	r2, r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	fb02 f303 	mul.w	r3, r2, r3
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
 800453c:	e004      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	4a0c      	ldr	r2, [pc, #48]	; (8004574 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	623b      	str	r3, [r7, #32]
      break;
 800454c:	e002      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800454e:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004550:	623b      	str	r3, [r7, #32]
      break;
 8004552:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004554:	6a3b      	ldr	r3, [r7, #32]
}
 8004556:	4618      	mov	r0, r3
 8004558:	372c      	adds	r7, #44	; 0x2c
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000
 8004568:	007a1200 	.word	0x007a1200
 800456c:	08007838 	.word	0x08007838
 8004570:	08007848 	.word	0x08007848
 8004574:	003d0900 	.word	0x003d0900

08004578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <HAL_RCC_GetHCLKFreq+0x14>)
 800457e:	681b      	ldr	r3, [r3, #0]
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	2000000c 	.word	0x2000000c

08004590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004596:	f7ff ffef 	bl	8004578 <HAL_RCC_GetHCLKFreq>
 800459a:	4601      	mov	r1, r0
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045a4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80045a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	fa92 f2a2 	rbit	r2, r2
 80045b0:	603a      	str	r2, [r7, #0]
  return result;
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	fab2 f282 	clz	r2, r2
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	40d3      	lsrs	r3, r2
 80045bc:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80045be:	5cd3      	ldrb	r3, [r2, r3]
 80045c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40021000 	.word	0x40021000
 80045d0:	08007830 	.word	0x08007830

080045d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80045da:	f7ff ffcd 	bl	8004578 <HAL_RCC_GetHCLKFreq>
 80045de:	4601      	mov	r1, r0
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80045e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80045ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	fa92 f2a2 	rbit	r2, r2
 80045f4:	603a      	str	r2, [r7, #0]
  return result;
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	fab2 f282 	clz	r2, r2
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	40d3      	lsrs	r3, r2
 8004600:	4a04      	ldr	r2, [pc, #16]	; (8004614 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004602:	5cd3      	ldrb	r3, [r2, r3]
 8004604:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40021000 	.word	0x40021000
 8004614:	08007830 	.word	0x08007830

08004618 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b092      	sub	sp, #72	; 0x48
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004628:	2300      	movs	r3, #0
 800462a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80d4 	beq.w	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800463c:	4b4e      	ldr	r3, [pc, #312]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10e      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004648:	4b4b      	ldr	r3, [pc, #300]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	4a4a      	ldr	r2, [pc, #296]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004652:	61d3      	str	r3, [r2, #28]
 8004654:	4b48      	ldr	r3, [pc, #288]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004660:	2301      	movs	r3, #1
 8004662:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004666:	4b45      	ldr	r3, [pc, #276]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	2b00      	cmp	r3, #0
 8004670:	d118      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004672:	4b42      	ldr	r3, [pc, #264]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a41      	ldr	r2, [pc, #260]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800467c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800467e:	f7fc fd1d 	bl	80010bc <HAL_GetTick>
 8004682:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004684:	e008      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004686:	f7fc fd19 	bl	80010bc <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b64      	cmp	r3, #100	; 0x64
 8004692:	d901      	bls.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e169      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004698:	4b38      	ldr	r3, [pc, #224]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046a4:	4b34      	ldr	r3, [pc, #208]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8084 	beq.w	80047be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d07c      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046c4:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d6:	fa93 f3a3 	rbit	r3, r3
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b26      	ldr	r3, [pc, #152]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	461a      	mov	r2, r3
 80046ee:	2301      	movs	r3, #1
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	fa93 f3a3 	rbit	r3, r3
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004702:	fab3 f383 	clz	r3, r3
 8004706:	b2db      	uxtb	r3, r3
 8004708:	461a      	mov	r2, r3
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	461a      	mov	r2, r3
 8004712:	2300      	movs	r3, #0
 8004714:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004716:	4a18      	ldr	r2, [pc, #96]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800471c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d04b      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004726:	f7fc fcc9 	bl	80010bc <HAL_GetTick>
 800472a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472c:	e00a      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472e:	f7fc fcc5 	bl	80010bc <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f241 3288 	movw	r2, #5000	; 0x1388
 800473c:	4293      	cmp	r3, r2
 800473e:	d901      	bls.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e113      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004744:	2302      	movs	r3, #2
 8004746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
 8004750:	2302      	movs	r3, #2
 8004752:	623b      	str	r3, [r7, #32]
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	fa93 f3a3 	rbit	r3, r3
 800475a:	61fb      	str	r3, [r7, #28]
  return result;
 800475c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f043 0302 	orr.w	r3, r3, #2
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d108      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004772:	4b01      	ldr	r3, [pc, #4]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	e00d      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004778:	40021000 	.word	0x40021000
 800477c:	40007000 	.word	0x40007000
 8004780:	10908100 	.word	0x10908100
 8004784:	2302      	movs	r3, #2
 8004786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	fa93 f3a3 	rbit	r3, r3
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	4b78      	ldr	r3, [pc, #480]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	2202      	movs	r2, #2
 8004796:	613a      	str	r2, [r7, #16]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	fa92 f2a2 	rbit	r2, r2
 800479e:	60fa      	str	r2, [r7, #12]
  return result;
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	fab2 f282 	clz	r2, r2
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	f002 021f 	and.w	r2, r2, #31
 80047b2:	2101      	movs	r1, #1
 80047b4:	fa01 f202 	lsl.w	r2, r1, r2
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0b7      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80047be:	4b6d      	ldr	r3, [pc, #436]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	496a      	ldr	r1, [pc, #424]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d105      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d8:	4b66      	ldr	r3, [pc, #408]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	4a65      	ldr	r2, [pc, #404]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047f0:	4b60      	ldr	r3, [pc, #384]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	f023 0203 	bic.w	r2, r3, #3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	495d      	ldr	r1, [pc, #372]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800480e:	4b59      	ldr	r3, [pc, #356]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	4956      	ldr	r1, [pc, #344]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800481c:	4313      	orrs	r3, r2
 800481e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800482c:	4b51      	ldr	r3, [pc, #324]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	494e      	ldr	r1, [pc, #312]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800483a:	4313      	orrs	r3, r2
 800483c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800484a:	4b4a      	ldr	r3, [pc, #296]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f023 0210 	bic.w	r2, r3, #16
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	4947      	ldr	r1, [pc, #284]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004858:	4313      	orrs	r3, r2
 800485a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004868:	4b42      	ldr	r3, [pc, #264]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	493f      	ldr	r1, [pc, #252]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004876:	4313      	orrs	r3, r2
 8004878:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004886:	4b3b      	ldr	r3, [pc, #236]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	f023 0220 	bic.w	r2, r3, #32
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	4938      	ldr	r1, [pc, #224]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004894:	4313      	orrs	r3, r2
 8004896:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048a4:	4b33      	ldr	r3, [pc, #204]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	4930      	ldr	r1, [pc, #192]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048c2:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	4929      	ldr	r1, [pc, #164]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048e0:	4b24      	ldr	r3, [pc, #144]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	4921      	ldr	r1, [pc, #132]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048fe:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	491a      	ldr	r1, [pc, #104]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800490c:	4313      	orrs	r3, r2
 800490e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800491c:	4b15      	ldr	r3, [pc, #84]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	4912      	ldr	r1, [pc, #72]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800492a:	4313      	orrs	r3, r2
 800492c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800493a:	4b0e      	ldr	r3, [pc, #56]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	490b      	ldr	r1, [pc, #44]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004948:	4313      	orrs	r3, r2
 800494a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004964:	4903      	ldr	r1, [pc, #12]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004966:	4313      	orrs	r3, r2
 8004968:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3748      	adds	r7, #72	; 0x48
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40021000 	.word	0x40021000

08004978 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e09d      	b.n	8004ac6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	2b00      	cmp	r3, #0
 8004990:	d108      	bne.n	80049a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800499a:	d009      	beq.n	80049b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	61da      	str	r2, [r3, #28]
 80049a2:	e005      	b.n	80049b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fc f934 	bl	8000c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049f0:	d902      	bls.n	80049f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	e002      	b.n	80049fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a06:	d007      	beq.n	8004a18 <HAL_SPI_Init+0xa0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a10:	d002      	beq.n	8004a18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	ea42 0103 	orr.w	r1, r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	0c1b      	lsrs	r3, r3, #16
 8004a74:	f003 0204 	and.w	r2, r3, #4
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a94:	ea42 0103 	orr.w	r1, r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ab4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e049      	b.n	8004b74 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fc f8e1 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f000 fd5d 	bl	80055cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e049      	b.n	8004c22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f841 	bl	8004c2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f000 fd06 	bl	80055cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
	...

08004c40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d109      	bne.n	8004c64 <HAL_TIM_PWM_Start+0x24>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	bf14      	ite	ne
 8004c5c:	2301      	movne	r3, #1
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e03c      	b.n	8004cde <HAL_TIM_PWM_Start+0x9e>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d109      	bne.n	8004c7e <HAL_TIM_PWM_Start+0x3e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	bf14      	ite	ne
 8004c76:	2301      	movne	r3, #1
 8004c78:	2300      	moveq	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	e02f      	b.n	8004cde <HAL_TIM_PWM_Start+0x9e>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d109      	bne.n	8004c98 <HAL_TIM_PWM_Start+0x58>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	bf14      	ite	ne
 8004c90:	2301      	movne	r3, #1
 8004c92:	2300      	moveq	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	e022      	b.n	8004cde <HAL_TIM_PWM_Start+0x9e>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b0c      	cmp	r3, #12
 8004c9c:	d109      	bne.n	8004cb2 <HAL_TIM_PWM_Start+0x72>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	bf14      	ite	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	2300      	moveq	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	e015      	b.n	8004cde <HAL_TIM_PWM_Start+0x9e>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	d109      	bne.n	8004ccc <HAL_TIM_PWM_Start+0x8c>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e008      	b.n	8004cde <HAL_TIM_PWM_Start+0x9e>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e097      	b.n	8004e16 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d104      	bne.n	8004cf6 <HAL_TIM_PWM_Start+0xb6>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf4:	e023      	b.n	8004d3e <HAL_TIM_PWM_Start+0xfe>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d104      	bne.n	8004d06 <HAL_TIM_PWM_Start+0xc6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d04:	e01b      	b.n	8004d3e <HAL_TIM_PWM_Start+0xfe>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d104      	bne.n	8004d16 <HAL_TIM_PWM_Start+0xd6>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d14:	e013      	b.n	8004d3e <HAL_TIM_PWM_Start+0xfe>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d104      	bne.n	8004d26 <HAL_TIM_PWM_Start+0xe6>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d24:	e00b      	b.n	8004d3e <HAL_TIM_PWM_Start+0xfe>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	d104      	bne.n	8004d36 <HAL_TIM_PWM_Start+0xf6>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d34:	e003      	b.n	8004d3e <HAL_TIM_PWM_Start+0xfe>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2201      	movs	r2, #1
 8004d44:	6839      	ldr	r1, [r7, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f001 f840 	bl	8005dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a33      	ldr	r2, [pc, #204]	; (8004e20 <HAL_TIM_PWM_Start+0x1e0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_TIM_PWM_Start+0x13e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a32      	ldr	r2, [pc, #200]	; (8004e24 <HAL_TIM_PWM_Start+0x1e4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_TIM_PWM_Start+0x13e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a30      	ldr	r2, [pc, #192]	; (8004e28 <HAL_TIM_PWM_Start+0x1e8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_TIM_PWM_Start+0x13e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2f      	ldr	r2, [pc, #188]	; (8004e2c <HAL_TIM_PWM_Start+0x1ec>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_TIM_PWM_Start+0x13e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a2d      	ldr	r2, [pc, #180]	; (8004e30 <HAL_TIM_PWM_Start+0x1f0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <HAL_TIM_PWM_Start+0x142>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <HAL_TIM_PWM_Start+0x144>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a20      	ldr	r2, [pc, #128]	; (8004e20 <HAL_TIM_PWM_Start+0x1e0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d018      	beq.n	8004dd4 <HAL_TIM_PWM_Start+0x194>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004daa:	d013      	beq.n	8004dd4 <HAL_TIM_PWM_Start+0x194>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a20      	ldr	r2, [pc, #128]	; (8004e34 <HAL_TIM_PWM_Start+0x1f4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00e      	beq.n	8004dd4 <HAL_TIM_PWM_Start+0x194>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1f      	ldr	r2, [pc, #124]	; (8004e38 <HAL_TIM_PWM_Start+0x1f8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d009      	beq.n	8004dd4 <HAL_TIM_PWM_Start+0x194>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <HAL_TIM_PWM_Start+0x1e4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <HAL_TIM_PWM_Start+0x194>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a16      	ldr	r2, [pc, #88]	; (8004e28 <HAL_TIM_PWM_Start+0x1e8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d115      	bne.n	8004e00 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <HAL_TIM_PWM_Start+0x1fc>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b06      	cmp	r3, #6
 8004de4:	d015      	beq.n	8004e12 <HAL_TIM_PWM_Start+0x1d2>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dec:	d011      	beq.n	8004e12 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0201 	orr.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfe:	e008      	b.n	8004e12 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e000      	b.n	8004e14 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40013400 	.word	0x40013400
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	00010007 	.word	0x00010007

08004e40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	6839      	ldr	r1, [r7, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 ffba 	bl	8005dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a3e      	ldr	r2, [pc, #248]	; (8004f58 <HAL_TIM_PWM_Stop+0x118>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <HAL_TIM_PWM_Stop+0x4a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a3d      	ldr	r2, [pc, #244]	; (8004f5c <HAL_TIM_PWM_Stop+0x11c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00e      	beq.n	8004e8a <HAL_TIM_PWM_Stop+0x4a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a3b      	ldr	r2, [pc, #236]	; (8004f60 <HAL_TIM_PWM_Stop+0x120>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d009      	beq.n	8004e8a <HAL_TIM_PWM_Stop+0x4a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a3a      	ldr	r2, [pc, #232]	; (8004f64 <HAL_TIM_PWM_Stop+0x124>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_TIM_PWM_Stop+0x4a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a38      	ldr	r2, [pc, #224]	; (8004f68 <HAL_TIM_PWM_Stop+0x128>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d101      	bne.n	8004e8e <HAL_TIM_PWM_Stop+0x4e>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <HAL_TIM_PWM_Stop+0x50>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d017      	beq.n	8004ec4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a1a      	ldr	r2, [r3, #32]
 8004e9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10f      	bne.n	8004ec4 <HAL_TIM_PWM_Stop+0x84>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	f240 4344 	movw	r3, #1092	; 0x444
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d107      	bne.n	8004ec4 <HAL_TIM_PWM_Stop+0x84>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ec2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a1a      	ldr	r2, [r3, #32]
 8004eca:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10f      	bne.n	8004ef4 <HAL_TIM_PWM_Stop+0xb4>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6a1a      	ldr	r2, [r3, #32]
 8004eda:	f240 4344 	movw	r3, #1092	; 0x444
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d107      	bne.n	8004ef4 <HAL_TIM_PWM_Stop+0xb4>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d104      	bne.n	8004f04 <HAL_TIM_PWM_Stop+0xc4>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f02:	e023      	b.n	8004f4c <HAL_TIM_PWM_Stop+0x10c>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d104      	bne.n	8004f14 <HAL_TIM_PWM_Stop+0xd4>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f12:	e01b      	b.n	8004f4c <HAL_TIM_PWM_Stop+0x10c>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d104      	bne.n	8004f24 <HAL_TIM_PWM_Stop+0xe4>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f22:	e013      	b.n	8004f4c <HAL_TIM_PWM_Stop+0x10c>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b0c      	cmp	r3, #12
 8004f28:	d104      	bne.n	8004f34 <HAL_TIM_PWM_Stop+0xf4>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f32:	e00b      	b.n	8004f4c <HAL_TIM_PWM_Stop+0x10c>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d104      	bne.n	8004f44 <HAL_TIM_PWM_Stop+0x104>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f42:	e003      	b.n	8004f4c <HAL_TIM_PWM_Stop+0x10c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40012c00 	.word	0x40012c00
 8004f5c:	40013400 	.word	0x40013400
 8004f60:	40014000 	.word	0x40014000
 8004f64:	40014400 	.word	0x40014400
 8004f68:	40014800 	.word	0x40014800

08004f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d122      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d11b      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0202 	mvn.w	r2, #2
 8004f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 faed 	bl	800558e <HAL_TIM_IC_CaptureCallback>
 8004fb4:	e005      	b.n	8004fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fadf 	bl	800557a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 faf0 	bl	80055a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d122      	bne.n	800501c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d11b      	bne.n	800501c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0204 	mvn.w	r2, #4
 8004fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fac3 	bl	800558e <HAL_TIM_IC_CaptureCallback>
 8005008:	e005      	b.n	8005016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fab5 	bl	800557a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fac6 	bl	80055a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b08      	cmp	r3, #8
 8005028:	d122      	bne.n	8005070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b08      	cmp	r3, #8
 8005036:	d11b      	bne.n	8005070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0208 	mvn.w	r2, #8
 8005040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2204      	movs	r2, #4
 8005046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa99 	bl	800558e <HAL_TIM_IC_CaptureCallback>
 800505c:	e005      	b.n	800506a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fa8b 	bl	800557a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fa9c 	bl	80055a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b10      	cmp	r3, #16
 800507c:	d122      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b10      	cmp	r3, #16
 800508a:	d11b      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0210 	mvn.w	r2, #16
 8005094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2208      	movs	r2, #8
 800509a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fa6f 	bl	800558e <HAL_TIM_IC_CaptureCallback>
 80050b0:	e005      	b.n	80050be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fa61 	bl	800557a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fa72 	bl	80055a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d10e      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d107      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0201 	mvn.w	r2, #1
 80050e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fa3b 	bl	8005566 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b80      	cmp	r3, #128	; 0x80
 80050fc:	d10e      	bne.n	800511c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	2b80      	cmp	r3, #128	; 0x80
 800510a:	d107      	bne.n	800511c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 ff86 	bl	8006028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512a:	d10e      	bne.n	800514a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	2b80      	cmp	r3, #128	; 0x80
 8005138:	d107      	bne.n	800514a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 ff79 	bl	800603c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d10e      	bne.n	8005176 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005162:	2b40      	cmp	r3, #64	; 0x40
 8005164:	d107      	bne.n	8005176 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800516e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fa20 	bl	80055b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b20      	cmp	r3, #32
 8005182:	d10e      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b20      	cmp	r3, #32
 8005190:	d107      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f06f 0220 	mvn.w	r2, #32
 800519a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 ff39 	bl	8006014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e0ff      	b.n	80053ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b14      	cmp	r3, #20
 80051d6:	f200 80f0 	bhi.w	80053ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005235 	.word	0x08005235
 80051e4:	080053bb 	.word	0x080053bb
 80051e8:	080053bb 	.word	0x080053bb
 80051ec:	080053bb 	.word	0x080053bb
 80051f0:	08005275 	.word	0x08005275
 80051f4:	080053bb 	.word	0x080053bb
 80051f8:	080053bb 	.word	0x080053bb
 80051fc:	080053bb 	.word	0x080053bb
 8005200:	080052b7 	.word	0x080052b7
 8005204:	080053bb 	.word	0x080053bb
 8005208:	080053bb 	.word	0x080053bb
 800520c:	080053bb 	.word	0x080053bb
 8005210:	080052f7 	.word	0x080052f7
 8005214:	080053bb 	.word	0x080053bb
 8005218:	080053bb 	.word	0x080053bb
 800521c:	080053bb 	.word	0x080053bb
 8005220:	08005339 	.word	0x08005339
 8005224:	080053bb 	.word	0x080053bb
 8005228:	080053bb 	.word	0x080053bb
 800522c:	080053bb 	.word	0x080053bb
 8005230:	08005379 	.word	0x08005379
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fa56 	bl	80056ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0208 	orr.w	r2, r2, #8
 800524e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0204 	bic.w	r2, r2, #4
 800525e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6999      	ldr	r1, [r3, #24]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	619a      	str	r2, [r3, #24]
      break;
 8005272:	e0a5      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fac6 	bl	800580c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800528e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6999      	ldr	r1, [r3, #24]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	021a      	lsls	r2, r3, #8
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	619a      	str	r2, [r3, #24]
      break;
 80052b4:	e084      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fb2f 	bl	8005920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0208 	orr.w	r2, r2, #8
 80052d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0204 	bic.w	r2, r2, #4
 80052e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69d9      	ldr	r1, [r3, #28]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	61da      	str	r2, [r3, #28]
      break;
 80052f4:	e064      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fb97 	bl	8005a30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69d9      	ldr	r1, [r3, #28]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	021a      	lsls	r2, r3, #8
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	61da      	str	r2, [r3, #28]
      break;
 8005336:	e043      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fbe0 	bl	8005b04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0208 	orr.w	r2, r2, #8
 8005352:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0204 	bic.w	r2, r2, #4
 8005362:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005376:	e023      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fc24 	bl	8005bcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005392:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	021a      	lsls	r2, r3, #8
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053b8:	e002      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	75fb      	strb	r3, [r7, #23]
      break;
 80053be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop

080053d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_TIM_ConfigClockSource+0x1c>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e0b6      	b.n	800555e <HAL_TIM_ConfigClockSource+0x18a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800540e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800541a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542c:	d03e      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0xd8>
 800542e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005432:	f200 8087 	bhi.w	8005544 <HAL_TIM_ConfigClockSource+0x170>
 8005436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543a:	f000 8086 	beq.w	800554a <HAL_TIM_ConfigClockSource+0x176>
 800543e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005442:	d87f      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x170>
 8005444:	2b70      	cmp	r3, #112	; 0x70
 8005446:	d01a      	beq.n	800547e <HAL_TIM_ConfigClockSource+0xaa>
 8005448:	2b70      	cmp	r3, #112	; 0x70
 800544a:	d87b      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x170>
 800544c:	2b60      	cmp	r3, #96	; 0x60
 800544e:	d050      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x11e>
 8005450:	2b60      	cmp	r3, #96	; 0x60
 8005452:	d877      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x170>
 8005454:	2b50      	cmp	r3, #80	; 0x50
 8005456:	d03c      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0xfe>
 8005458:	2b50      	cmp	r3, #80	; 0x50
 800545a:	d873      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x170>
 800545c:	2b40      	cmp	r3, #64	; 0x40
 800545e:	d058      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0x13e>
 8005460:	2b40      	cmp	r3, #64	; 0x40
 8005462:	d86f      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x170>
 8005464:	2b30      	cmp	r3, #48	; 0x30
 8005466:	d064      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0x15e>
 8005468:	2b30      	cmp	r3, #48	; 0x30
 800546a:	d86b      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x170>
 800546c:	2b20      	cmp	r3, #32
 800546e:	d060      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0x15e>
 8005470:	2b20      	cmp	r3, #32
 8005472:	d867      	bhi.n	8005544 <HAL_TIM_ConfigClockSource+0x170>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d05c      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0x15e>
 8005478:	2b10      	cmp	r3, #16
 800547a:	d05a      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0x15e>
 800547c:	e062      	b.n	8005544 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6899      	ldr	r1, [r3, #8]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f000 fc7d 	bl	8005d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	609a      	str	r2, [r3, #8]
      break;
 80054aa:	e04f      	b.n	800554c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	6899      	ldr	r1, [r3, #8]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f000 fc66 	bl	8005d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ce:	609a      	str	r2, [r3, #8]
      break;
 80054d0:	e03c      	b.n	800554c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6859      	ldr	r1, [r3, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	461a      	mov	r2, r3
 80054e0:	f000 fbda 	bl	8005c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2150      	movs	r1, #80	; 0x50
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fc33 	bl	8005d56 <TIM_ITRx_SetConfig>
      break;
 80054f0:	e02c      	b.n	800554c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6859      	ldr	r1, [r3, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	461a      	mov	r2, r3
 8005500:	f000 fbf9 	bl	8005cf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2160      	movs	r1, #96	; 0x60
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fc23 	bl	8005d56 <TIM_ITRx_SetConfig>
      break;
 8005510:	e01c      	b.n	800554c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	6859      	ldr	r1, [r3, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	461a      	mov	r2, r3
 8005520:	f000 fbba 	bl	8005c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2140      	movs	r1, #64	; 0x40
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fc13 	bl	8005d56 <TIM_ITRx_SetConfig>
      break;
 8005530:	e00c      	b.n	800554c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4619      	mov	r1, r3
 800553c:	4610      	mov	r0, r2
 800553e:	f000 fc0a 	bl	8005d56 <TIM_ITRx_SetConfig>
      break;
 8005542:	e003      	b.n	800554c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
      break;
 8005548:	e000      	b.n	800554c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800554a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a3c      	ldr	r2, [pc, #240]	; (80056d0 <TIM_Base_SetConfig+0x104>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00f      	beq.n	8005604 <TIM_Base_SetConfig+0x38>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ea:	d00b      	beq.n	8005604 <TIM_Base_SetConfig+0x38>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a39      	ldr	r2, [pc, #228]	; (80056d4 <TIM_Base_SetConfig+0x108>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_Base_SetConfig+0x38>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a38      	ldr	r2, [pc, #224]	; (80056d8 <TIM_Base_SetConfig+0x10c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0x38>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a37      	ldr	r2, [pc, #220]	; (80056dc <TIM_Base_SetConfig+0x110>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d108      	bne.n	8005616 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2d      	ldr	r2, [pc, #180]	; (80056d0 <TIM_Base_SetConfig+0x104>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01b      	beq.n	8005656 <TIM_Base_SetConfig+0x8a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005624:	d017      	beq.n	8005656 <TIM_Base_SetConfig+0x8a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a2a      	ldr	r2, [pc, #168]	; (80056d4 <TIM_Base_SetConfig+0x108>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <TIM_Base_SetConfig+0x8a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a29      	ldr	r2, [pc, #164]	; (80056d8 <TIM_Base_SetConfig+0x10c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00f      	beq.n	8005656 <TIM_Base_SetConfig+0x8a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a28      	ldr	r2, [pc, #160]	; (80056dc <TIM_Base_SetConfig+0x110>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00b      	beq.n	8005656 <TIM_Base_SetConfig+0x8a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a27      	ldr	r2, [pc, #156]	; (80056e0 <TIM_Base_SetConfig+0x114>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d007      	beq.n	8005656 <TIM_Base_SetConfig+0x8a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a26      	ldr	r2, [pc, #152]	; (80056e4 <TIM_Base_SetConfig+0x118>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d003      	beq.n	8005656 <TIM_Base_SetConfig+0x8a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a25      	ldr	r2, [pc, #148]	; (80056e8 <TIM_Base_SetConfig+0x11c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d108      	bne.n	8005668 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a10      	ldr	r2, [pc, #64]	; (80056d0 <TIM_Base_SetConfig+0x104>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00f      	beq.n	80056b4 <TIM_Base_SetConfig+0xe8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a11      	ldr	r2, [pc, #68]	; (80056dc <TIM_Base_SetConfig+0x110>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00b      	beq.n	80056b4 <TIM_Base_SetConfig+0xe8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a10      	ldr	r2, [pc, #64]	; (80056e0 <TIM_Base_SetConfig+0x114>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d007      	beq.n	80056b4 <TIM_Base_SetConfig+0xe8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a0f      	ldr	r2, [pc, #60]	; (80056e4 <TIM_Base_SetConfig+0x118>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_Base_SetConfig+0xe8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a0e      	ldr	r2, [pc, #56]	; (80056e8 <TIM_Base_SetConfig+0x11c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d103      	bne.n	80056bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	615a      	str	r2, [r3, #20]
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	40013400 	.word	0x40013400
 80056e0:	40014000 	.word	0x40014000
 80056e4:	40014400 	.word	0x40014400
 80056e8:	40014800 	.word	0x40014800

080056ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f023 0201 	bic.w	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0303 	bic.w	r3, r3, #3
 8005726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f023 0302 	bic.w	r3, r3, #2
 8005738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a2c      	ldr	r2, [pc, #176]	; (80057f8 <TIM_OC1_SetConfig+0x10c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00f      	beq.n	800576c <TIM_OC1_SetConfig+0x80>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a2b      	ldr	r2, [pc, #172]	; (80057fc <TIM_OC1_SetConfig+0x110>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00b      	beq.n	800576c <TIM_OC1_SetConfig+0x80>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a2a      	ldr	r2, [pc, #168]	; (8005800 <TIM_OC1_SetConfig+0x114>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d007      	beq.n	800576c <TIM_OC1_SetConfig+0x80>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a29      	ldr	r2, [pc, #164]	; (8005804 <TIM_OC1_SetConfig+0x118>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_OC1_SetConfig+0x80>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a28      	ldr	r2, [pc, #160]	; (8005808 <TIM_OC1_SetConfig+0x11c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d10c      	bne.n	8005786 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 0308 	bic.w	r3, r3, #8
 8005772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f023 0304 	bic.w	r3, r3, #4
 8005784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a1b      	ldr	r2, [pc, #108]	; (80057f8 <TIM_OC1_SetConfig+0x10c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00f      	beq.n	80057ae <TIM_OC1_SetConfig+0xc2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a1a      	ldr	r2, [pc, #104]	; (80057fc <TIM_OC1_SetConfig+0x110>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00b      	beq.n	80057ae <TIM_OC1_SetConfig+0xc2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a19      	ldr	r2, [pc, #100]	; (8005800 <TIM_OC1_SetConfig+0x114>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d007      	beq.n	80057ae <TIM_OC1_SetConfig+0xc2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a18      	ldr	r2, [pc, #96]	; (8005804 <TIM_OC1_SetConfig+0x118>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d003      	beq.n	80057ae <TIM_OC1_SetConfig+0xc2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a17      	ldr	r2, [pc, #92]	; (8005808 <TIM_OC1_SetConfig+0x11c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d111      	bne.n	80057d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	621a      	str	r2, [r3, #32]
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40013400 	.word	0x40013400
 8005800:	40014000 	.word	0x40014000
 8005804:	40014400 	.word	0x40014400
 8005808:	40014800 	.word	0x40014800

0800580c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f023 0210 	bic.w	r2, r3, #16
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800583a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f023 0320 	bic.w	r3, r3, #32
 800585a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a28      	ldr	r2, [pc, #160]	; (800590c <TIM_OC2_SetConfig+0x100>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_OC2_SetConfig+0x6c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a27      	ldr	r2, [pc, #156]	; (8005910 <TIM_OC2_SetConfig+0x104>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d10d      	bne.n	8005894 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800587e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005892:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a1d      	ldr	r2, [pc, #116]	; (800590c <TIM_OC2_SetConfig+0x100>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00f      	beq.n	80058bc <TIM_OC2_SetConfig+0xb0>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a1c      	ldr	r2, [pc, #112]	; (8005910 <TIM_OC2_SetConfig+0x104>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00b      	beq.n	80058bc <TIM_OC2_SetConfig+0xb0>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <TIM_OC2_SetConfig+0x108>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d007      	beq.n	80058bc <TIM_OC2_SetConfig+0xb0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a1a      	ldr	r2, [pc, #104]	; (8005918 <TIM_OC2_SetConfig+0x10c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_OC2_SetConfig+0xb0>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a19      	ldr	r2, [pc, #100]	; (800591c <TIM_OC2_SetConfig+0x110>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d113      	bne.n	80058e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058c2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ca:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40012c00 	.word	0x40012c00
 8005910:	40013400 	.word	0x40013400
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800

08005920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800596c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	021b      	lsls	r3, r3, #8
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a27      	ldr	r2, [pc, #156]	; (8005a1c <TIM_OC3_SetConfig+0xfc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d003      	beq.n	800598a <TIM_OC3_SetConfig+0x6a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a26      	ldr	r2, [pc, #152]	; (8005a20 <TIM_OC3_SetConfig+0x100>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d10d      	bne.n	80059a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <TIM_OC3_SetConfig+0xfc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00f      	beq.n	80059ce <TIM_OC3_SetConfig+0xae>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a1b      	ldr	r2, [pc, #108]	; (8005a20 <TIM_OC3_SetConfig+0x100>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00b      	beq.n	80059ce <TIM_OC3_SetConfig+0xae>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a1a      	ldr	r2, [pc, #104]	; (8005a24 <TIM_OC3_SetConfig+0x104>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d007      	beq.n	80059ce <TIM_OC3_SetConfig+0xae>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a19      	ldr	r2, [pc, #100]	; (8005a28 <TIM_OC3_SetConfig+0x108>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d003      	beq.n	80059ce <TIM_OC3_SetConfig+0xae>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <TIM_OC3_SetConfig+0x10c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d113      	bne.n	80059f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	621a      	str	r2, [r3, #32]
}
 8005a10:	bf00      	nop
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40013400 	.word	0x40013400
 8005a24:	40014000 	.word	0x40014000
 8005a28:	40014400 	.word	0x40014400
 8005a2c:	40014800 	.word	0x40014800

08005a30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	031b      	lsls	r3, r3, #12
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a18      	ldr	r2, [pc, #96]	; (8005af0 <TIM_OC4_SetConfig+0xc0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00f      	beq.n	8005ab4 <TIM_OC4_SetConfig+0x84>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a17      	ldr	r2, [pc, #92]	; (8005af4 <TIM_OC4_SetConfig+0xc4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00b      	beq.n	8005ab4 <TIM_OC4_SetConfig+0x84>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a16      	ldr	r2, [pc, #88]	; (8005af8 <TIM_OC4_SetConfig+0xc8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d007      	beq.n	8005ab4 <TIM_OC4_SetConfig+0x84>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a15      	ldr	r2, [pc, #84]	; (8005afc <TIM_OC4_SetConfig+0xcc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_OC4_SetConfig+0x84>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a14      	ldr	r2, [pc, #80]	; (8005b00 <TIM_OC4_SetConfig+0xd0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d109      	bne.n	8005ac8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	019b      	lsls	r3, r3, #6
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	621a      	str	r2, [r3, #32]
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40012c00 	.word	0x40012c00
 8005af4:	40013400 	.word	0x40013400
 8005af8:	40014000 	.word	0x40014000
 8005afc:	40014400 	.word	0x40014400
 8005b00:	40014800 	.word	0x40014800

08005b04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	041b      	lsls	r3, r3, #16
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a17      	ldr	r2, [pc, #92]	; (8005bb8 <TIM_OC5_SetConfig+0xb4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00f      	beq.n	8005b7e <TIM_OC5_SetConfig+0x7a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a16      	ldr	r2, [pc, #88]	; (8005bbc <TIM_OC5_SetConfig+0xb8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00b      	beq.n	8005b7e <TIM_OC5_SetConfig+0x7a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <TIM_OC5_SetConfig+0xbc>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d007      	beq.n	8005b7e <TIM_OC5_SetConfig+0x7a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a14      	ldr	r2, [pc, #80]	; (8005bc4 <TIM_OC5_SetConfig+0xc0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <TIM_OC5_SetConfig+0x7a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <TIM_OC5_SetConfig+0xc4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d109      	bne.n	8005b92 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	621a      	str	r2, [r3, #32]
}
 8005bac:	bf00      	nop
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	40012c00 	.word	0x40012c00
 8005bbc:	40013400 	.word	0x40013400
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40014400 	.word	0x40014400
 8005bc8:	40014800 	.word	0x40014800

08005bcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	051b      	lsls	r3, r3, #20
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <TIM_OC6_SetConfig+0xb8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00f      	beq.n	8005c48 <TIM_OC6_SetConfig+0x7c>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <TIM_OC6_SetConfig+0xbc>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00b      	beq.n	8005c48 <TIM_OC6_SetConfig+0x7c>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC6_SetConfig+0xc0>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d007      	beq.n	8005c48 <TIM_OC6_SetConfig+0x7c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <TIM_OC6_SetConfig+0xc4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_OC6_SetConfig+0x7c>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <TIM_OC6_SetConfig+0xc8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d109      	bne.n	8005c5c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	029b      	lsls	r3, r3, #10
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40013400 	.word	0x40013400
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40014400 	.word	0x40014400
 8005c94:	40014800 	.word	0x40014800

08005c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f023 0201 	bic.w	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f023 030a 	bic.w	r3, r3, #10
 8005cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	621a      	str	r2, [r3, #32]
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b087      	sub	sp, #28
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f023 0210 	bic.w	r2, r3, #16
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	031b      	lsls	r3, r3, #12
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f043 0307 	orr.w	r3, r3, #7
 8005d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	609a      	str	r2, [r3, #8]
}
 8005d80:	bf00      	nop
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	021a      	lsls	r2, r3, #8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	609a      	str	r2, [r3, #8]
}
 8005dc0:	bf00      	nop
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	2201      	movs	r2, #1
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a1a      	ldr	r2, [r3, #32]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	43db      	mvns	r3, r3
 8005dee:	401a      	ands	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a1a      	ldr	r2, [r3, #32]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	fa01 f303 	lsl.w	r3, r1, r3
 8005e04:	431a      	orrs	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
	...

08005e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e063      	b.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a2b      	ldr	r2, [pc, #172]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a2a      	ldr	r2, [pc, #168]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d108      	bne.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1b      	ldr	r2, [pc, #108]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea2:	d013      	beq.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a18      	ldr	r2, [pc, #96]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a17      	ldr	r2, [pc, #92]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a12      	ldr	r2, [pc, #72]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d10c      	bne.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40013400 	.word	0x40013400
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40014000 	.word	0x40014000

08005f18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e065      	b.n	8006000 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	041b      	lsls	r3, r3, #16
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a16      	ldr	r2, [pc, #88]	; (800600c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d004      	beq.n	8005fc2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a14      	ldr	r2, [pc, #80]	; (8006010 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d115      	bne.n	8005fee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	051b      	lsls	r3, r3, #20
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	40012c00 	.word	0x40012c00
 8006010:	40013400 	.word	0x40013400

08006014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e040      	b.n	80060e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fa fe98 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2224      	movs	r2, #36	; 0x24
 800607c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0201 	bic.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fcb6 	bl	8006a00 <UART_SetConfig>
 8006094:	4603      	mov	r3, r0
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e022      	b.n	80060e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fe7e 	bl	8006da8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 ff05 	bl	8006eec <UART_CheckIdleState>
 80060e2:	4603      	mov	r3, r0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08a      	sub	sp, #40	; 0x28
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	4613      	mov	r3, r2
 80060fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006100:	2b20      	cmp	r3, #32
 8006102:	d178      	bne.n	80061f6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_UART_Transmit+0x24>
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e071      	b.n	80061f8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2221      	movs	r2, #33	; 0x21
 8006120:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006122:	f7fa ffcb 	bl	80010bc <HAL_GetTick>
 8006126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	88fa      	ldrh	r2, [r7, #6]
 800612c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	88fa      	ldrh	r2, [r7, #6]
 8006134:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006140:	d108      	bne.n	8006154 <HAL_UART_Transmit+0x68>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d104      	bne.n	8006154 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	e003      	b.n	800615c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006158:	2300      	movs	r3, #0
 800615a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800615c:	e030      	b.n	80061c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2200      	movs	r2, #0
 8006166:	2180      	movs	r1, #128	; 0x80
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 ff67 	bl	800703c <UART_WaitOnFlagUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d004      	beq.n	800617e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e03c      	b.n	80061f8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10b      	bne.n	800619c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	881a      	ldrh	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006190:	b292      	uxth	r2, r2
 8006192:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	3302      	adds	r3, #2
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	e008      	b.n	80061ae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	b292      	uxth	r2, r2
 80061a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	3301      	adds	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1c8      	bne.n	800615e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2200      	movs	r2, #0
 80061d4:	2140      	movs	r1, #64	; 0x40
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 ff30 	bl	800703c <UART_WaitOnFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d004      	beq.n	80061ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e005      	b.n	80061f8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e000      	b.n	80061f8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80061f6:	2302      	movs	r3, #2
  }
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3720      	adds	r7, #32
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08a      	sub	sp, #40	; 0x28
 8006204:	af02      	add	r7, sp, #8
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	4613      	mov	r3, r2
 800620e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006216:	2b20      	cmp	r3, #32
 8006218:	f040 80a3 	bne.w	8006362 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_UART_Receive+0x28>
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e09b      	b.n	8006364 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2222      	movs	r2, #34	; 0x22
 8006238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006242:	f7fa ff3b 	bl	80010bc <HAL_GetTick>
 8006246:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	88fa      	ldrh	r2, [r7, #6]
 800624c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	88fa      	ldrh	r2, [r7, #6]
 8006254:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006260:	d10e      	bne.n	8006280 <HAL_UART_Receive+0x80>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d105      	bne.n	8006276 <HAL_UART_Receive+0x76>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006270:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006274:	e01a      	b.n	80062ac <HAL_UART_Receive+0xac>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	22ff      	movs	r2, #255	; 0xff
 800627a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800627e:	e015      	b.n	80062ac <HAL_UART_Receive+0xac>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10d      	bne.n	80062a4 <HAL_UART_Receive+0xa4>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d104      	bne.n	800629a <HAL_UART_Receive+0x9a>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	22ff      	movs	r2, #255	; 0xff
 8006294:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006298:	e008      	b.n	80062ac <HAL_UART_Receive+0xac>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	227f      	movs	r2, #127	; 0x7f
 800629e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062a2:	e003      	b.n	80062ac <HAL_UART_Receive+0xac>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062b2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062bc:	d108      	bne.n	80062d0 <HAL_UART_Receive+0xd0>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d104      	bne.n	80062d0 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	e003      	b.n	80062d8 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062d4:	2300      	movs	r3, #0
 80062d6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80062d8:	e037      	b.n	800634a <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2200      	movs	r2, #0
 80062e2:	2120      	movs	r1, #32
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fea9 	bl	800703c <UART_WaitOnFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e033      	b.n	8006364 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10c      	bne.n	800631c <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006308:	b29a      	uxth	r2, r3
 800630a:	8a7b      	ldrh	r3, [r7, #18]
 800630c:	4013      	ands	r3, r2
 800630e:	b29a      	uxth	r2, r3
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	3302      	adds	r3, #2
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	e00d      	b.n	8006338 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006322:	b29b      	uxth	r3, r3
 8006324:	b2da      	uxtb	r2, r3
 8006326:	8a7b      	ldrh	r3, [r7, #18]
 8006328:	b2db      	uxtb	r3, r3
 800632a:	4013      	ands	r3, r2
 800632c:	b2da      	uxtb	r2, r3
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	3301      	adds	r3, #1
 8006336:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1c1      	bne.n	80062da <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2220      	movs	r2, #32
 800635a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	e000      	b.n	8006364 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8006362:	2302      	movs	r3, #2
  }
}
 8006364:	4618      	mov	r0, r3
 8006366:	3720      	adds	r7, #32
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08a      	sub	sp, #40	; 0x28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006380:	2b20      	cmp	r3, #32
 8006382:	d132      	bne.n	80063ea <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <HAL_UART_Receive_IT+0x24>
 800638a:	88fb      	ldrh	r3, [r7, #6]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e02b      	b.n	80063ec <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d018      	beq.n	80063da <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	613b      	str	r3, [r7, #16]
   return(result);
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	623b      	str	r3, [r7, #32]
 80063c8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	69f9      	ldr	r1, [r7, #28]
 80063cc:	6a3a      	ldr	r2, [r7, #32]
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e6      	bne.n	80063a8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	461a      	mov	r2, r3
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 fe93 	bl	800710c <UART_Start_Receive_IT>
 80063e6:	4603      	mov	r3, r0
 80063e8:	e000      	b.n	80063ec <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3728      	adds	r7, #40	; 0x28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b0ba      	sub	sp, #232	; 0xe8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800641a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800641e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006422:	4013      	ands	r3, r2
 8006424:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800642c:	2b00      	cmp	r3, #0
 800642e:	d115      	bne.n	800645c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006434:	f003 0320 	and.w	r3, r3, #32
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00f      	beq.n	800645c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800643c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006440:	f003 0320 	and.w	r3, r3, #32
 8006444:	2b00      	cmp	r3, #0
 8006446:	d009      	beq.n	800645c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 82ab 	beq.w	80069a8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	4798      	blx	r3
      }
      return;
 800645a:	e2a5      	b.n	80069a8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800645c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8117 	beq.w	8006694 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006472:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006476:	4b85      	ldr	r3, [pc, #532]	; (800668c <HAL_UART_IRQHandler+0x298>)
 8006478:	4013      	ands	r3, r2
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 810a 	beq.w	8006694 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d011      	beq.n	80064b0 <HAL_UART_IRQHandler+0xbc>
 800648c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00b      	beq.n	80064b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2201      	movs	r2, #1
 800649e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a6:	f043 0201 	orr.w	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d011      	beq.n	80064e0 <HAL_UART_IRQHandler+0xec>
 80064bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2202      	movs	r2, #2
 80064ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064d6:	f043 0204 	orr.w	r2, r3, #4
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d011      	beq.n	8006510 <HAL_UART_IRQHandler+0x11c>
 80064ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2204      	movs	r2, #4
 80064fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006506:	f043 0202 	orr.w	r2, r3, #2
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d017      	beq.n	800654c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800651c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b00      	cmp	r3, #0
 8006526:	d105      	bne.n	8006534 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800652c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00b      	beq.n	800654c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2208      	movs	r2, #8
 800653a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006542:	f043 0208 	orr.w	r2, r3, #8
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800654c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006554:	2b00      	cmp	r3, #0
 8006556:	d012      	beq.n	800657e <HAL_UART_IRQHandler+0x18a>
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00c      	beq.n	800657e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800656c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006574:	f043 0220 	orr.w	r2, r3, #32
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8211 	beq.w	80069ac <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800658a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00d      	beq.n	80065b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d007      	beq.n	80065b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c6:	2b40      	cmp	r3, #64	; 0x40
 80065c8:	d005      	beq.n	80065d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d04f      	beq.n	8006676 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fe4c 	bl	8007274 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e6:	2b40      	cmp	r3, #64	; 0x40
 80065e8:	d141      	bne.n	800666e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006608:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3308      	adds	r3, #8
 8006612:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006616:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800661a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006622:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800662e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1d9      	bne.n	80065ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800663a:	2b00      	cmp	r3, #0
 800663c:	d013      	beq.n	8006666 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006642:	4a13      	ldr	r2, [pc, #76]	; (8006690 <HAL_UART_IRQHandler+0x29c>)
 8006644:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664a:	4618      	mov	r0, r3
 800664c:	f7fc f9a8 	bl	80029a0 <HAL_DMA_Abort_IT>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d017      	beq.n	8006686 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006660:	4610      	mov	r0, r2
 8006662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006664:	e00f      	b.n	8006686 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f9b4 	bl	80069d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666c:	e00b      	b.n	8006686 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f9b0 	bl	80069d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006674:	e007      	b.n	8006686 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f9ac 	bl	80069d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006684:	e192      	b.n	80069ac <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006686:	bf00      	nop
    return;
 8006688:	e190      	b.n	80069ac <HAL_UART_IRQHandler+0x5b8>
 800668a:	bf00      	nop
 800668c:	04000120 	.word	0x04000120
 8006690:	0800733d 	.word	0x0800733d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006698:	2b01      	cmp	r3, #1
 800669a:	f040 814b 	bne.w	8006934 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800669e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 8144 	beq.w	8006934 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b0:	f003 0310 	and.w	r3, r3, #16
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 813d 	beq.w	8006934 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2210      	movs	r2, #16
 80066c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066cc:	2b40      	cmp	r3, #64	; 0x40
 80066ce:	f040 80b5 	bne.w	800683c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 8164 	beq.w	80069b0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066f2:	429a      	cmp	r2, r3
 80066f4:	f080 815c 	bcs.w	80069b0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	2b20      	cmp	r3, #32
 800670a:	f000 8086 	beq.w	800681a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006726:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800672a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006738:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800673c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006744:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006750:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1da      	bne.n	800670e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3308      	adds	r3, #8
 800675e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006768:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800676a:	f023 0301 	bic.w	r3, r3, #1
 800676e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3308      	adds	r3, #8
 8006778:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800677c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006780:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006784:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006788:	e841 2300 	strex	r3, r2, [r1]
 800678c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800678e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e1      	bne.n	8006758 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3308      	adds	r3, #8
 800679a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3308      	adds	r3, #8
 80067b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e3      	bne.n	8006794 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ea:	f023 0310 	bic.w	r3, r3, #16
 80067ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80067fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006802:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800680a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e4      	bne.n	80067da <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006814:	4618      	mov	r0, r3
 8006816:	f7fc f88a 	bl	800292e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2202      	movs	r2, #2
 800681e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800682c:	b29b      	uxth	r3, r3
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	b29b      	uxth	r3, r3
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f8d7 	bl	80069e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800683a:	e0b9      	b.n	80069b0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006848:	b29b      	uxth	r3, r3
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006856:	b29b      	uxth	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 80ab 	beq.w	80069b4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800685e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 80a6 	beq.w	80069b4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800687c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800688a:	647b      	str	r3, [r7, #68]	; 0x44
 800688c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006890:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e4      	bne.n	8006868 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3308      	adds	r3, #8
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	623b      	str	r3, [r7, #32]
   return(result);
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068c2:	633a      	str	r2, [r7, #48]	; 0x30
 80068c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e3      	bne.n	800689e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0310 	bic.w	r3, r3, #16
 80068fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800690c:	61fb      	str	r3, [r7, #28]
 800690e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	69b9      	ldr	r1, [r7, #24]
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	617b      	str	r3, [r7, #20]
   return(result);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e4      	bne.n	80068ea <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006926:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f85b 	bl	80069e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006932:	e03f      	b.n	80069b4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00e      	beq.n	800695e <HAL_UART_IRQHandler+0x56a>
 8006940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d008      	beq.n	800695e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006954:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fed8 	bl	800770c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800695c:	e02d      	b.n	80069ba <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800695e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00e      	beq.n	8006988 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800696a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800697a:	2b00      	cmp	r3, #0
 800697c:	d01c      	beq.n	80069b8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	4798      	blx	r3
    }
    return;
 8006986:	e017      	b.n	80069b8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800698c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d012      	beq.n	80069ba <HAL_UART_IRQHandler+0x5c6>
 8006994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00c      	beq.n	80069ba <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fce1 	bl	8007368 <UART_EndTransmit_IT>
    return;
 80069a6:	e008      	b.n	80069ba <HAL_UART_IRQHandler+0x5c6>
      return;
 80069a8:	bf00      	nop
 80069aa:	e006      	b.n	80069ba <HAL_UART_IRQHandler+0x5c6>
    return;
 80069ac:	bf00      	nop
 80069ae:	e004      	b.n	80069ba <HAL_UART_IRQHandler+0x5c6>
      return;
 80069b0:	bf00      	nop
 80069b2:	e002      	b.n	80069ba <HAL_UART_IRQHandler+0x5c6>
      return;
 80069b4:	bf00      	nop
 80069b6:	e000      	b.n	80069ba <HAL_UART_IRQHandler+0x5c6>
    return;
 80069b8:	bf00      	nop
  }

}
 80069ba:	37e8      	adds	r7, #232	; 0xe8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	431a      	orrs	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006a2e:	f023 030c 	bic.w	r3, r3, #12
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6812      	ldr	r2, [r2, #0]
 8006a36:	6979      	ldr	r1, [r7, #20]
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4aa7      	ldr	r2, [pc, #668]	; (8006d18 <UART_SetConfig+0x318>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d120      	bne.n	8006ac2 <UART_SetConfig+0xc2>
 8006a80:	4ba6      	ldr	r3, [pc, #664]	; (8006d1c <UART_SetConfig+0x31c>)
 8006a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a84:	f003 0303 	and.w	r3, r3, #3
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d817      	bhi.n	8006abc <UART_SetConfig+0xbc>
 8006a8c:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <UART_SetConfig+0x94>)
 8006a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006aa5 	.word	0x08006aa5
 8006a98:	08006ab1 	.word	0x08006ab1
 8006a9c:	08006ab7 	.word	0x08006ab7
 8006aa0:	08006aab 	.word	0x08006aab
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e0b5      	b.n	8006c16 <UART_SetConfig+0x216>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	77fb      	strb	r3, [r7, #31]
 8006aae:	e0b2      	b.n	8006c16 <UART_SetConfig+0x216>
 8006ab0:	2304      	movs	r3, #4
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e0af      	b.n	8006c16 <UART_SetConfig+0x216>
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	77fb      	strb	r3, [r7, #31]
 8006aba:	e0ac      	b.n	8006c16 <UART_SetConfig+0x216>
 8006abc:	2310      	movs	r3, #16
 8006abe:	77fb      	strb	r3, [r7, #31]
 8006ac0:	e0a9      	b.n	8006c16 <UART_SetConfig+0x216>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a96      	ldr	r2, [pc, #600]	; (8006d20 <UART_SetConfig+0x320>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d124      	bne.n	8006b16 <UART_SetConfig+0x116>
 8006acc:	4b93      	ldr	r3, [pc, #588]	; (8006d1c <UART_SetConfig+0x31c>)
 8006ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ad4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ad8:	d011      	beq.n	8006afe <UART_SetConfig+0xfe>
 8006ada:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ade:	d817      	bhi.n	8006b10 <UART_SetConfig+0x110>
 8006ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ae4:	d011      	beq.n	8006b0a <UART_SetConfig+0x10a>
 8006ae6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aea:	d811      	bhi.n	8006b10 <UART_SetConfig+0x110>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <UART_SetConfig+0xf8>
 8006af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af4:	d006      	beq.n	8006b04 <UART_SetConfig+0x104>
 8006af6:	e00b      	b.n	8006b10 <UART_SetConfig+0x110>
 8006af8:	2300      	movs	r3, #0
 8006afa:	77fb      	strb	r3, [r7, #31]
 8006afc:	e08b      	b.n	8006c16 <UART_SetConfig+0x216>
 8006afe:	2302      	movs	r3, #2
 8006b00:	77fb      	strb	r3, [r7, #31]
 8006b02:	e088      	b.n	8006c16 <UART_SetConfig+0x216>
 8006b04:	2304      	movs	r3, #4
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e085      	b.n	8006c16 <UART_SetConfig+0x216>
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e082      	b.n	8006c16 <UART_SetConfig+0x216>
 8006b10:	2310      	movs	r3, #16
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e07f      	b.n	8006c16 <UART_SetConfig+0x216>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a82      	ldr	r2, [pc, #520]	; (8006d24 <UART_SetConfig+0x324>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d124      	bne.n	8006b6a <UART_SetConfig+0x16a>
 8006b20:	4b7e      	ldr	r3, [pc, #504]	; (8006d1c <UART_SetConfig+0x31c>)
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006b28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b2c:	d011      	beq.n	8006b52 <UART_SetConfig+0x152>
 8006b2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b32:	d817      	bhi.n	8006b64 <UART_SetConfig+0x164>
 8006b34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b38:	d011      	beq.n	8006b5e <UART_SetConfig+0x15e>
 8006b3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b3e:	d811      	bhi.n	8006b64 <UART_SetConfig+0x164>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <UART_SetConfig+0x14c>
 8006b44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b48:	d006      	beq.n	8006b58 <UART_SetConfig+0x158>
 8006b4a:	e00b      	b.n	8006b64 <UART_SetConfig+0x164>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	77fb      	strb	r3, [r7, #31]
 8006b50:	e061      	b.n	8006c16 <UART_SetConfig+0x216>
 8006b52:	2302      	movs	r3, #2
 8006b54:	77fb      	strb	r3, [r7, #31]
 8006b56:	e05e      	b.n	8006c16 <UART_SetConfig+0x216>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	77fb      	strb	r3, [r7, #31]
 8006b5c:	e05b      	b.n	8006c16 <UART_SetConfig+0x216>
 8006b5e:	2308      	movs	r3, #8
 8006b60:	77fb      	strb	r3, [r7, #31]
 8006b62:	e058      	b.n	8006c16 <UART_SetConfig+0x216>
 8006b64:	2310      	movs	r3, #16
 8006b66:	77fb      	strb	r3, [r7, #31]
 8006b68:	e055      	b.n	8006c16 <UART_SetConfig+0x216>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a6e      	ldr	r2, [pc, #440]	; (8006d28 <UART_SetConfig+0x328>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d124      	bne.n	8006bbe <UART_SetConfig+0x1be>
 8006b74:	4b69      	ldr	r3, [pc, #420]	; (8006d1c <UART_SetConfig+0x31c>)
 8006b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b78:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006b7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b80:	d011      	beq.n	8006ba6 <UART_SetConfig+0x1a6>
 8006b82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b86:	d817      	bhi.n	8006bb8 <UART_SetConfig+0x1b8>
 8006b88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b8c:	d011      	beq.n	8006bb2 <UART_SetConfig+0x1b2>
 8006b8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b92:	d811      	bhi.n	8006bb8 <UART_SetConfig+0x1b8>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <UART_SetConfig+0x1a0>
 8006b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b9c:	d006      	beq.n	8006bac <UART_SetConfig+0x1ac>
 8006b9e:	e00b      	b.n	8006bb8 <UART_SetConfig+0x1b8>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	77fb      	strb	r3, [r7, #31]
 8006ba4:	e037      	b.n	8006c16 <UART_SetConfig+0x216>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	77fb      	strb	r3, [r7, #31]
 8006baa:	e034      	b.n	8006c16 <UART_SetConfig+0x216>
 8006bac:	2304      	movs	r3, #4
 8006bae:	77fb      	strb	r3, [r7, #31]
 8006bb0:	e031      	b.n	8006c16 <UART_SetConfig+0x216>
 8006bb2:	2308      	movs	r3, #8
 8006bb4:	77fb      	strb	r3, [r7, #31]
 8006bb6:	e02e      	b.n	8006c16 <UART_SetConfig+0x216>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	77fb      	strb	r3, [r7, #31]
 8006bbc:	e02b      	b.n	8006c16 <UART_SetConfig+0x216>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a5a      	ldr	r2, [pc, #360]	; (8006d2c <UART_SetConfig+0x32c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d124      	bne.n	8006c12 <UART_SetConfig+0x212>
 8006bc8:	4b54      	ldr	r3, [pc, #336]	; (8006d1c <UART_SetConfig+0x31c>)
 8006bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bcc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006bd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006bd4:	d011      	beq.n	8006bfa <UART_SetConfig+0x1fa>
 8006bd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006bda:	d817      	bhi.n	8006c0c <UART_SetConfig+0x20c>
 8006bdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006be0:	d011      	beq.n	8006c06 <UART_SetConfig+0x206>
 8006be2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006be6:	d811      	bhi.n	8006c0c <UART_SetConfig+0x20c>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <UART_SetConfig+0x1f4>
 8006bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bf0:	d006      	beq.n	8006c00 <UART_SetConfig+0x200>
 8006bf2:	e00b      	b.n	8006c0c <UART_SetConfig+0x20c>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	e00d      	b.n	8006c16 <UART_SetConfig+0x216>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	77fb      	strb	r3, [r7, #31]
 8006bfe:	e00a      	b.n	8006c16 <UART_SetConfig+0x216>
 8006c00:	2304      	movs	r3, #4
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e007      	b.n	8006c16 <UART_SetConfig+0x216>
 8006c06:	2308      	movs	r3, #8
 8006c08:	77fb      	strb	r3, [r7, #31]
 8006c0a:	e004      	b.n	8006c16 <UART_SetConfig+0x216>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	e001      	b.n	8006c16 <UART_SetConfig+0x216>
 8006c12:	2310      	movs	r3, #16
 8006c14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c1e:	d15b      	bne.n	8006cd8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006c20:	7ffb      	ldrb	r3, [r7, #31]
 8006c22:	2b08      	cmp	r3, #8
 8006c24:	d827      	bhi.n	8006c76 <UART_SetConfig+0x276>
 8006c26:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <UART_SetConfig+0x22c>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c59 	.word	0x08006c59
 8006c34:	08006c61 	.word	0x08006c61
 8006c38:	08006c77 	.word	0x08006c77
 8006c3c:	08006c67 	.word	0x08006c67
 8006c40:	08006c77 	.word	0x08006c77
 8006c44:	08006c77 	.word	0x08006c77
 8006c48:	08006c77 	.word	0x08006c77
 8006c4c:	08006c6f 	.word	0x08006c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c50:	f7fd fc9e 	bl	8004590 <HAL_RCC_GetPCLK1Freq>
 8006c54:	61b8      	str	r0, [r7, #24]
        break;
 8006c56:	e013      	b.n	8006c80 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c58:	f7fd fcbc 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8006c5c:	61b8      	str	r0, [r7, #24]
        break;
 8006c5e:	e00f      	b.n	8006c80 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c60:	4b33      	ldr	r3, [pc, #204]	; (8006d30 <UART_SetConfig+0x330>)
 8006c62:	61bb      	str	r3, [r7, #24]
        break;
 8006c64:	e00c      	b.n	8006c80 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c66:	f7fd fc1d 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8006c6a:	61b8      	str	r0, [r7, #24]
        break;
 8006c6c:	e008      	b.n	8006c80 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c72:	61bb      	str	r3, [r7, #24]
        break;
 8006c74:	e004      	b.n	8006c80 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	77bb      	strb	r3, [r7, #30]
        break;
 8006c7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 8082 	beq.w	8006d8c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	005a      	lsls	r2, r3, #1
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	441a      	add	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	2b0f      	cmp	r3, #15
 8006ca2:	d916      	bls.n	8006cd2 <UART_SetConfig+0x2d2>
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006caa:	d212      	bcs.n	8006cd2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f023 030f 	bic.w	r3, r3, #15
 8006cb4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	085b      	lsrs	r3, r3, #1
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	f003 0307 	and.w	r3, r3, #7
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	89fb      	ldrh	r3, [r7, #14]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	89fa      	ldrh	r2, [r7, #14]
 8006cce:	60da      	str	r2, [r3, #12]
 8006cd0:	e05c      	b.n	8006d8c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	77bb      	strb	r3, [r7, #30]
 8006cd6:	e059      	b.n	8006d8c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cd8:	7ffb      	ldrb	r3, [r7, #31]
 8006cda:	2b08      	cmp	r3, #8
 8006cdc:	d835      	bhi.n	8006d4a <UART_SetConfig+0x34a>
 8006cde:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <UART_SetConfig+0x2e4>)
 8006ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce4:	08006d09 	.word	0x08006d09
 8006ce8:	08006d11 	.word	0x08006d11
 8006cec:	08006d35 	.word	0x08006d35
 8006cf0:	08006d4b 	.word	0x08006d4b
 8006cf4:	08006d3b 	.word	0x08006d3b
 8006cf8:	08006d4b 	.word	0x08006d4b
 8006cfc:	08006d4b 	.word	0x08006d4b
 8006d00:	08006d4b 	.word	0x08006d4b
 8006d04:	08006d43 	.word	0x08006d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d08:	f7fd fc42 	bl	8004590 <HAL_RCC_GetPCLK1Freq>
 8006d0c:	61b8      	str	r0, [r7, #24]
        break;
 8006d0e:	e021      	b.n	8006d54 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d10:	f7fd fc60 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8006d14:	61b8      	str	r0, [r7, #24]
        break;
 8006d16:	e01d      	b.n	8006d54 <UART_SetConfig+0x354>
 8006d18:	40013800 	.word	0x40013800
 8006d1c:	40021000 	.word	0x40021000
 8006d20:	40004400 	.word	0x40004400
 8006d24:	40004800 	.word	0x40004800
 8006d28:	40004c00 	.word	0x40004c00
 8006d2c:	40005000 	.word	0x40005000
 8006d30:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d34:	4b1b      	ldr	r3, [pc, #108]	; (8006da4 <UART_SetConfig+0x3a4>)
 8006d36:	61bb      	str	r3, [r7, #24]
        break;
 8006d38:	e00c      	b.n	8006d54 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d3a:	f7fd fbb3 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8006d3e:	61b8      	str	r0, [r7, #24]
        break;
 8006d40:	e008      	b.n	8006d54 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d46:	61bb      	str	r3, [r7, #24]
        break;
 8006d48:	e004      	b.n	8006d54 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	77bb      	strb	r3, [r7, #30]
        break;
 8006d52:	bf00      	nop
    }

    if (pclk != 0U)
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d018      	beq.n	8006d8c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	085a      	lsrs	r2, r3, #1
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	441a      	add	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b0f      	cmp	r3, #15
 8006d72:	d909      	bls.n	8006d88 <UART_SetConfig+0x388>
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7a:	d205      	bcs.n	8006d88 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	60da      	str	r2, [r3, #12]
 8006d86:	e001      	b.n	8006d8c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d98:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3720      	adds	r7, #32
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	007a1200 	.word	0x007a1200

08006da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d01a      	beq.n	8006ebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ea6:	d10a      	bne.n	8006ebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	605a      	str	r2, [r3, #4]
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b098      	sub	sp, #96	; 0x60
 8006ef0:	af02      	add	r7, sp, #8
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006efc:	f7fa f8de 	bl	80010bc <HAL_GetTick>
 8006f00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	2b08      	cmp	r3, #8
 8006f0e:	d12e      	bne.n	8006f6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f88c 	bl	800703c <UART_WaitOnFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d021      	beq.n	8006f6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f3e:	653b      	str	r3, [r7, #80]	; 0x50
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f48:	647b      	str	r3, [r7, #68]	; 0x44
 8006f4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e6      	bne.n	8006f2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e062      	b.n	8007034 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d149      	bne.n	8007010 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f84:	2200      	movs	r2, #0
 8006f86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f856 	bl	800703c <UART_WaitOnFlagUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d03c      	beq.n	8007010 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	623b      	str	r3, [r7, #32]
   return(result);
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8006fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e6      	bne.n	8006f96 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3308      	adds	r3, #8
 8006fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0301 	bic.w	r3, r3, #1
 8006fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe8:	61fa      	str	r2, [r7, #28]
 8006fea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	69b9      	ldr	r1, [r7, #24]
 8006fee:	69fa      	ldr	r2, [r7, #28]
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e5      	bne.n	8006fc8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e011      	b.n	8007034 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2220      	movs	r2, #32
 800701a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3758      	adds	r7, #88	; 0x58
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	4613      	mov	r3, r2
 800704a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800704c:	e049      	b.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007054:	d045      	beq.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007056:	f7fa f831 	bl	80010bc <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	429a      	cmp	r2, r3
 8007064:	d302      	bcc.n	800706c <UART_WaitOnFlagUntilTimeout+0x30>
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e048      	b.n	8007102 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0304 	and.w	r3, r3, #4
 800707a:	2b00      	cmp	r3, #0
 800707c:	d031      	beq.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b08      	cmp	r3, #8
 800708a:	d110      	bne.n	80070ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2208      	movs	r2, #8
 8007092:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f8ed 	bl	8007274 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2208      	movs	r2, #8
 800709e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e029      	b.n	8007102 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070bc:	d111      	bne.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f8d3 	bl	8007274 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e00f      	b.n	8007102 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69da      	ldr	r2, [r3, #28]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	4013      	ands	r3, r2
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	bf0c      	ite	eq
 80070f2:	2301      	moveq	r3, #1
 80070f4:	2300      	movne	r3, #0
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d0a6      	beq.n	800704e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800710c:	b480      	push	{r7}
 800710e:	b097      	sub	sp, #92	; 0x5c
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	4613      	mov	r3, r2
 8007118:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	88fa      	ldrh	r2, [r7, #6]
 8007124:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	88fa      	ldrh	r2, [r7, #6]
 800712c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800713e:	d10e      	bne.n	800715e <UART_Start_Receive_IT+0x52>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d105      	bne.n	8007154 <UART_Start_Receive_IT+0x48>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800714e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007152:	e01a      	b.n	800718a <UART_Start_Receive_IT+0x7e>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	22ff      	movs	r2, #255	; 0xff
 8007158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800715c:	e015      	b.n	800718a <UART_Start_Receive_IT+0x7e>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10d      	bne.n	8007182 <UART_Start_Receive_IT+0x76>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d104      	bne.n	8007178 <UART_Start_Receive_IT+0x6c>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	22ff      	movs	r2, #255	; 0xff
 8007172:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007176:	e008      	b.n	800718a <UART_Start_Receive_IT+0x7e>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	227f      	movs	r2, #127	; 0x7f
 800717c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007180:	e003      	b.n	800718a <UART_Start_Receive_IT+0x7e>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2222      	movs	r2, #34	; 0x22
 8007196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3308      	adds	r3, #8
 80071a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	f043 0301 	orr.w	r3, r3, #1
 80071b0:	657b      	str	r3, [r7, #84]	; 0x54
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3308      	adds	r3, #8
 80071b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80071bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e5      	bne.n	800719a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d6:	d107      	bne.n	80071e8 <UART_Start_Receive_IT+0xdc>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d103      	bne.n	80071e8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4a22      	ldr	r2, [pc, #136]	; (800726c <UART_Start_Receive_IT+0x160>)
 80071e4:	669a      	str	r2, [r3, #104]	; 0x68
 80071e6:	e002      	b.n	80071ee <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4a21      	ldr	r2, [pc, #132]	; (8007270 <UART_Start_Receive_IT+0x164>)
 80071ec:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d019      	beq.n	800722a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	e853 3f00 	ldrex	r3, [r3]
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800720a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	461a      	mov	r2, r3
 8007212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
 8007216:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800721a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800721c:	e841 2300 	strex	r3, r2, [r1]
 8007220:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1e6      	bne.n	80071f6 <UART_Start_Receive_IT+0xea>
 8007228:	e018      	b.n	800725c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	e853 3f00 	ldrex	r3, [r3]
 8007236:	613b      	str	r3, [r7, #16]
   return(result);
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f043 0320 	orr.w	r3, r3, #32
 800723e:	653b      	str	r3, [r7, #80]	; 0x50
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007248:	623b      	str	r3, [r7, #32]
 800724a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	69f9      	ldr	r1, [r7, #28]
 800724e:	6a3a      	ldr	r2, [r7, #32]
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	61bb      	str	r3, [r7, #24]
   return(result);
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e6      	bne.n	800722a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	375c      	adds	r7, #92	; 0x5c
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	08007565 	.word	0x08007565
 8007270:	080073bd 	.word	0x080073bd

08007274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007274:	b480      	push	{r7}
 8007276:	b095      	sub	sp, #84	; 0x54
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007290:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800729a:	643b      	str	r3, [r7, #64]	; 0x40
 800729c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e6      	bne.n	800727c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3308      	adds	r3, #8
 80072b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	f023 0301 	bic.w	r3, r3, #1
 80072c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3308      	adds	r3, #8
 80072cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e5      	bne.n	80072ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d118      	bne.n	800731c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f023 0310 	bic.w	r3, r3, #16
 80072fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	6979      	ldr	r1, [r7, #20]
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	613b      	str	r3, [r7, #16]
   return(result);
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e6      	bne.n	80072ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2220      	movs	r2, #32
 8007320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007330:	bf00      	nop
 8007332:	3754      	adds	r7, #84	; 0x54
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7ff fb3a 	bl	80069d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b088      	sub	sp, #32
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	60bb      	str	r3, [r7, #8]
   return(result);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007384:	61fb      	str	r3, [r7, #28]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	61bb      	str	r3, [r7, #24]
 8007390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6979      	ldr	r1, [r7, #20]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	613b      	str	r3, [r7, #16]
   return(result);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e6      	bne.n	8007370 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff fb06 	bl	80069c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073b4:	bf00      	nop
 80073b6:	3720      	adds	r7, #32
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b09c      	sub	sp, #112	; 0x70
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073d4:	2b22      	cmp	r3, #34	; 0x22
 80073d6:	f040 80b9 	bne.w	800754c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80073e8:	b2d9      	uxtb	r1, r3
 80073ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f4:	400a      	ands	r2, r1
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800740a:	b29b      	uxth	r3, r3
 800740c:	3b01      	subs	r3, #1
 800740e:	b29a      	uxth	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	f040 809c 	bne.w	800755c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007438:	66bb      	str	r3, [r7, #104]	; 0x68
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007442:	65bb      	str	r3, [r7, #88]	; 0x58
 8007444:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007448:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e6      	bne.n	8007424 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3308      	adds	r3, #8
 800745c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	667b      	str	r3, [r7, #100]	; 0x64
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3308      	adds	r3, #8
 8007474:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007476:	647a      	str	r2, [r7, #68]	; 0x44
 8007478:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800747c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e5      	bne.n	8007456 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d018      	beq.n	80074de <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	623b      	str	r3, [r7, #32]
   return(result);
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074c0:	663b      	str	r3, [r7, #96]	; 0x60
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074ca:	633b      	str	r3, [r7, #48]	; 0x30
 80074cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e6      	bne.n	80074ac <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d12e      	bne.n	8007544 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f023 0310 	bic.w	r3, r3, #16
 8007500:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800750a:	61fb      	str	r3, [r7, #28]
 800750c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	69b9      	ldr	r1, [r7, #24]
 8007510:	69fa      	ldr	r2, [r7, #28]
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	617b      	str	r3, [r7, #20]
   return(result);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e6      	bne.n	80074ec <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	f003 0310 	and.w	r3, r3, #16
 8007528:	2b10      	cmp	r3, #16
 800752a:	d103      	bne.n	8007534 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2210      	movs	r2, #16
 8007532:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff fa53 	bl	80069e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007542:	e00b      	b.n	800755c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7f8 ff41 	bl	80003cc <HAL_UART_RxCpltCallback>
}
 800754a:	e007      	b.n	800755c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0208 	orr.w	r2, r2, #8
 800755a:	619a      	str	r2, [r3, #24]
}
 800755c:	bf00      	nop
 800755e:	3770      	adds	r7, #112	; 0x70
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b09c      	sub	sp, #112	; 0x70
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007572:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800757c:	2b22      	cmp	r3, #34	; 0x22
 800757e:	f040 80b9 	bne.w	80076f4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007588:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007592:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007596:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800759a:	4013      	ands	r3, r2
 800759c:	b29a      	uxth	r2, r3
 800759e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a6:	1c9a      	adds	r2, r3, #2
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f040 809c 	bne.w	8007704 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80075da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075e0:	667b      	str	r3, [r7, #100]	; 0x64
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ea:	657b      	str	r3, [r7, #84]	; 0x54
 80075ec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e6      	bne.n	80075cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3308      	adds	r3, #8
 8007604:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	f023 0301 	bic.w	r3, r3, #1
 8007614:	663b      	str	r3, [r7, #96]	; 0x60
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3308      	adds	r3, #8
 800761c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800761e:	643a      	str	r2, [r7, #64]	; 0x40
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007624:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e5      	bne.n	80075fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2220      	movs	r2, #32
 8007636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d018      	beq.n	8007686 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	61fb      	str	r3, [r7, #28]
   return(result);
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007674:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e6      	bne.n	8007654 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800768a:	2b01      	cmp	r3, #1
 800768c:	d12e      	bne.n	80076ec <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f023 0310 	bic.w	r3, r3, #16
 80076a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076b2:	61bb      	str	r3, [r7, #24]
 80076b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6979      	ldr	r1, [r7, #20]
 80076b8:	69ba      	ldr	r2, [r7, #24]
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	613b      	str	r3, [r7, #16]
   return(result);
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e6      	bne.n	8007694 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b10      	cmp	r3, #16
 80076d2:	d103      	bne.n	80076dc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2210      	movs	r2, #16
 80076da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff f97f 	bl	80069e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076ea:	e00b      	b.n	8007704 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7f8 fe6d 	bl	80003cc <HAL_UART_RxCpltCallback>
}
 80076f2:	e007      	b.n	8007704 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699a      	ldr	r2, [r3, #24]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0208 	orr.w	r2, r2, #8
 8007702:	619a      	str	r2, [r3, #24]
}
 8007704:	bf00      	nop
 8007706:	3770      	adds	r7, #112	; 0x70
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007728:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800772c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007734:	b29a      	uxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	b29b      	uxth	r3, r3
 800773a:	43db      	mvns	r3, r3
 800773c:	b29b      	uxth	r3, r3
 800773e:	4013      	ands	r3, r2
 8007740:	b29a      	uxth	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007756:	b084      	sub	sp, #16
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	f107 0014 	add.w	r0, r7, #20
 8007764:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	b004      	add	sp, #16
 8007796:	4770      	bx	lr

08007798 <__libc_init_array>:
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	4d0d      	ldr	r5, [pc, #52]	; (80077d0 <__libc_init_array+0x38>)
 800779c:	4c0d      	ldr	r4, [pc, #52]	; (80077d4 <__libc_init_array+0x3c>)
 800779e:	1b64      	subs	r4, r4, r5
 80077a0:	10a4      	asrs	r4, r4, #2
 80077a2:	2600      	movs	r6, #0
 80077a4:	42a6      	cmp	r6, r4
 80077a6:	d109      	bne.n	80077bc <__libc_init_array+0x24>
 80077a8:	4d0b      	ldr	r5, [pc, #44]	; (80077d8 <__libc_init_array+0x40>)
 80077aa:	4c0c      	ldr	r4, [pc, #48]	; (80077dc <__libc_init_array+0x44>)
 80077ac:	f000 f820 	bl	80077f0 <_init>
 80077b0:	1b64      	subs	r4, r4, r5
 80077b2:	10a4      	asrs	r4, r4, #2
 80077b4:	2600      	movs	r6, #0
 80077b6:	42a6      	cmp	r6, r4
 80077b8:	d105      	bne.n	80077c6 <__libc_init_array+0x2e>
 80077ba:	bd70      	pop	{r4, r5, r6, pc}
 80077bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80077c0:	4798      	blx	r3
 80077c2:	3601      	adds	r6, #1
 80077c4:	e7ee      	b.n	80077a4 <__libc_init_array+0xc>
 80077c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ca:	4798      	blx	r3
 80077cc:	3601      	adds	r6, #1
 80077ce:	e7f2      	b.n	80077b6 <__libc_init_array+0x1e>
 80077d0:	08007858 	.word	0x08007858
 80077d4:	08007858 	.word	0x08007858
 80077d8:	08007858 	.word	0x08007858
 80077dc:	0800785c 	.word	0x0800785c

080077e0 <memset>:
 80077e0:	4402      	add	r2, r0
 80077e2:	4603      	mov	r3, r0
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d100      	bne.n	80077ea <memset+0xa>
 80077e8:	4770      	bx	lr
 80077ea:	f803 1b01 	strb.w	r1, [r3], #1
 80077ee:	e7f9      	b.n	80077e4 <memset+0x4>

080077f0 <_init>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	bf00      	nop
 80077f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077f6:	bc08      	pop	{r3}
 80077f8:	469e      	mov	lr, r3
 80077fa:	4770      	bx	lr

080077fc <_fini>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	bf00      	nop
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr
