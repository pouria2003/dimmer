
dimmerTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800ad70  0800ad70  0001ad70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0f0  0800b0f0  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800b0f0  0800b0f0  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b0f0  0800b0f0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0f0  0800b0f0  0001b0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0f4  0800b0f4  0001b0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800b0f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00001034  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200010cc  200010cc  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c4a4  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003195  00000000  00000000  0003c56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  0003f708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001638  00000000  00000000  00040e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203f3  00000000  00000000  00042460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d4dd  00000000  00000000  00062853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6068  00000000  00000000  0007fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145d98  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bb4  00000000  00000000  00145de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad54 	.word	0x0800ad54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800ad54 	.word	0x0800ad54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <writeLog>:

const float pi = 3.1415;
const float step = 0.031415;


void writeLog(int log_info, int info) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
	switch (log_info) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b07      	cmp	r3, #7
 8000bca:	d84a      	bhi.n	8000c62 <writeLog+0xa6>
 8000bcc:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <writeLog+0x18>)
 8000bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd2:	bf00      	nop
 8000bd4:	08000bf5 	.word	0x08000bf5
 8000bd8:	08000bff 	.word	0x08000bff
 8000bdc:	08000c0b 	.word	0x08000c0b
 8000be0:	08000c17 	.word	0x08000c17
 8000be4:	08000c39 	.word	0x08000c39
 8000be8:	08000c43 	.word	0x08000c43
 8000bec:	08000c4d 	.word	0x08000c4d
 8000bf0:	08000c57 	.word	0x08000c57
	case DIGIT_CHANGED :
			sprintf(message, "[INFO] Digit changed\n");
 8000bf4:	4925      	ldr	r1, [pc, #148]	; (8000c8c <writeLog+0xd0>)
 8000bf6:	4826      	ldr	r0, [pc, #152]	; (8000c90 <writeLog+0xd4>)
 8000bf8:	f008 fbac 	bl	8009354 <siprintf>
			break;
 8000bfc:	e036      	b.n	8000c6c <writeLog+0xb0>
	case DIGIT_INCREASED :
			sprintf(message, "[INFO] Digit %d Increased\n", info);
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	4924      	ldr	r1, [pc, #144]	; (8000c94 <writeLog+0xd8>)
 8000c02:	4823      	ldr	r0, [pc, #140]	; (8000c90 <writeLog+0xd4>)
 8000c04:	f008 fba6 	bl	8009354 <siprintf>
			break;
 8000c08:	e030      	b.n	8000c6c <writeLog+0xb0>
	case DIGIT_DECREASED :
			sprintf(message, "[INFO] Digit %d Decreased\n", info);
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	4922      	ldr	r1, [pc, #136]	; (8000c98 <writeLog+0xdc>)
 8000c0e:	4820      	ldr	r0, [pc, #128]	; (8000c90 <writeLog+0xd4>)
 8000c10:	f008 fba0 	bl	8009354 <siprintf>
			break;
 8000c14:	e02a      	b.n	8000c6c <writeLog+0xb0>
	case WAVE_CHANGED :
			sprintf(message, "[INFO] Wave changed to %s\n", ( (info == 1) ? "sinusoid" : (info == 2) ? "step" : "ramp") );
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d006      	beq.n	8000c2a <writeLog+0x6e>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d101      	bne.n	8000c26 <writeLog+0x6a>
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <writeLog+0xe0>)
 8000c24:	e002      	b.n	8000c2c <writeLog+0x70>
 8000c26:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <writeLog+0xe4>)
 8000c28:	e000      	b.n	8000c2c <writeLog+0x70>
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <writeLog+0xe8>)
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	491e      	ldr	r1, [pc, #120]	; (8000ca8 <writeLog+0xec>)
 8000c30:	4817      	ldr	r0, [pc, #92]	; (8000c90 <writeLog+0xd4>)
 8000c32:	f008 fb8f 	bl	8009354 <siprintf>
			break;
 8000c36:	e019      	b.n	8000c6c <writeLog+0xb0>
	case DIMSTEP_INCREASED :
			sprintf(message, "[INFO] DimStep increased\n");
 8000c38:	491c      	ldr	r1, [pc, #112]	; (8000cac <writeLog+0xf0>)
 8000c3a:	4815      	ldr	r0, [pc, #84]	; (8000c90 <writeLog+0xd4>)
 8000c3c:	f008 fb8a 	bl	8009354 <siprintf>
			break;
 8000c40:	e014      	b.n	8000c6c <writeLog+0xb0>
	case DIMSTEP_DECREASED :
			sprintf(message, "[INFO] DimStep decreased\n");
 8000c42:	491b      	ldr	r1, [pc, #108]	; (8000cb0 <writeLog+0xf4>)
 8000c44:	4812      	ldr	r0, [pc, #72]	; (8000c90 <writeLog+0xd4>)
 8000c46:	f008 fb85 	bl	8009354 <siprintf>
			break;
 8000c4a:	e00f      	b.n	8000c6c <writeLog+0xb0>
	case NOT_VALID_VALUE :
			sprintf(message, "[ERR] Not valid Value\n");
 8000c4c:	4919      	ldr	r1, [pc, #100]	; (8000cb4 <writeLog+0xf8>)
 8000c4e:	4810      	ldr	r0, [pc, #64]	; (8000c90 <writeLog+0xd4>)
 8000c50:	f008 fb80 	bl	8009354 <siprintf>
			break;
 8000c54:	e00a      	b.n	8000c6c <writeLog+0xb0>
	case CRITICAL_SITUATION :
			sprintf(message, "[WARN] Critical Situation. Light value:%d\n", info);
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	4917      	ldr	r1, [pc, #92]	; (8000cb8 <writeLog+0xfc>)
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <writeLog+0xd4>)
 8000c5c:	f008 fb7a 	bl	8009354 <siprintf>
			break;
 8000c60:	e004      	b.n	8000c6c <writeLog+0xb0>
	default :
			sprintf(message, "Unknown message\n");
 8000c62:	4916      	ldr	r1, [pc, #88]	; (8000cbc <writeLog+0x100>)
 8000c64:	480a      	ldr	r0, [pc, #40]	; (8000c90 <writeLog+0xd4>)
 8000c66:	f008 fb75 	bl	8009354 <siprintf>
			break;
 8000c6a:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, message, strlen(message), 1000);
 8000c6c:	4808      	ldr	r0, [pc, #32]	; (8000c90 <writeLog+0xd4>)
 8000c6e:	f7ff faaf 	bl	80001d0 <strlen>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	4905      	ldr	r1, [pc, #20]	; (8000c90 <writeLog+0xd4>)
 8000c7c:	4810      	ldr	r0, [pc, #64]	; (8000cc0 <writeLog+0x104>)
 8000c7e:	f006 ffe1 	bl	8007c44 <HAL_UART_Transmit>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	0800ad70 	.word	0x0800ad70
 8000c90:	200006d0 	.word	0x200006d0
 8000c94:	0800ad88 	.word	0x0800ad88
 8000c98:	0800ada4 	.word	0x0800ada4
 8000c9c:	0800adc0 	.word	0x0800adc0
 8000ca0:	0800adc8 	.word	0x0800adc8
 8000ca4:	0800add0 	.word	0x0800add0
 8000ca8:	0800addc 	.word	0x0800addc
 8000cac:	0800adf8 	.word	0x0800adf8
 8000cb0:	0800ae14 	.word	0x0800ae14
 8000cb4:	0800ae30 	.word	0x0800ae30
 8000cb8:	0800ae48 	.word	0x0800ae48
 8000cbc:	0800ae74 	.word	0x0800ae74
 8000cc0:	200002f0 	.word	0x200002f0

08000cc4 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	static uint32_t current_time = 0;
	static uint32_t current_tone_index = 0;
    if (htim->Instance == TIM3) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a2b      	ldr	r2, [pc, #172]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d14f      	bne.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0xb2>

    	if(warnsit && HAL_GetTick() - current_time > 5) {
 8000cd6:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d04b      	beq.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0xb2>
 8000cde:	f001 ff2b 	bl	8002b38 <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b05      	cmp	r3, #5
 8000cec:	d943      	bls.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0xb2>
    		current_tone_index = (current_tone_index + 1) % 200;
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8000cfa:	099b      	lsrs	r3, r3, #6
 8000cfc:	21c8      	movs	r1, #200	; 0xc8
 8000cfe:	fb01 f303 	mul.w	r3, r1, r3
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	4a21      	ldr	r2, [pc, #132]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d06:	6013      	str	r3, [r2, #0]
    		if (warnnum == 1)
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d10c      	bne.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x66>
    			PWM_Change_Tone(sinusoid[current_tone_index].frequency, volume);
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a20      	ldr	r2, [pc, #128]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000d16:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	4610      	mov	r0, r2
 8000d24:	f000 f860 	bl	8000de8 <PWM_Change_Tone>
 8000d28:	e020      	b.n	8000d6c <HAL_TIM_PeriodElapsedCallback+0xa8>
    		else if (warnnum == 2)
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d10c      	bne.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x88>
    			PWM_Change_Tone(ustep[current_tone_index].frequency, volume);
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d38:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4610      	mov	r0, r2
 8000d46:	f000 f84f 	bl	8000de8 <PWM_Change_Tone>
 8000d4a:	e00f      	b.n	8000d6c <HAL_TIM_PeriodElapsedCallback+0xa8>
    		else if (warnnum == 3)
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d10b      	bne.n	8000d6c <HAL_TIM_PeriodElapsedCallback+0xa8>
    			PWM_Change_Tone(ramp[current_tone_index].frequency, volume);
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d5a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	4610      	mov	r0, r2
 8000d68:	f000 f83e 	bl	8000de8 <PWM_Change_Tone>
    		current_time = HAL_GetTick();
 8000d6c:	f001 fee4 	bl	8002b38 <HAL_GetTick>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000d74:	6013      	str	r3, [r2, #0]
    	}
    }
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40000400 	.word	0x40000400
 8000d84:	20000708 	.word	0x20000708
 8000d88:	20001074 	.word	0x20001074
 8000d8c:	20001078 	.word	0x20001078
 8000d90:	51eb851f 	.word	0x51eb851f
 8000d94:	20000014 	.word	0x20000014
 8000d98:	20000710 	.word	0x20000710
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000d50 	.word	0x20000d50
 8000da4:	20000a30 	.word	0x20000a30

08000da8 <Buzzer_PWM_Start>:

void Buzzer_PWM_Start()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <Buzzer_PWM_Start+0x18>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <Buzzer_PWM_Start+0x1c>)
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f005 fcf8 	bl	80067ac <HAL_TIM_PWM_Start>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <Buzzer_PWM_Stop>:

void Buzzer_PWM_Stop()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(pwm_timer, pwm_channel);
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <Buzzer_PWM_Stop+0x18>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <Buzzer_PWM_Stop+0x1c>)
 8000dd2:	6812      	ldr	r2, [r2, #0]
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f005 fde8 	bl	80069ac <HAL_TIM_PWM_Stop>
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000004 	.word	0x20000004

08000de8 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	80fb      	strh	r3, [r7, #6]
 8000df4:	4613      	mov	r3, r2
 8000df6:	80bb      	strh	r3, [r7, #4]
    if (pwm_freq == 0 || pwm_freq > 20000)
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d004      	beq.n	8000e08 <PWM_Change_Tone+0x20>
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d937      	bls.n	8000e78 <PWM_Change_Tone+0x90>
    {
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8000e08:	4b52      	ldr	r3, [pc, #328]	; (8000f54 <PWM_Change_Tone+0x16c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d105      	bne.n	8000e1c <PWM_Change_Tone+0x34>
 8000e10:	4b51      	ldr	r3, [pc, #324]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2200      	movs	r2, #0
 8000e18:	635a      	str	r2, [r3, #52]	; 0x34
 8000e1a:	e097      	b.n	8000f4c <PWM_Change_Tone+0x164>
 8000e1c:	4b4d      	ldr	r3, [pc, #308]	; (8000f54 <PWM_Change_Tone+0x16c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d105      	bne.n	8000e30 <PWM_Change_Tone+0x48>
 8000e24:	4b4c      	ldr	r3, [pc, #304]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	6393      	str	r3, [r2, #56]	; 0x38
 8000e2e:	e08d      	b.n	8000f4c <PWM_Change_Tone+0x164>
 8000e30:	4b48      	ldr	r3, [pc, #288]	; (8000f54 <PWM_Change_Tone+0x16c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d105      	bne.n	8000e44 <PWM_Change_Tone+0x5c>
 8000e38:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000e42:	e083      	b.n	8000f4c <PWM_Change_Tone+0x164>
 8000e44:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <PWM_Change_Tone+0x16c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b0c      	cmp	r3, #12
 8000e4a:	d105      	bne.n	8000e58 <PWM_Change_Tone+0x70>
 8000e4c:	4b42      	ldr	r3, [pc, #264]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	e079      	b.n	8000f4c <PWM_Change_Tone+0x164>
 8000e58:	4b3e      	ldr	r3, [pc, #248]	; (8000f54 <PWM_Change_Tone+0x16c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b10      	cmp	r3, #16
 8000e5e:	d105      	bne.n	8000e6c <PWM_Change_Tone+0x84>
 8000e60:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	2300      	movs	r3, #0
 8000e68:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6a:	e06f      	b.n	8000f4c <PWM_Change_Tone+0x164>
 8000e6c:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	2300      	movs	r3, #0
 8000e74:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e76:	e069      	b.n	8000f4c <PWM_Change_Tone+0x164>
    }
    else
    {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8000e78:	f005 f86a 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8000e7c:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	69fa      	ldr	r2, [r7, #28]
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4a35      	ldr	r2, [pc, #212]	; (8000f5c <PWM_Change_Tone+0x174>)
 8000e88:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8c:	0b9b      	lsrs	r3, r3, #14
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3301      	adds	r3, #1
 8000e92:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 8000e94:	8b7b      	ldrh	r3, [r7, #26]
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8000ea8:	88bb      	ldrh	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	fb02 f303 	mul.w	r3, r2, r3
 8000eb0:	4a2b      	ldr	r2, [pc, #172]	; (8000f60 <PWM_Change_Tone+0x178>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	09db      	lsrs	r3, r3, #7
 8000eb8:	60fb      	str	r3, [r7, #12]

        pwm_timer->Instance->PSC = prescaler - 1;
 8000eba:	8b7b      	ldrh	r3, [r7, #26]
 8000ebc:	1e5a      	subs	r2, r3, #1
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timer->Instance->ARR = period_cycles - 1;
 8000ec6:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	3a01      	subs	r2, #1
 8000ed0:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timer->Instance->EGR = TIM_EGR_UG;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <PWM_Change_Tone+0x16c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d105      	bne.n	8000ef0 <PWM_Change_Tone+0x108>
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8000eee:	e02d      	b.n	8000f4c <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <PWM_Change_Tone+0x16c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d105      	bne.n	8000f04 <PWM_Change_Tone+0x11c>
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f02:	e023      	b.n	8000f4c <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <PWM_Change_Tone+0x16c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	d105      	bne.n	8000f18 <PWM_Change_Tone+0x130>
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000f16:	e019      	b.n	8000f4c <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <PWM_Change_Tone+0x16c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b0c      	cmp	r3, #12
 8000f1e:	d105      	bne.n	8000f2c <PWM_Change_Tone+0x144>
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f2a:	e00f      	b.n	8000f4c <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <PWM_Change_Tone+0x16c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b10      	cmp	r3, #16
 8000f32:	d105      	bne.n	8000f40 <PWM_Change_Tone+0x158>
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000f3e:	e005      	b.n	8000f4c <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <PWM_Change_Tone+0x170>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000f4a:	e7ff      	b.n	8000f4c <PWM_Change_Tone+0x164>
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000004 	.word	0x20000004
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	45e7b273 	.word	0x45e7b273
 8000f60:	10624dd3 	.word	0x10624dd3

08000f64 <warn>:


int last_warn_change = -300;

void warn(int light) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

	if(HAL_GetTick() - last_warn_change < 300)
 8000f6c:	f001 fde4 	bl	8002b38 <HAL_GetTick>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <warn+0x68>)
 8000f74:	6812      	ldr	r2, [r2, #0]
 8000f76:	1a9b      	subs	r3, r3, r2
 8000f78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f7c:	d321      	bcc.n	8000fc2 <warn+0x5e>
		return;
	Buzzer_PWM_Start();
 8000f7e:	f7ff ff13 	bl	8000da8 <Buzzer_PWM_Start>
	writeLog(CRITICAL_SITUATION, light);
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	2007      	movs	r0, #7
 8000f86:	f7ff fe19 	bl	8000bbc <writeLog>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <warn+0x6c>)
 8000f8e:	f005 fd0d 	bl	80069ac <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000f92:	2104      	movs	r1, #4
 8000f94:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <warn+0x6c>)
 8000f96:	f005 fd09 	bl	80069ac <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <warn+0x6c>)
 8000f9e:	f005 fd05 	bl	80069ac <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000fa2:	210c      	movs	r1, #12
 8000fa4:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <warn+0x6c>)
 8000fa6:	f005 fd01 	bl	80069ac <HAL_TIM_PWM_Stop>
	warncount++;
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <warn+0x70>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <warn+0x70>)
 8000fb2:	6013      	str	r3, [r2, #0]
	last_warn_change = HAL_GetTick();
 8000fb4:	f001 fdc0 	bl	8002b38 <HAL_GetTick>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <warn+0x68>)
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e000      	b.n	8000fc4 <warn+0x60>
		return;
 8000fc2:	bf00      	nop
}
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000020 	.word	0x20000020
 8000fd0:	2000020c 	.word	0x2000020c
 8000fd4:	20000668 	.word	0x20000668

08000fd8 <warnOff>:

void warnOff() {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

	if(HAL_GetTick() - last_warn_change < 300)
 8000fdc:	f001 fdac 	bl	8002b38 <HAL_GetTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <warnOff+0x54>)
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fec:	d31c      	bcc.n	8001028 <warnOff+0x50>
		return;
	Buzzer_PWM_Stop();
 8000fee:	f7ff feeb 	bl	8000dc8 <Buzzer_PWM_Stop>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	480e      	ldr	r0, [pc, #56]	; (8001030 <warnOff+0x58>)
 8000ff6:	f005 fbd9 	bl	80067ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <warnOff+0x58>)
 8000ffe:	f005 fbd5 	bl	80067ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001002:	2108      	movs	r1, #8
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <warnOff+0x58>)
 8001006:	f005 fbd1 	bl	80067ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800100a:	210c      	movs	r1, #12
 800100c:	4808      	ldr	r0, [pc, #32]	; (8001030 <warnOff+0x58>)
 800100e:	f005 fbcd 	bl	80067ac <HAL_TIM_PWM_Start>
	PWM_Change_Tone(0, 0);
 8001012:	2100      	movs	r1, #0
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fee7 	bl	8000de8 <PWM_Change_Tone>
	last_warn_change = HAL_GetTick();
 800101a:	f001 fd8d 	bl	8002b38 <HAL_GetTick>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b02      	ldr	r3, [pc, #8]	; (800102c <warnOff+0x54>)
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	e000      	b.n	800102a <warnOff+0x52>
		return;
 8001028:	bf00      	nop

}
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000020 	.word	0x20000020
 8001030:	2000020c 	.word	0x2000020c

08001034 <Update_LEDs>:

void Update_LEDs(){
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
	int ccr = dimstep * 10 + (dim_v - 9);
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <Update_LEDs+0x7c>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	461a      	mov	r2, r3
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <Update_LEDs+0x80>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3b09      	subs	r3, #9
 800104e:	4413      	add	r3, r2
 8001050:	607b      	str	r3, [r7, #4]
	ccr = ccr < 0 ? 0 : ccr;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001058:	607b      	str	r3, [r7, #4]
	TIM1->CCR1 = (lights >= 1) ? ccr : 0;
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <Update_LEDs+0x84>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	dd01      	ble.n	8001066 <Update_LEDs+0x32>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	e000      	b.n	8001068 <Update_LEDs+0x34>
 8001066:	2300      	movs	r3, #0
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <Update_LEDs+0x88>)
 800106a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = (lights >= 2) ? ccr : 0;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <Update_LEDs+0x84>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	dd01      	ble.n	8001078 <Update_LEDs+0x44>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	e000      	b.n	800107a <Update_LEDs+0x46>
 8001078:	2300      	movs	r3, #0
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <Update_LEDs+0x88>)
 800107c:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = (lights >= 3) ? ccr : 0;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <Update_LEDs+0x84>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b02      	cmp	r3, #2
 8001084:	dd01      	ble.n	800108a <Update_LEDs+0x56>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	e000      	b.n	800108c <Update_LEDs+0x58>
 800108a:	2300      	movs	r3, #0
 800108c:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <Update_LEDs+0x88>)
 800108e:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4 = (lights >= 4) ? ccr : 0;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <Update_LEDs+0x84>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b03      	cmp	r3, #3
 8001096:	dd01      	ble.n	800109c <Update_LEDs+0x68>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	e000      	b.n	800109e <Update_LEDs+0x6a>
 800109c:	2300      	movs	r3, #0
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <Update_LEDs+0x88>)
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	20000664 	.word	0x20000664
 80010b8:	20000010 	.word	0x20000010
 80010bc:	40012c00 	.word	0x40012c00

080010c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1){
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010d0:	f040 8081 	bne.w	80011d6 <HAL_ADC_ConvCpltCallback+0x116>
		static int adc1_call_counter = 0;
		static int sample = 0;
		static int buff[10];
		int x;
		if (adc1_call_counter < 1000){
 80010d4:	4b6e      	ldr	r3, [pc, #440]	; (8001290 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010dc:	da08      	bge.n	80010f0 <HAL_ADC_ConvCpltCallback+0x30>
			adc1_call_counter++;
 80010de:	4b6c      	ldr	r3, [pc, #432]	; (8001290 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	4a6a      	ldr	r2, [pc, #424]	; (8001290 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80010e6:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc1);
 80010e8:	486a      	ldr	r0, [pc, #424]	; (8001294 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80010ea:	f001 ff49 	bl	8002f80 <HAL_ADC_Start_IT>
			return;
 80010ee:	e0cb      	b.n	8001288 <HAL_ADC_ConvCpltCallback+0x1c8>
		}
		adc1_call_counter = 0;
 80010f0:	4b67      	ldr	r3, [pc, #412]	; (8001290 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
		buff[sample] = HAL_ADC_GetValue(&hadc1);
 80010f6:	4867      	ldr	r0, [pc, #412]	; (8001294 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80010f8:	f002 f882 	bl	8003200 <HAL_ADC_GetValue>
 80010fc:	4602      	mov	r2, r0
 80010fe:	4b66      	ldr	r3, [pc, #408]	; (8001298 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4611      	mov	r1, r2
 8001104:	4a65      	ldr	r2, [pc, #404]	; (800129c <HAL_ADC_ConvCpltCallback+0x1dc>)
 8001106:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sample += 1;
 800110a:	4b63      	ldr	r3, [pc, #396]	; (8001298 <HAL_ADC_ConvCpltCallback+0x1d8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	4a61      	ldr	r2, [pc, #388]	; (8001298 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8001112:	6013      	str	r3, [r2, #0]
		if(sample == 10) {
 8001114:	4b60      	ldr	r3, [pc, #384]	; (8001298 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b0a      	cmp	r3, #10
 800111a:	d158      	bne.n	80011ce <HAL_ADC_ConvCpltCallback+0x10e>
			sample = 0;
 800111c:	4b5e      	ldr	r3, [pc, #376]	; (8001298 <HAL_ADC_ConvCpltCallback+0x1d8>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
			x = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
			for(int i = 0; i < 10; ++i) {
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	e00b      	b.n	8001144 <HAL_ADC_ConvCpltCallback+0x84>
				x = (x > buff[i]) ? x : buff[i];
 800112c:	4a5b      	ldr	r2, [pc, #364]	; (800129c <HAL_ADC_ConvCpltCallback+0x1dc>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	4293      	cmp	r3, r2
 8001138:	bfb8      	it	lt
 800113a:	4613      	movlt	r3, r2
 800113c:	617b      	str	r3, [r7, #20]
			for(int i = 0; i < 10; ++i) {
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	3301      	adds	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	2b09      	cmp	r3, #9
 8001148:	ddf0      	ble.n	800112c <HAL_ADC_ConvCpltCallback+0x6c>
			}

			// Save env_light once if calibrating
			if (calibrating == 1){
 800114a:	4b55      	ldr	r3, [pc, #340]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d11f      	bne.n	8001192 <HAL_ADC_ConvCpltCallback+0xd2>
				if (env_light == -1){
 8001152:	4b54      	ldr	r3, [pc, #336]	; (80012a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115a:	f040 8094 	bne.w	8001286 <HAL_ADC_ConvCpltCallback+0x1c6>
					env_light = HAL_ADC_GetValue(&hadc1);
 800115e:	484d      	ldr	r0, [pc, #308]	; (8001294 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8001160:	f002 f84e 	bl	8003200 <HAL_ADC_GetValue>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800116a:	601a      	str	r2, [r3, #0]
					sprintf(message, "env_light=%d\n", env_light);
 800116c:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	494d      	ldr	r1, [pc, #308]	; (80012a8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001174:	484d      	ldr	r0, [pc, #308]	; (80012ac <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001176:	f008 f8ed 	bl	8009354 <siprintf>
					HAL_UART_Transmit(&huart2, message, strlen(message), 1000);
 800117a:	484c      	ldr	r0, [pc, #304]	; (80012ac <HAL_ADC_ConvCpltCallback+0x1ec>)
 800117c:	f7ff f828 	bl	80001d0 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001188:	4948      	ldr	r1, [pc, #288]	; (80012ac <HAL_ADC_ConvCpltCallback+0x1ec>)
 800118a:	4849      	ldr	r0, [pc, #292]	; (80012b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800118c:	f006 fd5a 	bl	8007c44 <HAL_UART_Transmit>
				}
				// Stop ADC IT execution, until restarted in external interrupt handler (any key press)
				return;
 8001190:	e079      	b.n	8001286 <HAL_ADC_ConvCpltCallback+0x1c6>
			}

			if(x > treshhold && warnsit == 0) {
 8001192:	4b48      	ldr	r3, [pc, #288]	; (80012b4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	429a      	cmp	r2, r3
 800119a:	dd0a      	ble.n	80011b2 <HAL_ADC_ConvCpltCallback+0xf2>
 800119c:	4b46      	ldr	r3, [pc, #280]	; (80012b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d106      	bne.n	80011b2 <HAL_ADC_ConvCpltCallback+0xf2>
					warnsit = 1;
 80011a4:	4b44      	ldr	r3, [pc, #272]	; (80012b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	601a      	str	r2, [r3, #0]
					warn(x);
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff feda 	bl	8000f64 <warn>
 80011b0:	e00d      	b.n	80011ce <HAL_ADC_ConvCpltCallback+0x10e>
			} else if(x <= treshhold && warnsit == 1) {
 80011b2:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dc08      	bgt.n	80011ce <HAL_ADC_ConvCpltCallback+0x10e>
 80011bc:	4b3e      	ldr	r3, [pc, #248]	; (80012b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d104      	bne.n	80011ce <HAL_ADC_ConvCpltCallback+0x10e>
				warnOff();
 80011c4:	f7ff ff08 	bl	8000fd8 <warnOff>
				warnsit = 0;
 80011c8:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_ADC_Start_IT(&hadc1);
 80011ce:	4831      	ldr	r0, [pc, #196]	; (8001294 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80011d0:	f001 fed6 	bl	8002f80 <HAL_ADC_Start_IT>
 80011d4:	e058      	b.n	8001288 <HAL_ADC_ConvCpltCallback+0x1c8>
	}
	else if (hadc->Instance == ADC4){
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a38      	ldr	r2, [pc, #224]	; (80012bc <HAL_ADC_ConvCpltCallback+0x1fc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d153      	bne.n	8001288 <HAL_ADC_ConvCpltCallback+0x1c8>
		static int adc4_call_counter = 0;
		if (adc4_call_counter < 10000){
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x200>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80011e8:	4293      	cmp	r3, r2
 80011ea:	dc08      	bgt.n	80011fe <HAL_ADC_ConvCpltCallback+0x13e>
			adc4_call_counter++;
 80011ec:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x200>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	4a33      	ldr	r2, [pc, #204]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x200>)
 80011f4:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc4);
 80011f6:	4833      	ldr	r0, [pc, #204]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x204>)
 80011f8:	f001 fec2 	bl	8002f80 <HAL_ADC_Start_IT>
			return;
 80011fc:	e044      	b.n	8001288 <HAL_ADC_ConvCpltCallback+0x1c8>
		}
		adc4_call_counter = 0;
 80011fe:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x200>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
		int adc4_value = HAL_ADC_GetValue(&hadc4);
 8001204:	482f      	ldr	r0, [pc, #188]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x204>)
 8001206:	f001 fffb 	bl	8003200 <HAL_ADC_GetValue>
 800120a:	4603      	mov	r3, r0
 800120c:	60fb      	str	r3, [r7, #12]
		if (calibrating == 1){
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d110      	bne.n	8001238 <HAL_ADC_ConvCpltCallback+0x178>
			// Remove mod 20
			calib_input = adc4_value - (adc4_value % 20);
 8001216:	68f9      	ldr	r1, [r7, #12]
 8001218:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <HAL_ADC_ConvCpltCallback+0x208>)
 800121a:	fb83 2301 	smull	r2, r3, r3, r1
 800121e:	10da      	asrs	r2, r3, #3
 8001220:	17cb      	asrs	r3, r1, #31
 8001222:	1ad2      	subs	r2, r2, r3
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	1aca      	subs	r2, r1, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1a9b      	subs	r3, r3, r2
 8001232:	4a26      	ldr	r2, [pc, #152]	; (80012cc <HAL_ADC_ConvCpltCallback+0x20c>)
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e022      	b.n	800127e <HAL_ADC_ConvCpltCallback+0x1be>
		}
		else{
			adc4_value = adc4_value / 1024.0 * 18; // [0-18] range
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f7ff f973 	bl	8000524 <__aeabi_i2d>
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <HAL_ADC_ConvCpltCallback+0x210>)
 8001244:	f7ff fb02 	bl	800084c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_ADC_ConvCpltCallback+0x214>)
 8001256:	f7ff f9cf 	bl	80005f8 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fc63 	bl	8000b2c <__aeabi_d2iz>
 8001266:	4603      	mov	r3, r0
 8001268:	60fb      	str	r3, [r7, #12]
			if (dim_v != adc4_value){
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <HAL_ADC_ConvCpltCallback+0x218>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d004      	beq.n	800127e <HAL_ADC_ConvCpltCallback+0x1be>
				dim_v = adc4_value;
 8001274:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <HAL_ADC_ConvCpltCallback+0x218>)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6013      	str	r3, [r2, #0]
				Update_LEDs();
 800127a:	f7ff fedb 	bl	8001034 <Update_LEDs>
			}
		}
		HAL_ADC_Start_IT(&hadc4);
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x204>)
 8001280:	f001 fe7e 	bl	8002f80 <HAL_ADC_Start_IT>
 8001284:	e000      	b.n	8001288 <HAL_ADC_ConvCpltCallback+0x1c8>
				return;
 8001286:	bf00      	nop
	}
}
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000107c 	.word	0x2000107c
 8001294:	200000b4 	.word	0x200000b4
 8001298:	20001080 	.word	0x20001080
 800129c:	20001084 	.word	0x20001084
 80012a0:	2000001c 	.word	0x2000001c
 80012a4:	20000018 	.word	0x20000018
 80012a8:	0800ae88 	.word	0x0800ae88
 80012ac:	200006d0 	.word	0x200006d0
 80012b0:	200002f0 	.word	0x200002f0
 80012b4:	20000704 	.word	0x20000704
 80012b8:	20000708 	.word	0x20000708
 80012bc:	50000500 	.word	0x50000500
 80012c0:	200010ac 	.word	0x200010ac
 80012c4:	20000104 	.word	0x20000104
 80012c8:	66666667 	.word	0x66666667
 80012cc:	2000070c 	.word	0x2000070c
 80012d0:	40900000 	.word	0x40900000
 80012d4:	40320000 	.word	0x40320000
 80012d8:	20000664 	.word	0x20000664

080012dc <setDimstep>:

void setDimstep(int val) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	if(val >= 0 && val <= 9) {
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db16      	blt.n	8001318 <setDimstep+0x3c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b09      	cmp	r3, #9
 80012ee:	dc13      	bgt.n	8001318 <setDimstep+0x3c>
		if(val > dimstep)
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <setDimstep+0x50>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dd04      	ble.n	8001304 <setDimstep+0x28>
			writeLog(DIMSTEP_INCREASED, 0);
 80012fa:	2100      	movs	r1, #0
 80012fc:	2004      	movs	r0, #4
 80012fe:	f7ff fc5d 	bl	8000bbc <writeLog>
 8001302:	e003      	b.n	800130c <setDimstep+0x30>
		else
			writeLog(DIMSTEP_DECREASED, 0);
 8001304:	2100      	movs	r1, #0
 8001306:	2005      	movs	r0, #5
 8001308:	f7ff fc58 	bl	8000bbc <writeLog>
		dimstep = val;
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <setDimstep+0x50>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
		Update_LEDs();
 8001312:	f7ff fe8f 	bl	8001034 <Update_LEDs>
 8001316:	e004      	b.n	8001322 <setDimstep+0x46>
	} else {
		writeLog(NOT_VALID_VALUE, 0);
 8001318:	2100      	movs	r1, #0
 800131a:	2006      	movs	r0, #6
 800131c:	f7ff fc4e 	bl	8000bbc <writeLog>
	}
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000000c 	.word	0x2000000c

08001330 <setLights>:

void setLights(int val) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	if(val >= 0 && val <= 4) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db08      	blt.n	8001350 <setLights+0x20>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b04      	cmp	r3, #4
 8001342:	dc05      	bgt.n	8001350 <setLights+0x20>
		lights = val;
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <setLights+0x34>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
		Update_LEDs();
 800134a:	f7ff fe73 	bl	8001034 <Update_LEDs>
 800134e:	e004      	b.n	800135a <setLights+0x2a>
	}
	else {
		writeLog(NOT_VALID_VALUE, 0);
 8001350:	2100      	movs	r1, #0
 8001352:	2006      	movs	r0, #6
 8001354:	f7ff fc32 	bl	8000bbc <writeLog>
	}
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000010 	.word	0x20000010

08001368 <setWarnnum>:

void setWarnnum(int val) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	if(val >= 1 && val <= 3) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	dd0c      	ble.n	8001390 <setWarnnum+0x28>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b03      	cmp	r3, #3
 800137a:	dc09      	bgt.n	8001390 <setWarnnum+0x28>
		warnnum = val;
 800137c:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <setWarnnum+0x3c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
		writeLog(WAVE_CHANGED, warnnum);
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <setWarnnum+0x3c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4619      	mov	r1, r3
 8001388:	2003      	movs	r0, #3
 800138a:	f7ff fc17 	bl	8000bbc <writeLog>
 800138e:	e004      	b.n	800139a <setWarnnum+0x32>
	}
	else {
		writeLog(NOT_VALID_VALUE, 0);
 8001390:	2100      	movs	r1, #0
 8001392:	2006      	movs	r0, #6
 8001394:	f7ff fc12 	bl	8000bbc <writeLog>
	}
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000014 	.word	0x20000014

080013a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART2)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a30      	ldr	r2, [pc, #192]	; (8001478 <HAL_UART_RxCpltCallback+0xd0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d159      	bne.n	800146e <HAL_UART_RxCpltCallback+0xc6>
    {
    	static unsigned char command[10];
    	static int in_val;
    	if(in_data[0] == 'D') {
 80013ba:	4b30      	ldr	r3, [pc, #192]	; (800147c <HAL_UART_RxCpltCallback+0xd4>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b44      	cmp	r3, #68	; 0x44
 80013c0:	d119      	bne.n	80013f6 <HAL_UART_RxCpltCallback+0x4e>
    		HAL_UART_Receive(&huart2, in_data, 1, 100);
 80013c2:	2364      	movs	r3, #100	; 0x64
 80013c4:	2201      	movs	r2, #1
 80013c6:	492d      	ldr	r1, [pc, #180]	; (800147c <HAL_UART_RxCpltCallback+0xd4>)
 80013c8:	482d      	ldr	r0, [pc, #180]	; (8001480 <HAL_UART_RxCpltCallback+0xd8>)
 80013ca:	f006 fcc5 	bl	8007d58 <HAL_UART_Receive>
    		message[0] = '\n';
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_UART_RxCpltCallback+0xdc>)
 80013d0:	220a      	movs	r2, #10
 80013d2:	701a      	strb	r2, [r3, #0]
    		HAL_UART_Transmit(&huart2, message, 1, 100);
 80013d4:	2364      	movs	r3, #100	; 0x64
 80013d6:	2201      	movs	r2, #1
 80013d8:	492a      	ldr	r1, [pc, #168]	; (8001484 <HAL_UART_RxCpltCallback+0xdc>)
 80013da:	4829      	ldr	r0, [pc, #164]	; (8001480 <HAL_UART_RxCpltCallback+0xd8>)
 80013dc:	f006 fc32 	bl	8007c44 <HAL_UART_Transmit>
    		in_val = in_data[0] - '0';
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <HAL_UART_RxCpltCallback+0xd4>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	3b30      	subs	r3, #48	; 0x30
 80013e6:	4a28      	ldr	r2, [pc, #160]	; (8001488 <HAL_UART_RxCpltCallback+0xe0>)
 80013e8:	6013      	str	r3, [r2, #0]
    		setDimstep(in_val);
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <HAL_UART_RxCpltCallback+0xe0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff74 	bl	80012dc <setDimstep>
 80013f4:	e02b      	b.n	800144e <HAL_UART_RxCpltCallback+0xa6>
    	}
    	else if(in_data[0] == 'L') {
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_UART_RxCpltCallback+0xd4>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b4c      	cmp	r3, #76	; 0x4c
 80013fc:	d113      	bne.n	8001426 <HAL_UART_RxCpltCallback+0x7e>
    		message[0] = '\n';
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_UART_RxCpltCallback+0xdc>)
 8001400:	220a      	movs	r2, #10
 8001402:	701a      	strb	r2, [r3, #0]
    		HAL_UART_Transmit(&huart2, message, 1, 100);
 8001404:	2364      	movs	r3, #100	; 0x64
 8001406:	2201      	movs	r2, #1
 8001408:	491e      	ldr	r1, [pc, #120]	; (8001484 <HAL_UART_RxCpltCallback+0xdc>)
 800140a:	481d      	ldr	r0, [pc, #116]	; (8001480 <HAL_UART_RxCpltCallback+0xd8>)
 800140c:	f006 fc1a 	bl	8007c44 <HAL_UART_Transmit>
    		in_val = in_data[7] - '0';
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_UART_RxCpltCallback+0xd4>)
 8001412:	79db      	ldrb	r3, [r3, #7]
 8001414:	3b30      	subs	r3, #48	; 0x30
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <HAL_UART_RxCpltCallback+0xe0>)
 8001418:	6013      	str	r3, [r2, #0]
    		setLights(in_val);
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_UART_RxCpltCallback+0xe0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff86 	bl	8001330 <setLights>
 8001424:	e013      	b.n	800144e <HAL_UART_RxCpltCallback+0xa6>
    	}
    	else if(in_data[0] == 'W') {
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_UART_RxCpltCallback+0xd4>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b57      	cmp	r3, #87	; 0x57
 800142c:	d10f      	bne.n	800144e <HAL_UART_RxCpltCallback+0xa6>
    		HAL_UART_Receive(&huart2, in_data, 1, 100);
 800142e:	2364      	movs	r3, #100	; 0x64
 8001430:	2201      	movs	r2, #1
 8001432:	4912      	ldr	r1, [pc, #72]	; (800147c <HAL_UART_RxCpltCallback+0xd4>)
 8001434:	4812      	ldr	r0, [pc, #72]	; (8001480 <HAL_UART_RxCpltCallback+0xd8>)
 8001436:	f006 fc8f 	bl	8007d58 <HAL_UART_Receive>
    		in_val = in_data[0] - '0';
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_UART_RxCpltCallback+0xd4>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	3b30      	subs	r3, #48	; 0x30
 8001440:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_UART_RxCpltCallback+0xe0>)
 8001442:	6013      	str	r3, [r2, #0]
    		setWarnnum(in_val);
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_UART_RxCpltCallback+0xe0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff8d 	bl	8001368 <setWarnnum>
    	}
    	sprintf(message, "\n");
 800144e:	490f      	ldr	r1, [pc, #60]	; (800148c <HAL_UART_RxCpltCallback+0xe4>)
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <HAL_UART_RxCpltCallback+0xdc>)
 8001452:	f007 ff7f 	bl	8009354 <siprintf>
    	HAL_UART_Transmit(&huart2, message, 1, 1000);
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	2201      	movs	r2, #1
 800145c:	4909      	ldr	r1, [pc, #36]	; (8001484 <HAL_UART_RxCpltCallback+0xdc>)
 800145e:	4808      	ldr	r0, [pc, #32]	; (8001480 <HAL_UART_RxCpltCallback+0xd8>)
 8001460:	f006 fbf0 	bl	8007c44 <HAL_UART_Transmit>
    	HAL_UART_Receive_IT(&huart2, in_data, 8);
 8001464:	2208      	movs	r2, #8
 8001466:	4905      	ldr	r1, [pc, #20]	; (800147c <HAL_UART_RxCpltCallback+0xd4>)
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_UART_RxCpltCallback+0xd8>)
 800146a:	f006 fd2b 	bl	8007ec4 <HAL_UART_Receive_IT>

    }
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40004400 	.word	0x40004400
 800147c:	2000066c 	.word	0x2000066c
 8001480:	200002f0 	.word	0x200002f0
 8001484:	200006d0 	.word	0x200006d0
 8001488:	200010b0 	.word	0x200010b0
 800148c:	0800ae98 	.word	0x0800ae98

08001490 <display_digit>:
void display_digit(int n, int d, int delay, int dp){
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	603b      	str	r3, [r7, #0]
	// Which of the four digits is this
	// Active high 7-segment, low pin -> digit on
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, d == 0 ? 0 : 1);
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf14      	ite	ne
 80014a4:	2301      	movne	r3, #1
 80014a6:	2300      	moveq	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b0:	4847      	ldr	r0, [pc, #284]	; (80015d0 <display_digit+0x140>)
 80014b2:	f003 f96b 	bl	800478c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, d == 1 ? 0 : 1);
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	bf14      	ite	ne
 80014bc:	2301      	movne	r3, #1
 80014be:	2300      	moveq	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c8:	4841      	ldr	r0, [pc, #260]	; (80015d0 <display_digit+0x140>)
 80014ca:	f003 f95f 	bl	800478c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, d == 2 ? 0 : 1);
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	bf14      	ite	ne
 80014d4:	2301      	movne	r3, #1
 80014d6:	2300      	moveq	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e0:	483b      	ldr	r0, [pc, #236]	; (80015d0 <display_digit+0x140>)
 80014e2:	f003 f953 	bl	800478c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, d == 3 ? 0 : 1);
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	bf14      	ite	ne
 80014ec:	2301      	movne	r3, #1
 80014ee:	2300      	moveq	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f8:	4835      	ldr	r0, [pc, #212]	; (80015d0 <display_digit+0x140>)
 80014fa:	f003 f947 	bl	800478c <HAL_GPIO_WritePin>

    // ABCD BCD Output
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, (n == 1 || n == 3 || n == 5 || n == 7 || n == 9));
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d00b      	beq.n	800151c <display_digit+0x8c>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d008      	beq.n	800151c <display_digit+0x8c>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b05      	cmp	r3, #5
 800150e:	d005      	beq.n	800151c <display_digit+0x8c>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b07      	cmp	r3, #7
 8001514:	d002      	beq.n	800151c <display_digit+0x8c>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b09      	cmp	r3, #9
 800151a:	d101      	bne.n	8001520 <display_digit+0x90>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <display_digit+0x92>
 8001520:	2300      	movs	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152a:	4829      	ldr	r0, [pc, #164]	; (80015d0 <display_digit+0x140>)
 800152c:	f003 f92e 	bl	800478c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, (n == 2 || n == 3 || n == 6 || n == 7));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d008      	beq.n	8001548 <display_digit+0xb8>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d005      	beq.n	8001548 <display_digit+0xb8>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b06      	cmp	r3, #6
 8001540:	d002      	beq.n	8001548 <display_digit+0xb8>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b07      	cmp	r3, #7
 8001546:	d101      	bne.n	800154c <display_digit+0xbc>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <display_digit+0xbe>
 800154c:	2300      	movs	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001556:	481e      	ldr	r0, [pc, #120]	; (80015d0 <display_digit+0x140>)
 8001558:	f003 f918 	bl	800478c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, (n == 4 || n == 5 || n == 6 || n == 7));
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b04      	cmp	r3, #4
 8001560:	d008      	beq.n	8001574 <display_digit+0xe4>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2b05      	cmp	r3, #5
 8001566:	d005      	beq.n	8001574 <display_digit+0xe4>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b06      	cmp	r3, #6
 800156c:	d002      	beq.n	8001574 <display_digit+0xe4>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b07      	cmp	r3, #7
 8001572:	d101      	bne.n	8001578 <display_digit+0xe8>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <display_digit+0xea>
 8001578:	2300      	movs	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001582:	4813      	ldr	r0, [pc, #76]	; (80015d0 <display_digit+0x140>)
 8001584:	f003 f902 	bl	800478c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, (n == 8 || n == 9));
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b08      	cmp	r3, #8
 800158c:	d002      	beq.n	8001594 <display_digit+0x104>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b09      	cmp	r3, #9
 8001592:	d101      	bne.n	8001598 <display_digit+0x108>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <display_digit+0x10a>
 8001598:	2300      	movs	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a2:	480b      	ldr	r0, [pc, #44]	; (80015d0 <display_digit+0x140>)
 80015a4:	f003 f8f2 	bl	800478c <HAL_GPIO_WritePin>

    // Is decimal point on or off for digit?
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, dp == 1 ? 1 : 0);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	bf0c      	ite	eq
 80015ae:	2301      	moveq	r3, #1
 80015b0:	2300      	movne	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	2140      	movs	r1, #64	; 0x40
 80015b8:	4806      	ldr	r0, [pc, #24]	; (80015d4 <display_digit+0x144>)
 80015ba:	f003 f8e7 	bl	800478c <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 fac5 	bl	8002b50 <HAL_Delay>
  }
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	48000c00 	.word	0x48000c00
 80015d4:	48000800 	.word	0x48000800

080015d8 <HAL_GPIO_EXTI_Callback>:
int selected = 1;
uint32_t last_interrupt = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
	if (last_interrupt == 0)
 80015e2:	4b6a      	ldr	r3, [pc, #424]	; (800178c <HAL_GPIO_EXTI_Callback+0x1b4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d105      	bne.n	80015f6 <HAL_GPIO_EXTI_Callback+0x1e>
		last_interrupt = HAL_GetTick();
 80015ea:	f001 faa5 	bl	8002b38 <HAL_GetTick>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a66      	ldr	r2, [pc, #408]	; (800178c <HAL_GPIO_EXTI_Callback+0x1b4>)
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e00d      	b.n	8001612 <HAL_GPIO_EXTI_Callback+0x3a>
	else if (HAL_GetTick()-last_interrupt < 200){
 80015f6:	f001 fa9f 	bl	8002b38 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	4b63      	ldr	r3, [pc, #396]	; (800178c <HAL_GPIO_EXTI_Callback+0x1b4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2bc7      	cmp	r3, #199	; 0xc7
 8001604:	f240 80be 	bls.w	8001784 <HAL_GPIO_EXTI_Callback+0x1ac>
		return;
	}
	else
		last_interrupt = HAL_GetTick();
 8001608:	f001 fa96 	bl	8002b38 <HAL_GetTick>
 800160c:	4603      	mov	r3, r0
 800160e:	4a5f      	ldr	r2, [pc, #380]	; (800178c <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001610:	6013      	str	r3, [r2, #0]

	// Press any key to finish calibrating
	if (calibrating == 1){
 8001612:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d11b      	bne.n	8001652 <HAL_GPIO_EXTI_Callback+0x7a>
		treshhold = env_light+calib_input;
 800161a:	4b5e      	ldr	r3, [pc, #376]	; (8001794 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a5d      	ldr	r2, [pc, #372]	; (800179c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001626:	6013      	str	r3, [r2, #0]
		sprintf(message, "threshold=%d\n", treshhold);
 8001628:	4b5c      	ldr	r3, [pc, #368]	; (800179c <HAL_GPIO_EXTI_Callback+0x1c4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	495c      	ldr	r1, [pc, #368]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001630:	485c      	ldr	r0, [pc, #368]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001632:	f007 fe8f 	bl	8009354 <siprintf>
		HAL_UART_Transmit(&huart2, message, strlen(message), 1000);
 8001636:	485b      	ldr	r0, [pc, #364]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001638:	f7fe fdca 	bl	80001d0 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001644:	4957      	ldr	r1, [pc, #348]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001646:	4858      	ldr	r0, [pc, #352]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001648:	f006 fafc 	bl	8007c44 <HAL_UART_Transmit>
		End_Calibrate();
 800164c:	f000 f8b8 	bl	80017c0 <End_Calibrate>
		return;
 8001650:	e099      	b.n	8001786 <HAL_GPIO_EXTI_Callback+0x1ae>
	}
	if (GPIO_Pin == GPIO_PIN_7){
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	2b80      	cmp	r3, #128	; 0x80
 8001656:	d10c      	bne.n	8001672 <HAL_GPIO_EXTI_Callback+0x9a>
		if (selected == 1)
 8001658:	4b54      	ldr	r3, [pc, #336]	; (80017ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d103      	bne.n	8001668 <HAL_GPIO_EXTI_Callback+0x90>
		  selected = 3;
 8001660:	4b52      	ldr	r3, [pc, #328]	; (80017ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001662:	2203      	movs	r2, #3
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e004      	b.n	8001672 <HAL_GPIO_EXTI_Callback+0x9a>
		else
		  selected -= 1;
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3b01      	subs	r3, #1
 800166e:	4a4f      	ldr	r2, [pc, #316]	; (80017ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001670:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == GPIO_PIN_8){
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001678:	d144      	bne.n	8001704 <HAL_GPIO_EXTI_Callback+0x12c>
		writeLog(DIGIT_CHANGED, 0);
 800167a:	2100      	movs	r1, #0
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff fa9d 	bl	8000bbc <writeLog>
		writeLog(DIGIT_INCREASED, selected);
 8001682:	4b4a      	ldr	r3, [pc, #296]	; (80017ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff fa97 	bl	8000bbc <writeLog>
		if (selected == 1){
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10c      	bne.n	80016b0 <HAL_GPIO_EXTI_Callback+0xd8>
			setWarnnum((warnnum < 3 ? warnnum + 1 : 1));
 8001696:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b02      	cmp	r3, #2
 800169c:	dc03      	bgt.n	80016a6 <HAL_GPIO_EXTI_Callback+0xce>
 800169e:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0xd0>
 80016a6:	2301      	movs	r3, #1
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fe5d 	bl	8001368 <setWarnnum>
 80016ae:	e029      	b.n	8001704 <HAL_GPIO_EXTI_Callback+0x12c>
		}
		else if (selected == 2){
 80016b0:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d110      	bne.n	80016da <HAL_GPIO_EXTI_Callback+0x102>
			setLights((lights + 1) % 5);
 80016b8:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	4b3e      	ldr	r3, [pc, #248]	; (80017b8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80016c0:	fb83 1302 	smull	r1, r3, r3, r2
 80016c4:	1059      	asrs	r1, r3, #1
 80016c6:	17d3      	asrs	r3, r2, #31
 80016c8:	1ac9      	subs	r1, r1, r3
 80016ca:	460b      	mov	r3, r1
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	1ad1      	subs	r1, r2, r3
 80016d2:	4608      	mov	r0, r1
 80016d4:	f7ff fe2c 	bl	8001330 <setLights>
 80016d8:	e014      	b.n	8001704 <HAL_GPIO_EXTI_Callback+0x12c>
		}
		else if (selected == 3){
 80016da:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d110      	bne.n	8001704 <HAL_GPIO_EXTI_Callback+0x12c>
			setDimstep((dimstep + 1) % 10);
 80016e2:	4b36      	ldr	r3, [pc, #216]	; (80017bc <HAL_GPIO_EXTI_Callback+0x1e4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80016ea:	fb83 1302 	smull	r1, r3, r3, r2
 80016ee:	1099      	asrs	r1, r3, #2
 80016f0:	17d3      	asrs	r3, r2, #31
 80016f2:	1ac9      	subs	r1, r1, r3
 80016f4:	460b      	mov	r3, r1
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	1ad1      	subs	r1, r2, r3
 80016fe:	4608      	mov	r0, r1
 8001700:	f7ff fdec 	bl	80012dc <setDimstep>
		}
	}
	if (GPIO_Pin == GPIO_PIN_9){
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170a:	d13c      	bne.n	8001786 <HAL_GPIO_EXTI_Callback+0x1ae>
		writeLog(DIGIT_CHANGED, 0);
 800170c:	2100      	movs	r1, #0
 800170e:	2000      	movs	r0, #0
 8001710:	f7ff fa54 	bl	8000bbc <writeLog>
		writeLog(DIGIT_DECREASED, selected);
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	2002      	movs	r0, #2
 800171c:	f7ff fa4e 	bl	8000bbc <writeLog>
		if (selected == 1){
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d10b      	bne.n	8001740 <HAL_GPIO_EXTI_Callback+0x168>
			warnnum = warnnum >  1 ? warnnum - 1 : 3;
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	dd03      	ble.n	8001738 <HAL_GPIO_EXTI_Callback+0x160>
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3b01      	subs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_GPIO_EXTI_Callback+0x162>
 8001738:	2303      	movs	r3, #3
 800173a:	4a1d      	ldr	r2, [pc, #116]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e022      	b.n	8001786 <HAL_GPIO_EXTI_Callback+0x1ae>
		}
		else if (selected == 2){
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d10c      	bne.n	8001762 <HAL_GPIO_EXTI_Callback+0x18a>
			setLights(lights > 0 ? lights - 1 : 4);
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	dd03      	ble.n	8001758 <HAL_GPIO_EXTI_Callback+0x180>
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3b01      	subs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_GPIO_EXTI_Callback+0x182>
 8001758:	2304      	movs	r3, #4
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fde8 	bl	8001330 <setLights>
 8001760:	e011      	b.n	8001786 <HAL_GPIO_EXTI_Callback+0x1ae>
		}
		else if (selected == 3){
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d10d      	bne.n	8001786 <HAL_GPIO_EXTI_Callback+0x1ae>
			setDimstep(dimstep > 0 ? dimstep - 1 : 9);
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_GPIO_EXTI_Callback+0x1e4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	dd03      	ble.n	800177a <HAL_GPIO_EXTI_Callback+0x1a2>
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3b01      	subs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_GPIO_EXTI_Callback+0x1a4>
 800177a:	2309      	movs	r3, #9
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fdad 	bl	80012dc <setDimstep>
 8001782:	e000      	b.n	8001786 <HAL_GPIO_EXTI_Callback+0x1ae>
		return;
 8001784:	bf00      	nop
		}
	}
}
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20001070 	.word	0x20001070
 8001790:	2000001c 	.word	0x2000001c
 8001794:	20000018 	.word	0x20000018
 8001798:	2000070c 	.word	0x2000070c
 800179c:	20000704 	.word	0x20000704
 80017a0:	0800ae9c 	.word	0x0800ae9c
 80017a4:	200006d0 	.word	0x200006d0
 80017a8:	200002f0 	.word	0x200002f0
 80017ac:	20000024 	.word	0x20000024
 80017b0:	20000014 	.word	0x20000014
 80017b4:	20000010 	.word	0x20000010
 80017b8:	66666667 	.word	0x66666667
 80017bc:	2000000c 	.word	0x2000000c

080017c0 <End_Calibrate>:
void End_Calibrate(){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	// Turn on lights
	setDimstep(dimstep);
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <End_Calibrate+0x48>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fd87 	bl	80012dc <setDimstep>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017ce:	2100      	movs	r1, #0
 80017d0:	480e      	ldr	r0, [pc, #56]	; (800180c <End_Calibrate+0x4c>)
 80017d2:	f004 ffeb 	bl	80067ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017d6:	2104      	movs	r1, #4
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <End_Calibrate+0x4c>)
 80017da:	f004 ffe7 	bl	80067ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80017de:	2108      	movs	r1, #8
 80017e0:	480a      	ldr	r0, [pc, #40]	; (800180c <End_Calibrate+0x4c>)
 80017e2:	f004 ffe3 	bl	80067ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80017e6:	210c      	movs	r1, #12
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <End_Calibrate+0x4c>)
 80017ea:	f004 ffdf 	bl	80067ac <HAL_TIM_PWM_Start>
	// Turn on UART Receive
	HAL_UART_Receive_IT(&huart2, in_data, 8);
 80017ee:	2208      	movs	r2, #8
 80017f0:	4907      	ldr	r1, [pc, #28]	; (8001810 <End_Calibrate+0x50>)
 80017f2:	4808      	ldr	r0, [pc, #32]	; (8001814 <End_Calibrate+0x54>)
 80017f4:	f006 fb66 	bl	8007ec4 <HAL_UART_Receive_IT>
	// Restart ADC1 (LDR)
	HAL_ADC_Start_IT(&hadc1);
 80017f8:	4807      	ldr	r0, [pc, #28]	; (8001818 <End_Calibrate+0x58>)
 80017fa:	f001 fbc1 	bl	8002f80 <HAL_ADC_Start_IT>

	calibrating = 0;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <End_Calibrate+0x5c>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000000c 	.word	0x2000000c
 800180c:	2000020c 	.word	0x2000020c
 8001810:	2000066c 	.word	0x2000066c
 8001814:	200002f0 	.word	0x200002f0
 8001818:	200000b4 	.word	0x200000b4
 800181c:	2000001c 	.word	0x2000001c

08001820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	double f = 0;
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i = 0; i < 200; ++i) {
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e040      	b.n	80018ba <main+0x9a>
		sinusoid[i].frequency = round(sin(f) * 2000 + 2000);
 8001838:	ed97 0b04 	vldr	d0, [r7, #16]
 800183c:	f008 fa40 	bl	8009cc0 <sin>
 8001840:	ec51 0b10 	vmov	r0, r1, d0
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	4b92      	ldr	r3, [pc, #584]	; (8001a94 <main+0x274>)
 800184a:	f7fe fed5 	bl	80005f8 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	4b8e      	ldr	r3, [pc, #568]	; (8001a94 <main+0x274>)
 800185c:	f7fe fd16 	bl	800028c <__adddf3>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	ec43 2b17 	vmov	d7, r2, r3
 8001868:	eeb0 0a47 	vmov.f32	s0, s14
 800186c:	eef0 0a67 	vmov.f32	s1, s15
 8001870:	f008 f9de 	bl	8009c30 <round>
 8001874:	ec53 2b10 	vmov	r2, r3, d0
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f97e 	bl	8000b7c <__aeabi_d2uiz>
 8001880:	4603      	mov	r3, r0
 8001882:	b299      	uxth	r1, r3
 8001884:	4a84      	ldr	r2, [pc, #528]	; (8001a98 <main+0x278>)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		sinusoid[i].duration = 5;
 800188c:	4a82      	ldr	r2, [pc, #520]	; (8001a98 <main+0x278>)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	2205      	movs	r2, #5
 8001896:	805a      	strh	r2, [r3, #2]
		f += step;
 8001898:	4b80      	ldr	r3, [pc, #512]	; (8001a9c <main+0x27c>)
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe54 	bl	8000548 <__aeabi_f2d>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018a8:	f7fe fcf0 	bl	800028c <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i = 0; i < 200; ++i) {
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3301      	adds	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2bc7      	cmp	r3, #199	; 0xc7
 80018be:	ddbb      	ble.n	8001838 <main+0x18>
	}

	for(int i = 0; i < 200; ++i) {
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	e013      	b.n	80018ee <main+0xce>
		ramp[i].frequency = i * 20;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	0092      	lsls	r2, r2, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	b299      	uxth	r1, r3
 80018d4:	4a72      	ldr	r2, [pc, #456]	; (8001aa0 <main+0x280>)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		ramp[i].duration = 5;
 80018dc:	4a70      	ldr	r2, [pc, #448]	; (8001aa0 <main+0x280>)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	2205      	movs	r2, #5
 80018e6:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i < 200; ++i) {
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3301      	adds	r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2bc7      	cmp	r3, #199	; 0xc7
 80018f2:	dde8      	ble.n	80018c6 <main+0xa6>
	}

	for(int i = 0; i < 200; ++i) {
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	e013      	b.n	8001922 <main+0x102>
		ustep[i].frequency = (i < 100) ? 10 : 4000;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b63      	cmp	r3, #99	; 0x63
 80018fe:	dc01      	bgt.n	8001904 <main+0xe4>
 8001900:	210a      	movs	r1, #10
 8001902:	e001      	b.n	8001908 <main+0xe8>
 8001904:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001908:	4a66      	ldr	r2, [pc, #408]	; (8001aa4 <main+0x284>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		ustep[i].duration = 5;
 8001910:	4a64      	ldr	r2, [pc, #400]	; (8001aa4 <main+0x284>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	2205      	movs	r2, #5
 800191a:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i < 200; ++i) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3301      	adds	r3, #1
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2bc7      	cmp	r3, #199	; 0xc7
 8001926:	dde8      	ble.n	80018fa <main+0xda>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001928:	f001 f8ac 	bl	8002a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192c:	f000 f8d6 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001930:	f000 fc50 	bl	80021d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001934:	f000 fa06 	bl	8001d44 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001938:	f000 fa44 	bl	8001dc4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800193c:	f000 fc28 	bl	8002190 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8001940:	f000 f932 	bl	8001ba8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001944:	f000 fbf4 	bl	8002130 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001948:	f000 fa7a 	bl	8001e40 <MX_TIM1_Init>
  MX_TIM2_Init();
 800194c:	f000 fb48 	bl	8001fe0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001950:	f000 fba0 	bl	8002094 <MX_TIM3_Init>
  MX_ADC4_Init();
 8001954:	f000 f998 	bl	8001c88 <MX_ADC4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  HAL_ADC_Start_IT(&hadc1);
 8001958:	4853      	ldr	r0, [pc, #332]	; (8001aa8 <main+0x288>)
 800195a:	f001 fb11 	bl	8002f80 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc4);
 800195e:	4853      	ldr	r0, [pc, #332]	; (8001aac <main+0x28c>)
 8001960:	f001 fb0e 	bl	8002f80 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001964:	4852      	ldr	r0, [pc, #328]	; (8001ab0 <main+0x290>)
 8001966:	f004 fe5f 	bl	8006628 <HAL_TIM_Base_Start_IT>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (calibrating == 1){
 800196a:	4b52      	ldr	r3, [pc, #328]	; (8001ab4 <main+0x294>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d15a      	bne.n	8001a28 <main+0x208>
		  display_digit(calib_input % 10, 0, 2, 0);
 8001972:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <main+0x298>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b51      	ldr	r3, [pc, #324]	; (8001abc <main+0x29c>)
 8001978:	fb83 1302 	smull	r1, r3, r3, r2
 800197c:	1099      	asrs	r1, r3, #2
 800197e:	17d3      	asrs	r3, r2, #31
 8001980:	1ac8      	subs	r0, r1, r3
 8001982:	4603      	mov	r3, r0
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4403      	add	r3, r0
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	1ad0      	subs	r0, r2, r3
 800198c:	2300      	movs	r3, #0
 800198e:	2202      	movs	r2, #2
 8001990:	2100      	movs	r1, #0
 8001992:	f7ff fd7d 	bl	8001490 <display_digit>
		  display_digit((calib_input / 10) % 10, 1, 2, 0);
 8001996:	4b48      	ldr	r3, [pc, #288]	; (8001ab8 <main+0x298>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a48      	ldr	r2, [pc, #288]	; (8001abc <main+0x29c>)
 800199c:	fb82 1203 	smull	r1, r2, r2, r3
 80019a0:	1092      	asrs	r2, r2, #2
 80019a2:	17db      	asrs	r3, r3, #31
 80019a4:	1ad2      	subs	r2, r2, r3
 80019a6:	4b45      	ldr	r3, [pc, #276]	; (8001abc <main+0x29c>)
 80019a8:	fb83 1302 	smull	r1, r3, r3, r2
 80019ac:	1099      	asrs	r1, r3, #2
 80019ae:	17d3      	asrs	r3, r2, #31
 80019b0:	1ac8      	subs	r0, r1, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4403      	add	r3, r0
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	1ad0      	subs	r0, r2, r3
 80019bc:	2300      	movs	r3, #0
 80019be:	2202      	movs	r2, #2
 80019c0:	2101      	movs	r1, #1
 80019c2:	f7ff fd65 	bl	8001490 <display_digit>
		  display_digit((calib_input / 100) % 10, 2, 2, 0);
 80019c6:	4b3c      	ldr	r3, [pc, #240]	; (8001ab8 <main+0x298>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a3d      	ldr	r2, [pc, #244]	; (8001ac0 <main+0x2a0>)
 80019cc:	fb82 1203 	smull	r1, r2, r2, r3
 80019d0:	1152      	asrs	r2, r2, #5
 80019d2:	17db      	asrs	r3, r3, #31
 80019d4:	1ad2      	subs	r2, r2, r3
 80019d6:	4b39      	ldr	r3, [pc, #228]	; (8001abc <main+0x29c>)
 80019d8:	fb83 1302 	smull	r1, r3, r3, r2
 80019dc:	1099      	asrs	r1, r3, #2
 80019de:	17d3      	asrs	r3, r2, #31
 80019e0:	1ac8      	subs	r0, r1, r3
 80019e2:	4603      	mov	r3, r0
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4403      	add	r3, r0
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	1ad0      	subs	r0, r2, r3
 80019ec:	2300      	movs	r3, #0
 80019ee:	2202      	movs	r2, #2
 80019f0:	2102      	movs	r1, #2
 80019f2:	f7ff fd4d 	bl	8001490 <display_digit>
		  display_digit((calib_input / 1000) % 10, 3, 2, 0);
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <main+0x298>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a32      	ldr	r2, [pc, #200]	; (8001ac4 <main+0x2a4>)
 80019fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001a00:	1192      	asrs	r2, r2, #6
 8001a02:	17db      	asrs	r3, r3, #31
 8001a04:	1ad2      	subs	r2, r2, r3
 8001a06:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <main+0x29c>)
 8001a08:	fb83 1302 	smull	r1, r3, r3, r2
 8001a0c:	1099      	asrs	r1, r3, #2
 8001a0e:	17d3      	asrs	r3, r2, #31
 8001a10:	1ac8      	subs	r0, r1, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4403      	add	r3, r0
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	1ad0      	subs	r0, r2, r3
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	2202      	movs	r2, #2
 8001a20:	2103      	movs	r1, #3
 8001a22:	f7ff fd35 	bl	8001490 <display_digit>
 8001a26:	e7a0      	b.n	800196a <main+0x14a>
	  }
	  else{
		  display_digit(warncount, 0, 2, selected == 0);
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <main+0x2a8>)
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <main+0x2ac>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	f7ff fd27 	bl	8001490 <display_digit>
		  display_digit(warnnum, 1, 2, selected == 1);
 8001a42:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <main+0x2b0>)
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <main+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2202      	movs	r2, #2
 8001a56:	2101      	movs	r1, #1
 8001a58:	f7ff fd1a 	bl	8001490 <display_digit>
		  display_digit(lights, 2, 2, selected == 2);
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <main+0x2b4>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <main+0x2ac>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2202      	movs	r2, #2
 8001a70:	2102      	movs	r1, #2
 8001a72:	f7ff fd0d 	bl	8001490 <display_digit>
		  display_digit(dimstep, 3, 2, selected == 3);
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <main+0x2b8>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <main+0x2ac>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	bf0c      	ite	eq
 8001a82:	2301      	moveq	r3, #1
 8001a84:	2300      	movne	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2202      	movs	r2, #2
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	f7ff fd00 	bl	8001490 <display_digit>
	  if (calibrating == 1){
 8001a90:	e76b      	b.n	800196a <main+0x14a>
 8001a92:	bf00      	nop
 8001a94:	409f4000 	.word	0x409f4000
 8001a98:	20000710 	.word	0x20000710
 8001a9c:	3d00ad04 	.word	0x3d00ad04
 8001aa0:	20000a30 	.word	0x20000a30
 8001aa4:	20000d50 	.word	0x20000d50
 8001aa8:	200000b4 	.word	0x200000b4
 8001aac:	20000104 	.word	0x20000104
 8001ab0:	200002a4 	.word	0x200002a4
 8001ab4:	2000001c 	.word	0x2000001c
 8001ab8:	2000070c 	.word	0x2000070c
 8001abc:	66666667 	.word	0x66666667
 8001ac0:	51eb851f 	.word	0x51eb851f
 8001ac4:	10624dd3 	.word	0x10624dd3
 8001ac8:	20000668 	.word	0x20000668
 8001acc:	20000024 	.word	0x20000024
 8001ad0:	20000014 	.word	0x20000014
 8001ad4:	20000010 	.word	0x20000010
 8001ad8:	2000000c 	.word	0x2000000c

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b09e      	sub	sp, #120	; 0x78
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ae6:	2228      	movs	r2, #40	; 0x28
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f007 fc2a 	bl	8009344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b00:	463b      	mov	r3, r7
 8001b02:	223c      	movs	r2, #60	; 0x3c
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f007 fc1c 	bl	8009344 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b1e:	2310      	movs	r3, #16
 8001b20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b22:	2302      	movs	r3, #2
 8001b24:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b2a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001b2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b30:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 f850 	bl	8004bdc <HAL_RCC_OscConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001b42:	f000 fc13 	bl	800236c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b46:	230f      	movs	r3, #15
 8001b48:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b60:	2101      	movs	r1, #1
 8001b62:	4618      	mov	r0, r3
 8001b64:	f004 f878 	bl	8005c58 <HAL_RCC_ClockConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b6e:	f000 fbfd 	bl	800236c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <SystemClock_Config+0xc8>)
 8001b74:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001b7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b88:	463b      	mov	r3, r7
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 fa9a 	bl	80060c4 <HAL_RCCEx_PeriphCLKConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001b96:	f000 fbe9 	bl	800236c <Error_Handler>
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	3778      	adds	r7, #120	; 0x78
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	00021022 	.word	0x00021022

08001ba8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
 8001bc8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bca:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001bcc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001bd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bd2:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001bd4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bda:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001be6:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001c16:	2204      	movs	r2, #4
 8001c18:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c26:	4817      	ldr	r0, [pc, #92]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001c28:	f000 ffca 	bl	8002bc0 <HAL_ADC_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c32:	f000 fb9b 	bl	800236c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4810      	ldr	r0, [pc, #64]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001c42:	f002 f8e5 	bl	8003e10 <HAL_ADCEx_MultiModeConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001c4c:	f000 fb8e 	bl	800236c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_ADC1_Init+0xdc>)
 8001c6e:	f001 fde3 	bl	8003838 <HAL_ADC_ConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001c78:	f000 fb78 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	3728      	adds	r7, #40	; 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200000b4 	.word	0x200000b4

08001c88 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c8e:	463b      	mov	r3, r7
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
 8001c9c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001ca0:	4a27      	ldr	r2, [pc, #156]	; (8001d40 <MX_ADC4_Init+0xb8>)
 8001ca2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001ca6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001caa:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_10B;
 8001cac:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001cae:	2208      	movs	r2, #8
 8001cb0:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001cb8:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001ce8:	2204      	movs	r2, #4
 8001cea:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001cf8:	4810      	ldr	r0, [pc, #64]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001cfa:	f000 ff61 	bl	8002bc0 <HAL_ADC_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 8001d04:	f000 fb32 	bl	800236c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8001d14:	2307      	movs	r3, #7
 8001d16:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001d20:	463b      	mov	r3, r7
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_ADC4_Init+0xb4>)
 8001d26:	f001 fd87 	bl	8003838 <HAL_ADC_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 8001d30:	f000 fb1c 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000104 	.word	0x20000104
 8001d40:	50000500 	.word	0x50000500

08001d44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <MX_I2C1_Init+0x74>)
 8001d4a:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <MX_I2C1_Init+0x78>)
 8001d4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <MX_I2C1_Init+0x74>)
 8001d50:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <MX_I2C1_Init+0x7c>)
 8001d52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <MX_I2C1_Init+0x74>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <MX_I2C1_Init+0x74>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <MX_I2C1_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <MX_I2C1_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <MX_I2C1_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <MX_I2C1_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <MX_I2C1_Init+0x74>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d7e:	480e      	ldr	r0, [pc, #56]	; (8001db8 <MX_I2C1_Init+0x74>)
 8001d80:	f002 fd34 	bl	80047ec <HAL_I2C_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d8a:	f000 faef 	bl	800236c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <MX_I2C1_Init+0x74>)
 8001d92:	f002 fdba 	bl	800490a <HAL_I2CEx_ConfigAnalogFilter>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d9c:	f000 fae6 	bl	800236c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001da0:	2100      	movs	r1, #0
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_I2C1_Init+0x74>)
 8001da4:	f002 fdfc 	bl	80049a0 <HAL_I2CEx_ConfigDigitalFilter>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dae:	f000 fadd 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000154 	.word	0x20000154
 8001dbc:	40005400 	.word	0x40005400
 8001dc0:	2000090e 	.word	0x2000090e

08001dc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <MX_SPI1_Init+0x78>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001dd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001dde:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001de2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001e12:	2207      	movs	r2, #7
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001e1e:	2208      	movs	r2, #8
 8001e20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001e24:	f004 fafe 	bl	8006424 <HAL_SPI_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e2e:	f000 fa9d 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200001a8 	.word	0x200001a8
 8001e3c:	40013000 	.word	0x40013000

08001e40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b09a      	sub	sp, #104	; 0x68
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
 8001e70:	615a      	str	r2, [r3, #20]
 8001e72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	222c      	movs	r2, #44	; 0x2c
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f007 fa62 	bl	8009344 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e80:	4b55      	ldr	r3, [pc, #340]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001e82:	4a56      	ldr	r2, [pc, #344]	; (8001fdc <MX_TIM1_Init+0x19c>)
 8001e84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 8001e86:	4b54      	ldr	r3, [pc, #336]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001e88:	f240 12df 	movw	r2, #479	; 0x1df
 8001e8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8e:	4b52      	ldr	r3, [pc, #328]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8001e94:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001e96:	2209      	movs	r2, #9
 8001e98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9a:	4b4f      	ldr	r3, [pc, #316]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ea0:	4b4d      	ldr	r3, [pc, #308]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea6:	4b4c      	ldr	r3, [pc, #304]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eac:	484a      	ldr	r0, [pc, #296]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001eae:	f004 fb64 	bl	800657a <HAL_TIM_Base_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001eb8:	f000 fa58 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ec2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4843      	ldr	r0, [pc, #268]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001eca:	f005 f839 	bl	8006f40 <HAL_TIM_ConfigClockSource>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ed4:	f000 fa4a 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ed8:	483f      	ldr	r0, [pc, #252]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001eda:	f004 fc0f 	bl	80066fc <HAL_TIM_PWM_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ee4:	f000 fa42 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4837      	ldr	r0, [pc, #220]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001efc:	f005 fd38 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001f06:	f000 fa31 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0a:	2360      	movs	r3, #96	; 0x60
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f12:	2300      	movs	r3, #0
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f16:	2300      	movs	r3, #0
 8001f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	482a      	ldr	r0, [pc, #168]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001f30:	f004 fef2 	bl	8006d18 <HAL_TIM_PWM_ConfigChannel>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001f3a:	f000 fa17 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f42:	2204      	movs	r2, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4824      	ldr	r0, [pc, #144]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001f48:	f004 fee6 	bl	8006d18 <HAL_TIM_PWM_ConfigChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001f52:	f000 fa0b 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	481e      	ldr	r0, [pc, #120]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001f60:	f004 feda 	bl	8006d18 <HAL_TIM_PWM_ConfigChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001f6a:	f000 f9ff 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f72:	220c      	movs	r2, #12
 8001f74:	4619      	mov	r1, r3
 8001f76:	4818      	ldr	r0, [pc, #96]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001f78:	f004 fece 	bl	8006d18 <HAL_TIM_PWM_ConfigChannel>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001f82:	f000 f9f3 	bl	800236c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4807      	ldr	r0, [pc, #28]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001fbc:	f005 fd58 	bl	8007a70 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001fc6:	f000 f9d1 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fca:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <MX_TIM1_Init+0x198>)
 8001fcc:	f000 fb72 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8001fd0:	bf00      	nop
 8001fd2:	3768      	adds	r7, #104	; 0x68
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000020c 	.word	0x2000020c
 8001fdc:	40012c00 	.word	0x40012c00

08001fe0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
 8002000:	615a      	str	r2, [r3, #20]
 8002002:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002004:	4b22      	ldr	r3, [pc, #136]	; (8002090 <MX_TIM2_Init+0xb0>)
 8002006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800200a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800200c:	4b20      	ldr	r3, [pc, #128]	; (8002090 <MX_TIM2_Init+0xb0>)
 800200e:	2200      	movs	r2, #0
 8002010:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002012:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <MX_TIM2_Init+0xb0>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <MX_TIM2_Init+0xb0>)
 800201a:	f04f 32ff 	mov.w	r2, #4294967295
 800201e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <MX_TIM2_Init+0xb0>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <MX_TIM2_Init+0xb0>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800202c:	4818      	ldr	r0, [pc, #96]	; (8002090 <MX_TIM2_Init+0xb0>)
 800202e:	f004 fb65 	bl	80066fc <HAL_TIM_PWM_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002038:	f000 f998 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	4619      	mov	r1, r3
 800204a:	4811      	ldr	r0, [pc, #68]	; (8002090 <MX_TIM2_Init+0xb0>)
 800204c:	f005 fc90 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002056:	f000 f989 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800205a:	2360      	movs	r3, #96	; 0x60
 800205c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800206a:	463b      	mov	r3, r7
 800206c:	220c      	movs	r2, #12
 800206e:	4619      	mov	r1, r3
 8002070:	4807      	ldr	r0, [pc, #28]	; (8002090 <MX_TIM2_Init+0xb0>)
 8002072:	f004 fe51 	bl	8006d18 <HAL_TIM_PWM_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800207c:	f000 f976 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002080:	4803      	ldr	r0, [pc, #12]	; (8002090 <MX_TIM2_Init+0xb0>)
 8002082:	f000 fb17 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	; 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000258 	.word	0x20000258

08002094 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <MX_TIM3_Init+0x94>)
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <MX_TIM3_Init+0x98>)
 80020b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <MX_TIM3_Init+0x94>)
 80020ba:	222f      	movs	r2, #47	; 0x2f
 80020bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <MX_TIM3_Init+0x94>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <MX_TIM3_Init+0x94>)
 80020c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <MX_TIM3_Init+0x94>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_TIM3_Init+0x94>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020d8:	4813      	ldr	r0, [pc, #76]	; (8002128 <MX_TIM3_Init+0x94>)
 80020da:	f004 fa4e 	bl	800657a <HAL_TIM_Base_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80020e4:	f000 f942 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020ee:	f107 0310 	add.w	r3, r7, #16
 80020f2:	4619      	mov	r1, r3
 80020f4:	480c      	ldr	r0, [pc, #48]	; (8002128 <MX_TIM3_Init+0x94>)
 80020f6:	f004 ff23 	bl	8006f40 <HAL_TIM_ConfigClockSource>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002100:	f000 f934 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002104:	2300      	movs	r3, #0
 8002106:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_TIM3_Init+0x94>)
 8002112:	f005 fc2d 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800211c:	f000 f926 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200002a4 	.word	0x200002a4
 800212c:	40000400 	.word	0x40000400

08002130 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <MX_USART2_UART_Init+0x58>)
 8002136:	4a15      	ldr	r2, [pc, #84]	; (800218c <MX_USART2_UART_Init+0x5c>)
 8002138:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <MX_USART2_UART_Init+0x58>)
 800213c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002140:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_USART2_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_USART2_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_USART2_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_USART2_UART_Init+0x58>)
 8002156:	220c      	movs	r2, #12
 8002158:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <MX_USART2_UART_Init+0x58>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_USART2_UART_Init+0x58>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <MX_USART2_UART_Init+0x58>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <MX_USART2_UART_Init+0x58>)
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_USART2_UART_Init+0x58>)
 8002174:	f005 fd18 	bl	8007ba8 <HAL_UART_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800217e:	f000 f8f5 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200002f0 	.word	0x200002f0
 800218c:	40004400 	.word	0x40004400

08002190 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <MX_USB_PCD_Init+0x3c>)
 8002196:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <MX_USB_PCD_Init+0x40>)
 8002198:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <MX_USB_PCD_Init+0x3c>)
 800219c:	2208      	movs	r2, #8
 800219e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <MX_USB_PCD_Init+0x3c>)
 80021a2:	2202      	movs	r2, #2
 80021a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <MX_USB_PCD_Init+0x3c>)
 80021a8:	2202      	movs	r2, #2
 80021aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80021ac:	4b07      	ldr	r3, [pc, #28]	; (80021cc <MX_USB_PCD_Init+0x3c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <MX_USB_PCD_Init+0x3c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80021b8:	4804      	ldr	r0, [pc, #16]	; (80021cc <MX_USB_PCD_Init+0x3c>)
 80021ba:	f002 fc3d 	bl	8004a38 <HAL_PCD_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80021c4:	f000 f8d2 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000378 	.word	0x20000378
 80021d0:	40005c00 	.word	0x40005c00

080021d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08c      	sub	sp, #48	; 0x30
 80021d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021da:	f107 031c 	add.w	r3, r7, #28
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ea:	4b5c      	ldr	r3, [pc, #368]	; (800235c <MX_GPIO_Init+0x188>)
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	4a5b      	ldr	r2, [pc, #364]	; (800235c <MX_GPIO_Init+0x188>)
 80021f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021f4:	6153      	str	r3, [r2, #20]
 80021f6:	4b59      	ldr	r3, [pc, #356]	; (800235c <MX_GPIO_Init+0x188>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002202:	4b56      	ldr	r3, [pc, #344]	; (800235c <MX_GPIO_Init+0x188>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	4a55      	ldr	r2, [pc, #340]	; (800235c <MX_GPIO_Init+0x188>)
 8002208:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800220c:	6153      	str	r3, [r2, #20]
 800220e:	4b53      	ldr	r3, [pc, #332]	; (800235c <MX_GPIO_Init+0x188>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800221a:	4b50      	ldr	r3, [pc, #320]	; (800235c <MX_GPIO_Init+0x188>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	4a4f      	ldr	r2, [pc, #316]	; (800235c <MX_GPIO_Init+0x188>)
 8002220:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002224:	6153      	str	r3, [r2, #20]
 8002226:	4b4d      	ldr	r3, [pc, #308]	; (800235c <MX_GPIO_Init+0x188>)
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	4b4a      	ldr	r3, [pc, #296]	; (800235c <MX_GPIO_Init+0x188>)
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	4a49      	ldr	r2, [pc, #292]	; (800235c <MX_GPIO_Init+0x188>)
 8002238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223c:	6153      	str	r3, [r2, #20]
 800223e:	4b47      	ldr	r3, [pc, #284]	; (800235c <MX_GPIO_Init+0x188>)
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	4b44      	ldr	r3, [pc, #272]	; (800235c <MX_GPIO_Init+0x188>)
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	4a43      	ldr	r2, [pc, #268]	; (800235c <MX_GPIO_Init+0x188>)
 8002250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002254:	6153      	str	r3, [r2, #20]
 8002256:	4b41      	ldr	r3, [pc, #260]	; (800235c <MX_GPIO_Init+0x188>)
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002262:	4b3e      	ldr	r3, [pc, #248]	; (800235c <MX_GPIO_Init+0x188>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4a3d      	ldr	r2, [pc, #244]	; (800235c <MX_GPIO_Init+0x188>)
 8002268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800226c:	6153      	str	r3, [r2, #20]
 800226e:	4b3b      	ldr	r3, [pc, #236]	; (800235c <MX_GPIO_Init+0x188>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|GPIO_PIN_10|LD9_Pin
 800227a:	2200      	movs	r2, #0
 800227c:	f249 5108 	movw	r1, #38152	; 0x9508
 8002280:	4837      	ldr	r0, [pc, #220]	; (8002360 <MX_GPIO_Init+0x18c>)
 8002282:	f002 fa83 	bl	800478c <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800228c:	4835      	ldr	r0, [pc, #212]	; (8002364 <MX_GPIO_Init+0x190>)
 800228e:	f002 fa7d 	bl	800478c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002292:	2200      	movs	r2, #0
 8002294:	2140      	movs	r1, #64	; 0x40
 8002296:	4834      	ldr	r0, [pc, #208]	; (8002368 <MX_GPIO_Init+0x194>)
 8002298:	f002 fa78 	bl	800478c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800229c:	2337      	movs	r3, #55	; 0x37
 800229e:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022a0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80022a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	4619      	mov	r1, r3
 80022b0:	482b      	ldr	r0, [pc, #172]	; (8002360 <MX_GPIO_Init+0x18c>)
 80022b2:	f002 f8f1 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin PE10 LD9_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|GPIO_PIN_10|LD9_Pin
 80022b6:	f249 5308 	movw	r3, #38152	; 0x9508
 80022ba:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022bc:	2301      	movs	r3, #1
 80022be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4619      	mov	r1, r3
 80022ce:	4824      	ldr	r0, [pc, #144]	; (8002360 <MX_GPIO_Init+0x18c>)
 80022d0:	f002 f8e2 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022d4:	2301      	movs	r3, #1
 80022d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4619      	mov	r1, r3
 80022e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ea:	f002 f8d5 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80022ee:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80022f2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	4619      	mov	r1, r3
 8002306:	4817      	ldr	r0, [pc, #92]	; (8002364 <MX_GPIO_Init+0x190>)
 8002308:	f002 f8c6 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800230c:	2340      	movs	r3, #64	; 0x40
 800230e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	4811      	ldr	r0, [pc, #68]	; (8002368 <MX_GPIO_Init+0x194>)
 8002324:	f002 f8b8 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002328:	f44f 7360 	mov.w	r3, #896	; 0x380
 800232c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800232e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002334:	2301      	movs	r3, #1
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002338:	f107 031c 	add.w	r3, r7, #28
 800233c:	4619      	mov	r1, r3
 800233e:	480a      	ldr	r0, [pc, #40]	; (8002368 <MX_GPIO_Init+0x194>)
 8002340:	f002 f8aa 	bl	8004498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	2017      	movs	r0, #23
 800234a:	f001 fff8 	bl	800433e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800234e:	2017      	movs	r0, #23
 8002350:	f002 f811 	bl	8004376 <HAL_NVIC_EnableIRQ>

}
 8002354:	bf00      	nop
 8002356:	3730      	adds	r7, #48	; 0x30
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	48001000 	.word	0x48001000
 8002364:	48000c00 	.word	0x48000c00
 8002368:	48000800 	.word	0x48000800

0800236c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002370:	b672      	cpsid	i
}
 8002372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002374:	e7fe      	b.n	8002374 <Error_Handler+0x8>
	...

08002378 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_MspInit+0x44>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <HAL_MspInit+0x44>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6193      	str	r3, [r2, #24]
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_MspInit+0x44>)
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_MspInit+0x44>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <HAL_MspInit+0x44>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_MspInit+0x44>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80023ae:	2005      	movs	r0, #5
 80023b0:	f001 ffba 	bl	8004328 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	; 0x30
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e0:	d12d      	bne.n	800243e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80023e2:	4b32      	ldr	r3, [pc, #200]	; (80024ac <HAL_ADC_MspInit+0xec>)
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	4a31      	ldr	r2, [pc, #196]	; (80024ac <HAL_ADC_MspInit+0xec>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6153      	str	r3, [r2, #20]
 80023ee:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_ADC_MspInit+0xec>)
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <HAL_ADC_MspInit+0xec>)
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	4a2b      	ldr	r2, [pc, #172]	; (80024ac <HAL_ADC_MspInit+0xec>)
 8002400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002404:	6153      	str	r3, [r2, #20]
 8002406:	4b29      	ldr	r3, [pc, #164]	; (80024ac <HAL_ADC_MspInit+0xec>)
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002412:	2302      	movs	r3, #2
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002416:	2303      	movs	r3, #3
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	f107 031c 	add.w	r3, r7, #28
 8002422:	4619      	mov	r1, r3
 8002424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002428:	f002 f836 	bl	8004498 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	2101      	movs	r1, #1
 8002430:	2012      	movs	r0, #18
 8002432:	f001 ff84 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002436:	2012      	movs	r0, #18
 8002438:	f001 ff9d 	bl	8004376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800243c:	e031      	b.n	80024a2 <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC4)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <HAL_ADC_MspInit+0xf0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d12c      	bne.n	80024a2 <HAL_ADC_MspInit+0xe2>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <HAL_ADC_MspInit+0xec>)
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	4a17      	ldr	r2, [pc, #92]	; (80024ac <HAL_ADC_MspInit+0xec>)
 800244e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002452:	6153      	str	r3, [r2, #20]
 8002454:	4b15      	ldr	r3, [pc, #84]	; (80024ac <HAL_ADC_MspInit+0xec>)
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_ADC_MspInit+0xec>)
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	4a11      	ldr	r2, [pc, #68]	; (80024ac <HAL_ADC_MspInit+0xec>)
 8002466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246a:	6153      	str	r3, [r2, #20]
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <HAL_ADC_MspInit+0xec>)
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800247e:	2303      	movs	r3, #3
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4619      	mov	r1, r3
 800248c:	4809      	ldr	r0, [pc, #36]	; (80024b4 <HAL_ADC_MspInit+0xf4>)
 800248e:	f002 f803 	bl	8004498 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	203d      	movs	r0, #61	; 0x3d
 8002498:	f001 ff51 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 800249c:	203d      	movs	r0, #61	; 0x3d
 800249e:	f001 ff6a 	bl	8004376 <HAL_NVIC_EnableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3730      	adds	r7, #48	; 0x30
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	50000500 	.word	0x50000500
 80024b4:	48000400 	.word	0x48000400

080024b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a17      	ldr	r2, [pc, #92]	; (8002534 <HAL_I2C_MspInit+0x7c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d127      	bne.n	800252a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <HAL_I2C_MspInit+0x80>)
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	4a16      	ldr	r2, [pc, #88]	; (8002538 <HAL_I2C_MspInit+0x80>)
 80024e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e4:	6153      	str	r3, [r2, #20]
 80024e6:	4b14      	ldr	r3, [pc, #80]	; (8002538 <HAL_I2C_MspInit+0x80>)
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80024f2:	23c0      	movs	r3, #192	; 0xc0
 80024f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f6:	2312      	movs	r3, #18
 80024f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024fa:	2301      	movs	r3, #1
 80024fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024fe:	2303      	movs	r3, #3
 8002500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002502:	2304      	movs	r3, #4
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	480b      	ldr	r0, [pc, #44]	; (800253c <HAL_I2C_MspInit+0x84>)
 800250e:	f001 ffc3 	bl	8004498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_I2C_MspInit+0x80>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_I2C_MspInit+0x80>)
 8002518:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800251c:	61d3      	str	r3, [r2, #28]
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_I2C_MspInit+0x80>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800252a:	bf00      	nop
 800252c:	3728      	adds	r7, #40	; 0x28
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40005400 	.word	0x40005400
 8002538:	40021000 	.word	0x40021000
 800253c:	48000400 	.word	0x48000400

08002540 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a17      	ldr	r2, [pc, #92]	; (80025bc <HAL_SPI_MspInit+0x7c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d128      	bne.n	80025b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <HAL_SPI_MspInit+0x80>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <HAL_SPI_MspInit+0x80>)
 8002568:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800256c:	6193      	str	r3, [r2, #24]
 800256e:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_SPI_MspInit+0x80>)
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_SPI_MspInit+0x80>)
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <HAL_SPI_MspInit+0x80>)
 8002580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002584:	6153      	str	r3, [r2, #20]
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_SPI_MspInit+0x80>)
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002592:	23e0      	movs	r3, #224	; 0xe0
 8002594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800259e:	2303      	movs	r3, #3
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025a2:	2305      	movs	r3, #5
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b0:	f001 ff72 	bl	8004498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025b4:	bf00      	nop
 80025b6:	3728      	adds	r7, #40	; 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40013000 	.word	0x40013000
 80025c0:	40021000 	.word	0x40021000

080025c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a26      	ldr	r2, [pc, #152]	; (800266c <HAL_TIM_Base_MspInit+0xa8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d12c      	bne.n	8002630 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <HAL_TIM_Base_MspInit+0xac>)
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	4a25      	ldr	r2, [pc, #148]	; (8002670 <HAL_TIM_Base_MspInit+0xac>)
 80025dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025e0:	6193      	str	r3, [r2, #24]
 80025e2:	4b23      	ldr	r3, [pc, #140]	; (8002670 <HAL_TIM_Base_MspInit+0xac>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	2018      	movs	r0, #24
 80025f4:	f001 fea3 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80025f8:	2018      	movs	r0, #24
 80025fa:	f001 febc 	bl	8004376 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	2019      	movs	r0, #25
 8002604:	f001 fe9b 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002608:	2019      	movs	r0, #25
 800260a:	f001 feb4 	bl	8004376 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2100      	movs	r1, #0
 8002612:	201a      	movs	r0, #26
 8002614:	f001 fe93 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002618:	201a      	movs	r0, #26
 800261a:	f001 feac 	bl	8004376 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	201b      	movs	r0, #27
 8002624:	f001 fe8b 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002628:	201b      	movs	r0, #27
 800262a:	f001 fea4 	bl	8004376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800262e:	e018      	b.n	8002662 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <HAL_TIM_Base_MspInit+0xb0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d113      	bne.n	8002662 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800263a:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <HAL_TIM_Base_MspInit+0xac>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <HAL_TIM_Base_MspInit+0xac>)
 8002640:	f043 0302 	orr.w	r3, r3, #2
 8002644:	61d3      	str	r3, [r2, #28]
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_TIM_Base_MspInit+0xac>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	201d      	movs	r0, #29
 8002658:	f001 fe71 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800265c:	201d      	movs	r0, #29
 800265e:	f001 fe8a 	bl	8004376 <HAL_NVIC_EnableIRQ>
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40012c00 	.word	0x40012c00
 8002670:	40021000 	.word	0x40021000
 8002674:	40000400 	.word	0x40000400

08002678 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002688:	d10b      	bne.n	80026a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_TIM_PWM_MspInit+0x38>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <HAL_TIM_PWM_MspInit+0x38>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	61d3      	str	r3, [r2, #28]
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_TIM_PWM_MspInit+0x38>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000

080026b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a23      	ldr	r2, [pc, #140]	; (8002760 <HAL_TIM_MspPostInit+0xac>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d11d      	bne.n	8002712 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_TIM_MspPostInit+0xb0>)
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	4a22      	ldr	r2, [pc, #136]	; (8002764 <HAL_TIM_MspPostInit+0xb0>)
 80026dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026e0:	6153      	str	r3, [r2, #20]
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_TIM_MspPostInit+0xb0>)
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80026ee:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80026f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002700:	2302      	movs	r3, #2
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4619      	mov	r1, r3
 800270a:	4817      	ldr	r0, [pc, #92]	; (8002768 <HAL_TIM_MspPostInit+0xb4>)
 800270c:	f001 fec4 	bl	8004498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002710:	e021      	b.n	8002756 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271a:	d11c      	bne.n	8002756 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_TIM_MspPostInit+0xb0>)
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	4a10      	ldr	r2, [pc, #64]	; (8002764 <HAL_TIM_MspPostInit+0xb0>)
 8002722:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002726:	6153      	str	r3, [r2, #20]
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_TIM_MspPostInit+0xb0>)
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002746:	2301      	movs	r3, #1
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	4806      	ldr	r0, [pc, #24]	; (800276c <HAL_TIM_MspPostInit+0xb8>)
 8002752:	f001 fea1 	bl	8004498 <HAL_GPIO_Init>
}
 8002756:	bf00      	nop
 8002758:	3728      	adds	r7, #40	; 0x28
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40021000 	.word	0x40021000
 8002768:	48001000 	.word	0x48001000
 800276c:	48000400 	.word	0x48000400

08002770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1b      	ldr	r2, [pc, #108]	; (80027fc <HAL_UART_MspInit+0x8c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d130      	bne.n	80027f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_UART_MspInit+0x90>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a1a      	ldr	r2, [pc, #104]	; (8002800 <HAL_UART_MspInit+0x90>)
 8002798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <HAL_UART_MspInit+0x90>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_UART_MspInit+0x90>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	4a14      	ldr	r2, [pc, #80]	; (8002800 <HAL_UART_MspInit+0x90>)
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b4:	6153      	str	r3, [r2, #20]
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_UART_MspInit+0x90>)
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027c2:	230c      	movs	r3, #12
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ce:	2303      	movs	r3, #3
 80027d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027d2:	2307      	movs	r3, #7
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e0:	f001 fe5a 	bl	8004498 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	2026      	movs	r0, #38	; 0x26
 80027ea:	f001 fda8 	bl	800433e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027ee:	2026      	movs	r0, #38	; 0x26
 80027f0:	f001 fdc1 	bl	8004376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027f4:	bf00      	nop
 80027f6:	3728      	adds	r7, #40	; 0x28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40004400 	.word	0x40004400
 8002800:	40021000 	.word	0x40021000

08002804 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_PCD_MspInit+0x80>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d129      	bne.n	800287a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002826:	4b18      	ldr	r3, [pc, #96]	; (8002888 <HAL_PCD_MspInit+0x84>)
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	4a17      	ldr	r2, [pc, #92]	; (8002888 <HAL_PCD_MspInit+0x84>)
 800282c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002830:	6153      	str	r3, [r2, #20]
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_PCD_MspInit+0x84>)
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800283e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800284c:	2303      	movs	r3, #3
 800284e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002850:	230e      	movs	r3, #14
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	4619      	mov	r1, r3
 800285a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800285e:	f001 fe1b 	bl	8004498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_PCD_MspInit+0x84>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_PCD_MspInit+0x84>)
 8002868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800286c:	61d3      	str	r3, [r2, #28]
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_PCD_MspInit+0x84>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800287a:	bf00      	nop
 800287c:	3728      	adds	r7, #40	; 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40005c00 	.word	0x40005c00
 8002888:	40021000 	.word	0x40021000

0800288c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002890:	e7fe      	b.n	8002890 <NMI_Handler+0x4>

08002892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002896:	e7fe      	b.n	8002896 <HardFault_Handler+0x4>

08002898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800289c:	e7fe      	b.n	800289c <MemManage_Handler+0x4>

0800289e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a2:	e7fe      	b.n	80028a2 <BusFault_Handler+0x4>

080028a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a8:	e7fe      	b.n	80028a8 <UsageFault_Handler+0x4>

080028aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d8:	f000 f91a 	bl	8002b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}

080028e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <ADC1_2_IRQHandler+0x10>)
 80028e6:	f000 fc99 	bl	800321c <HAL_ADC_IRQHandler>
//  HAL_Delay(500);
//  HAL_ADC_Start_IT(&hadc1);
//

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	200000b4 	.word	0x200000b4

080028f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80028f8:	2080      	movs	r0, #128	; 0x80
 80028fa:	f001 ff5f 	bl	80047bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80028fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002902:	f001 ff5b 	bl	80047bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002906:	f44f 7000 	mov.w	r0, #512	; 0x200
 800290a:	f001 ff57 	bl	80047bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800291a:	f004 f8dd 	bl	8006ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000020c 	.word	0x2000020c

08002928 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800292e:	f004 f8d3 	bl	8006ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000020c 	.word	0x2000020c

0800293c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002942:	f004 f8c9 	bl	8006ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	2000020c 	.word	0x2000020c

08002950 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <TIM1_CC_IRQHandler+0x10>)
 8002956:	f004 f8bf 	bl	8006ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000020c 	.word	0x2000020c

08002964 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <TIM3_IRQHandler+0x10>)
 800296a:	f004 f8b5 	bl	8006ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200002a4 	.word	0x200002a4

08002978 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <USART2_IRQHandler+0x10>)
 800297e:	f005 fae5 	bl	8007f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200002f0 	.word	0x200002f0

0800298c <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 interrupt.
  */
void ADC4_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <ADC4_IRQHandler+0x10>)
 8002992:	f000 fc43 	bl	800321c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000104 	.word	0x20000104

080029a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a8:	4a14      	ldr	r2, [pc, #80]	; (80029fc <_sbrk+0x5c>)
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <_sbrk+0x60>)
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b4:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <_sbrk+0x64>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <_sbrk+0x64>)
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <_sbrk+0x68>)
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <_sbrk+0x64>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d207      	bcs.n	80029e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d0:	f006 fc8e 	bl	80092f0 <__errno>
 80029d4:	4603      	mov	r3, r0
 80029d6:	220c      	movs	r2, #12
 80029d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
 80029de:	e009      	b.n	80029f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <_sbrk+0x64>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e6:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <_sbrk+0x64>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <_sbrk+0x64>)
 80029f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029f2:	68fb      	ldr	r3, [r7, #12]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	2000a000 	.word	0x2000a000
 8002a00:	00000400 	.word	0x00000400
 8002a04:	200010b4 	.word	0x200010b4
 8002a08:	200010d0 	.word	0x200010d0

08002a0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <SystemInit+0x20>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <SystemInit+0x20>)
 8002a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a68 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a34:	f7ff ffea 	bl	8002a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a3a:	490d      	ldr	r1, [pc, #52]	; (8002a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <LoopForever+0xe>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a40:	e002      	b.n	8002a48 <LoopCopyDataInit>

08002a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a46:	3304      	adds	r3, #4

08002a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a4c:	d3f9      	bcc.n	8002a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a50:	4c0a      	ldr	r4, [pc, #40]	; (8002a7c <LoopForever+0x16>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a54:	e001      	b.n	8002a5a <LoopFillZerobss>

08002a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a58:	3204      	adds	r2, #4

08002a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a5c:	d3fb      	bcc.n	8002a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a5e:	f006 fc4d 	bl	80092fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a62:	f7fe fedd 	bl	8001820 <main>

08002a66 <LoopForever>:

LoopForever:
    b LoopForever
 8002a66:	e7fe      	b.n	8002a66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a68:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a70:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002a74:	0800b0f8 	.word	0x0800b0f8
  ldr r2, =_sbss
 8002a78:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002a7c:	200010cc 	.word	0x200010cc

08002a80 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a80:	e7fe      	b.n	8002a80 <ADC3_IRQHandler>
	...

08002a84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_Init+0x28>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a07      	ldr	r2, [pc, #28]	; (8002aac <HAL_Init+0x28>)
 8002a8e:	f043 0310 	orr.w	r3, r3, #16
 8002a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a94:	2003      	movs	r0, #3
 8002a96:	f001 fc47 	bl	8004328 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f000 f808 	bl	8002ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aa0:	f7ff fc6a 	bl	8002378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40022000 	.word	0x40022000

08002ab0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_InitTick+0x54>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_InitTick+0x58>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 fc5f 	bl	8004392 <HAL_SYSTICK_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00e      	b.n	8002afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b0f      	cmp	r3, #15
 8002ae2:	d80a      	bhi.n	8002afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	f001 fc27 	bl	800433e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002af0:	4a06      	ldr	r2, [pc, #24]	; (8002b0c <HAL_InitTick+0x5c>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e000      	b.n	8002afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000028 	.word	0x20000028
 8002b08:	20000030 	.word	0x20000030
 8002b0c:	2000002c 	.word	0x2000002c

08002b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_IncTick+0x20>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_IncTick+0x24>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <HAL_IncTick+0x24>)
 8002b22:	6013      	str	r3, [r2, #0]
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000030 	.word	0x20000030
 8002b34:	200010b8 	.word	0x200010b8

08002b38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_GetTick+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	200010b8 	.word	0x200010b8

08002b50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7ff ffee 	bl	8002b38 <HAL_GetTick>
 8002b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d005      	beq.n	8002b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <HAL_Delay+0x44>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b76:	bf00      	nop
 8002b78:	f7ff ffde 	bl	8002b38 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d8f7      	bhi.n	8002b78 <HAL_Delay+0x28>
  {
  }
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000030 	.word	0x20000030

08002b98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b09a      	sub	sp, #104	; 0x68
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e1c9      	b.n	8002f74 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d176      	bne.n	8002ce0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d152      	bne.n	8002ca0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff fbd3 	bl	80023c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d13b      	bne.n	8002ca0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f001 fa47 	bl	80040bc <ADC_Disable>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d12f      	bne.n	8002ca0 <HAL_ADC_Init+0xe0>
 8002c40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d12b      	bne.n	8002ca0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c50:	f023 0302 	bic.w	r3, r3, #2
 8002c54:	f043 0202 	orr.w	r2, r3, #2
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c6a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c7a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c7c:	4b86      	ldr	r3, [pc, #536]	; (8002e98 <HAL_ADC_Init+0x2d8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a86      	ldr	r2, [pc, #536]	; (8002e9c <HAL_ADC_Init+0x2dc>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	0c9a      	lsrs	r2, r3, #18
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c92:	e002      	b.n	8002c9a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f9      	bne.n	8002c94 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cbc:	d110      	bne.n	8002ce0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f023 0312 	bic.w	r3, r3, #18
 8002cc6:	f043 0210 	orr.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 8136 	bne.w	8002f5a <HAL_ADC_Init+0x39a>
 8002cee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 8131 	bne.w	8002f5a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f040 8129 	bne.w	8002f5a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d10:	f043 0202 	orr.w	r2, r3, #2
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d20:	d004      	beq.n	8002d2c <HAL_ADC_Init+0x16c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5e      	ldr	r2, [pc, #376]	; (8002ea0 <HAL_ADC_Init+0x2e0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADC_Init+0x170>
 8002d2c:	4b5d      	ldr	r3, [pc, #372]	; (8002ea4 <HAL_ADC_Init+0x2e4>)
 8002d2e:	e000      	b.n	8002d32 <HAL_ADC_Init+0x172>
 8002d30:	4b5d      	ldr	r3, [pc, #372]	; (8002ea8 <HAL_ADC_Init+0x2e8>)
 8002d32:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d3c:	d102      	bne.n	8002d44 <HAL_ADC_Init+0x184>
 8002d3e:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <HAL_ADC_Init+0x2e0>)
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	e01a      	b.n	8002d7a <HAL_ADC_Init+0x1ba>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a55      	ldr	r2, [pc, #340]	; (8002ea0 <HAL_ADC_Init+0x2e0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d103      	bne.n	8002d56 <HAL_ADC_Init+0x196>
 8002d4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	e011      	b.n	8002d7a <HAL_ADC_Init+0x1ba>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a54      	ldr	r2, [pc, #336]	; (8002eac <HAL_ADC_Init+0x2ec>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d102      	bne.n	8002d66 <HAL_ADC_Init+0x1a6>
 8002d60:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_ADC_Init+0x2f0>)
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e009      	b.n	8002d7a <HAL_ADC_Init+0x1ba>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a51      	ldr	r2, [pc, #324]	; (8002eb0 <HAL_ADC_Init+0x2f0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d102      	bne.n	8002d76 <HAL_ADC_Init+0x1b6>
 8002d70:	4b4e      	ldr	r3, [pc, #312]	; (8002eac <HAL_ADC_Init+0x2ec>)
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e001      	b.n	8002d7a <HAL_ADC_Init+0x1ba>
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d108      	bne.n	8002d9a <HAL_ADC_Init+0x1da>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_Init+0x1da>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_ADC_Init+0x1dc>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d11c      	bne.n	8002dda <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d010      	beq.n	8002dc8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_ADC_Init+0x202>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_Init+0x202>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_ADC_Init+0x204>
 8002dc2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d108      	bne.n	8002dda <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7e5b      	ldrb	r3, [r3, #25]
 8002dde:	035b      	lsls	r3, r3, #13
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002de4:	2a01      	cmp	r2, #1
 8002de6:	d002      	beq.n	8002dee <HAL_ADC_Init+0x22e>
 8002de8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dec:	e000      	b.n	8002df0 <HAL_ADC_Init+0x230>
 8002dee:	2200      	movs	r2, #0
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e00:	4313      	orrs	r3, r2
 8002e02:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d11b      	bne.n	8002e46 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	7e5b      	ldrb	r3, [r3, #25]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	045a      	lsls	r2, r3, #17
 8002e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e26:	663b      	str	r3, [r7, #96]	; 0x60
 8002e28:	e00d      	b.n	8002e46 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e32:	f043 0220 	orr.w	r2, r3, #32
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d03a      	beq.n	8002ec4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_ADC_Init+0x2ec>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_ADC_Init+0x2a2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <HAL_ADC_Init+0x2f0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d128      	bne.n	8002eb4 <HAL_ADC_Init+0x2f4>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002e6a:	d012      	beq.n	8002e92 <HAL_ADC_Init+0x2d2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e74:	d00a      	beq.n	8002e8c <HAL_ADC_Init+0x2cc>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002e7e:	d002      	beq.n	8002e86 <HAL_ADC_Init+0x2c6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	e018      	b.n	8002eb8 <HAL_ADC_Init+0x2f8>
 8002e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e8a:	e015      	b.n	8002eb8 <HAL_ADC_Init+0x2f8>
 8002e8c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002e90:	e012      	b.n	8002eb8 <HAL_ADC_Init+0x2f8>
 8002e92:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002e96:	e00f      	b.n	8002eb8 <HAL_ADC_Init+0x2f8>
 8002e98:	20000028 	.word	0x20000028
 8002e9c:	431bde83 	.word	0x431bde83
 8002ea0:	50000100 	.word	0x50000100
 8002ea4:	50000300 	.word	0x50000300
 8002ea8:	50000700 	.word	0x50000700
 8002eac:	50000400 	.word	0x50000400
 8002eb0:	50000500 	.word	0x50000500
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d114      	bne.n	8002efc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee0:	f023 0302 	bic.w	r3, r3, #2
 8002ee4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7e1b      	ldrb	r3, [r3, #24]
 8002eea:	039a      	lsls	r2, r3, #14
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <HAL_ADC_Init+0x3bc>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d10c      	bne.n	8002f32 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f023 010f 	bic.w	r1, r3, #15
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	1e5a      	subs	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f30:	e007      	b.n	8002f42 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 020f 	bic.w	r2, r2, #15
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f023 0303 	bic.w	r3, r3, #3
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
 8002f58:	e00a      	b.n	8002f70 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f023 0312 	bic.w	r3, r3, #18
 8002f62:	f043 0210 	orr.w	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002f70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3768      	adds	r7, #104	; 0x68
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	fff0c007 	.word	0xfff0c007

08002f80 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 8123 	bne.w	80031e2 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_Start_IT+0x2a>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e11e      	b.n	80031e8 <HAL_ADC_Start_IT+0x268>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f001 f81e 	bl	8003ff4 <ADC_Enable>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f040 810a 	bne.w	80031d8 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe0:	d004      	beq.n	8002fec <HAL_ADC_Start_IT+0x6c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a82      	ldr	r2, [pc, #520]	; (80031f0 <HAL_ADC_Start_IT+0x270>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d106      	bne.n	8002ffa <HAL_ADC_Start_IT+0x7a>
 8002fec:	4b81      	ldr	r3, [pc, #516]	; (80031f4 <HAL_ADC_Start_IT+0x274>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d010      	beq.n	800301a <HAL_ADC_Start_IT+0x9a>
 8002ff8:	e005      	b.n	8003006 <HAL_ADC_Start_IT+0x86>
 8002ffa:	4b7f      	ldr	r3, [pc, #508]	; (80031f8 <HAL_ADC_Start_IT+0x278>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <HAL_ADC_Start_IT+0x9a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800300e:	d004      	beq.n	800301a <HAL_ADC_Start_IT+0x9a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a79      	ldr	r2, [pc, #484]	; (80031fc <HAL_ADC_Start_IT+0x27c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d115      	bne.n	8003046 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d036      	beq.n	80030a2 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800303c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003044:	e02d      	b.n	80030a2 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305a:	d004      	beq.n	8003066 <HAL_ADC_Start_IT+0xe6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a63      	ldr	r2, [pc, #396]	; (80031f0 <HAL_ADC_Start_IT+0x270>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10a      	bne.n	800307c <HAL_ADC_Start_IT+0xfc>
 8003066:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf14      	ite	ne
 8003074:	2301      	movne	r3, #1
 8003076:	2300      	moveq	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e008      	b.n	800308e <HAL_ADC_Start_IT+0x10e>
 800307c:	4b5f      	ldr	r3, [pc, #380]	; (80031fc <HAL_ADC_Start_IT+0x27c>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800309a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ae:	d106      	bne.n	80030be <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	f023 0206 	bic.w	r2, r3, #6
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	645a      	str	r2, [r3, #68]	; 0x44
 80030bc:	e002      	b.n	80030c4 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	221c      	movs	r2, #28
 80030d2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d110      	bne.n	80030fe <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0204 	bic.w	r2, r2, #4
 80030ea:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0208 	orr.w	r2, r2, #8
 80030fa:	605a      	str	r2, [r3, #4]
          break;
 80030fc:	e008      	b.n	8003110 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 020c 	orr.w	r2, r2, #12
 800310c:	605a      	str	r2, [r3, #4]
          break;
 800310e:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	2b01      	cmp	r3, #1
 8003116:	d107      	bne.n	8003128 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0210 	bic.w	r2, r2, #16
 8003126:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003130:	d004      	beq.n	800313c <HAL_ADC_Start_IT+0x1bc>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a2e      	ldr	r2, [pc, #184]	; (80031f0 <HAL_ADC_Start_IT+0x270>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d106      	bne.n	800314a <HAL_ADC_Start_IT+0x1ca>
 800313c:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <HAL_ADC_Start_IT+0x274>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	2b00      	cmp	r3, #0
 8003146:	d03e      	beq.n	80031c6 <HAL_ADC_Start_IT+0x246>
 8003148:	e005      	b.n	8003156 <HAL_ADC_Start_IT+0x1d6>
 800314a:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <HAL_ADC_Start_IT+0x278>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	2b00      	cmp	r3, #0
 8003154:	d037      	beq.n	80031c6 <HAL_ADC_Start_IT+0x246>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800315e:	d004      	beq.n	800316a <HAL_ADC_Start_IT+0x1ea>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a22      	ldr	r2, [pc, #136]	; (80031f0 <HAL_ADC_Start_IT+0x270>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d106      	bne.n	8003178 <HAL_ADC_Start_IT+0x1f8>
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <HAL_ADC_Start_IT+0x274>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	2b05      	cmp	r3, #5
 8003174:	d027      	beq.n	80031c6 <HAL_ADC_Start_IT+0x246>
 8003176:	e005      	b.n	8003184 <HAL_ADC_Start_IT+0x204>
 8003178:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <HAL_ADC_Start_IT+0x278>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2b05      	cmp	r3, #5
 8003182:	d020      	beq.n	80031c6 <HAL_ADC_Start_IT+0x246>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800318c:	d004      	beq.n	8003198 <HAL_ADC_Start_IT+0x218>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a17      	ldr	r2, [pc, #92]	; (80031f0 <HAL_ADC_Start_IT+0x270>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d106      	bne.n	80031a6 <HAL_ADC_Start_IT+0x226>
 8003198:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <HAL_ADC_Start_IT+0x274>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2b09      	cmp	r3, #9
 80031a2:	d010      	beq.n	80031c6 <HAL_ADC_Start_IT+0x246>
 80031a4:	e005      	b.n	80031b2 <HAL_ADC_Start_IT+0x232>
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <HAL_ADC_Start_IT+0x278>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	2b09      	cmp	r3, #9
 80031b0:	d009      	beq.n	80031c6 <HAL_ADC_Start_IT+0x246>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ba:	d004      	beq.n	80031c6 <HAL_ADC_Start_IT+0x246>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <HAL_ADC_Start_IT+0x27c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d10f      	bne.n	80031e6 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0204 	orr.w	r2, r2, #4
 80031d4:	609a      	str	r2, [r3, #8]
 80031d6:	e006      	b.n	80031e6 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031e0:	e001      	b.n	80031e6 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	50000100 	.word	0x50000100
 80031f4:	50000300 	.word	0x50000300
 80031f8:	50000700 	.word	0x50000700
 80031fc:	50000400 	.word	0x50000400

08003200 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
	...

0800321c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003228:	2300      	movs	r3, #0
 800322a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_ADC_IRQHandler+0x38>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10b      	bne.n	800326c <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80bc 	beq.w	80033d8 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80b6 	beq.w	80033d8 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800328c:	d004      	beq.n	8003298 <HAL_ADC_IRQHandler+0x7c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a90      	ldr	r2, [pc, #576]	; (80034d4 <HAL_ADC_IRQHandler+0x2b8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d106      	bne.n	80032a6 <HAL_ADC_IRQHandler+0x8a>
 8003298:	4b8f      	ldr	r3, [pc, #572]	; (80034d8 <HAL_ADC_IRQHandler+0x2bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d03e      	beq.n	8003322 <HAL_ADC_IRQHandler+0x106>
 80032a4:	e005      	b.n	80032b2 <HAL_ADC_IRQHandler+0x96>
 80032a6:	4b8d      	ldr	r3, [pc, #564]	; (80034dc <HAL_ADC_IRQHandler+0x2c0>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d037      	beq.n	8003322 <HAL_ADC_IRQHandler+0x106>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ba:	d004      	beq.n	80032c6 <HAL_ADC_IRQHandler+0xaa>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a84      	ldr	r2, [pc, #528]	; (80034d4 <HAL_ADC_IRQHandler+0x2b8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d106      	bne.n	80032d4 <HAL_ADC_IRQHandler+0xb8>
 80032c6:	4b84      	ldr	r3, [pc, #528]	; (80034d8 <HAL_ADC_IRQHandler+0x2bc>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d027      	beq.n	8003322 <HAL_ADC_IRQHandler+0x106>
 80032d2:	e005      	b.n	80032e0 <HAL_ADC_IRQHandler+0xc4>
 80032d4:	4b81      	ldr	r3, [pc, #516]	; (80034dc <HAL_ADC_IRQHandler+0x2c0>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d020      	beq.n	8003322 <HAL_ADC_IRQHandler+0x106>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032e8:	d004      	beq.n	80032f4 <HAL_ADC_IRQHandler+0xd8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a79      	ldr	r2, [pc, #484]	; (80034d4 <HAL_ADC_IRQHandler+0x2b8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d106      	bne.n	8003302 <HAL_ADC_IRQHandler+0xe6>
 80032f4:	4b78      	ldr	r3, [pc, #480]	; (80034d8 <HAL_ADC_IRQHandler+0x2bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	2b09      	cmp	r3, #9
 80032fe:	d010      	beq.n	8003322 <HAL_ADC_IRQHandler+0x106>
 8003300:	e005      	b.n	800330e <HAL_ADC_IRQHandler+0xf2>
 8003302:	4b76      	ldr	r3, [pc, #472]	; (80034dc <HAL_ADC_IRQHandler+0x2c0>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	2b09      	cmp	r3, #9
 800330c:	d009      	beq.n	8003322 <HAL_ADC_IRQHandler+0x106>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003316:	d004      	beq.n	8003322 <HAL_ADC_IRQHandler+0x106>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a70      	ldr	r2, [pc, #448]	; (80034e0 <HAL_ADC_IRQHandler+0x2c4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d104      	bne.n	800332c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	e00f      	b.n	800334c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003334:	d004      	beq.n	8003340 <HAL_ADC_IRQHandler+0x124>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a66      	ldr	r2, [pc, #408]	; (80034d4 <HAL_ADC_IRQHandler+0x2b8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d102      	bne.n	8003346 <HAL_ADC_IRQHandler+0x12a>
 8003340:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003344:	e000      	b.n	8003348 <HAL_ADC_IRQHandler+0x12c>
 8003346:	4b66      	ldr	r3, [pc, #408]	; (80034e0 <HAL_ADC_IRQHandler+0x2c4>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003356:	2b00      	cmp	r3, #0
 8003358:	d137      	bne.n	80033ca <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003360:	2b00      	cmp	r3, #0
 8003362:	d132      	bne.n	80033ca <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d02d      	beq.n	80033ca <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d11a      	bne.n	80033b2 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 020c 	bic.w	r2, r2, #12
 800338a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d112      	bne.n	80033ca <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f043 0201 	orr.w	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40
 80033b0:	e00b      	b.n	80033ca <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f043 0210 	orr.w	r2, r3, #16
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f043 0201 	orr.w	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fd fe78 	bl	80010c0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	220c      	movs	r2, #12
 80033d6:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d004      	beq.n	80033ec <HAL_ADC_IRQHandler+0x1d0>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8138 	beq.w	8003668 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 8132 	beq.w	8003668 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003418:	d004      	beq.n	8003424 <HAL_ADC_IRQHandler+0x208>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2d      	ldr	r2, [pc, #180]	; (80034d4 <HAL_ADC_IRQHandler+0x2b8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d106      	bne.n	8003432 <HAL_ADC_IRQHandler+0x216>
 8003424:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <HAL_ADC_IRQHandler+0x2bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	2b00      	cmp	r3, #0
 800342e:	d03e      	beq.n	80034ae <HAL_ADC_IRQHandler+0x292>
 8003430:	e005      	b.n	800343e <HAL_ADC_IRQHandler+0x222>
 8003432:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <HAL_ADC_IRQHandler+0x2c0>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	2b00      	cmp	r3, #0
 800343c:	d037      	beq.n	80034ae <HAL_ADC_IRQHandler+0x292>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003446:	d004      	beq.n	8003452 <HAL_ADC_IRQHandler+0x236>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <HAL_ADC_IRQHandler+0x2b8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d106      	bne.n	8003460 <HAL_ADC_IRQHandler+0x244>
 8003452:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_ADC_IRQHandler+0x2bc>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	2b05      	cmp	r3, #5
 800345c:	d027      	beq.n	80034ae <HAL_ADC_IRQHandler+0x292>
 800345e:	e005      	b.n	800346c <HAL_ADC_IRQHandler+0x250>
 8003460:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_ADC_IRQHandler+0x2c0>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2b05      	cmp	r3, #5
 800346a:	d020      	beq.n	80034ae <HAL_ADC_IRQHandler+0x292>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003474:	d004      	beq.n	8003480 <HAL_ADC_IRQHandler+0x264>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <HAL_ADC_IRQHandler+0x2b8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d106      	bne.n	800348e <HAL_ADC_IRQHandler+0x272>
 8003480:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <HAL_ADC_IRQHandler+0x2bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	2b09      	cmp	r3, #9
 800348a:	d010      	beq.n	80034ae <HAL_ADC_IRQHandler+0x292>
 800348c:	e005      	b.n	800349a <HAL_ADC_IRQHandler+0x27e>
 800348e:	4b13      	ldr	r3, [pc, #76]	; (80034dc <HAL_ADC_IRQHandler+0x2c0>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	2b09      	cmp	r3, #9
 8003498:	d009      	beq.n	80034ae <HAL_ADC_IRQHandler+0x292>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a2:	d004      	beq.n	80034ae <HAL_ADC_IRQHandler+0x292>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0d      	ldr	r2, [pc, #52]	; (80034e0 <HAL_ADC_IRQHandler+0x2c4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d104      	bne.n	80034b8 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	e018      	b.n	80034ea <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c0:	d004      	beq.n	80034cc <HAL_ADC_IRQHandler+0x2b0>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a03      	ldr	r2, [pc, #12]	; (80034d4 <HAL_ADC_IRQHandler+0x2b8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d10b      	bne.n	80034e4 <HAL_ADC_IRQHandler+0x2c8>
 80034cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034d0:	e009      	b.n	80034e6 <HAL_ADC_IRQHandler+0x2ca>
 80034d2:	bf00      	nop
 80034d4:	50000100 	.word	0x50000100
 80034d8:	50000300 	.word	0x50000300
 80034dc:	50000700 	.word	0x50000700
 80034e0:	50000400 	.word	0x50000400
 80034e4:	4b92      	ldr	r3, [pc, #584]	; (8003730 <HAL_ADC_IRQHandler+0x514>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f040 80b0 	bne.w	800365a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00d      	beq.n	8003520 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 80a3 	bne.w	800365a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800351a:	2b00      	cmp	r3, #0
 800351c:	f040 809d 	bne.w	800365a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8097 	beq.w	800365a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003534:	d004      	beq.n	8003540 <HAL_ADC_IRQHandler+0x324>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a7e      	ldr	r2, [pc, #504]	; (8003734 <HAL_ADC_IRQHandler+0x518>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d106      	bne.n	800354e <HAL_ADC_IRQHandler+0x332>
 8003540:	4b7d      	ldr	r3, [pc, #500]	; (8003738 <HAL_ADC_IRQHandler+0x51c>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2b00      	cmp	r3, #0
 800354a:	d03e      	beq.n	80035ca <HAL_ADC_IRQHandler+0x3ae>
 800354c:	e005      	b.n	800355a <HAL_ADC_IRQHandler+0x33e>
 800354e:	4b7b      	ldr	r3, [pc, #492]	; (800373c <HAL_ADC_IRQHandler+0x520>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	2b00      	cmp	r3, #0
 8003558:	d037      	beq.n	80035ca <HAL_ADC_IRQHandler+0x3ae>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003562:	d004      	beq.n	800356e <HAL_ADC_IRQHandler+0x352>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a72      	ldr	r2, [pc, #456]	; (8003734 <HAL_ADC_IRQHandler+0x518>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d106      	bne.n	800357c <HAL_ADC_IRQHandler+0x360>
 800356e:	4b72      	ldr	r3, [pc, #456]	; (8003738 <HAL_ADC_IRQHandler+0x51c>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	2b06      	cmp	r3, #6
 8003578:	d027      	beq.n	80035ca <HAL_ADC_IRQHandler+0x3ae>
 800357a:	e005      	b.n	8003588 <HAL_ADC_IRQHandler+0x36c>
 800357c:	4b6f      	ldr	r3, [pc, #444]	; (800373c <HAL_ADC_IRQHandler+0x520>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	2b06      	cmp	r3, #6
 8003586:	d020      	beq.n	80035ca <HAL_ADC_IRQHandler+0x3ae>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003590:	d004      	beq.n	800359c <HAL_ADC_IRQHandler+0x380>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a67      	ldr	r2, [pc, #412]	; (8003734 <HAL_ADC_IRQHandler+0x518>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d106      	bne.n	80035aa <HAL_ADC_IRQHandler+0x38e>
 800359c:	4b66      	ldr	r3, [pc, #408]	; (8003738 <HAL_ADC_IRQHandler+0x51c>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	2b07      	cmp	r3, #7
 80035a6:	d010      	beq.n	80035ca <HAL_ADC_IRQHandler+0x3ae>
 80035a8:	e005      	b.n	80035b6 <HAL_ADC_IRQHandler+0x39a>
 80035aa:	4b64      	ldr	r3, [pc, #400]	; (800373c <HAL_ADC_IRQHandler+0x520>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	2b07      	cmp	r3, #7
 80035b4:	d009      	beq.n	80035ca <HAL_ADC_IRQHandler+0x3ae>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035be:	d004      	beq.n	80035ca <HAL_ADC_IRQHandler+0x3ae>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a5a      	ldr	r2, [pc, #360]	; (8003730 <HAL_ADC_IRQHandler+0x514>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d104      	bne.n	80035d4 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	e00f      	b.n	80035f4 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035dc:	d004      	beq.n	80035e8 <HAL_ADC_IRQHandler+0x3cc>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a54      	ldr	r2, [pc, #336]	; (8003734 <HAL_ADC_IRQHandler+0x518>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d102      	bne.n	80035ee <HAL_ADC_IRQHandler+0x3d2>
 80035e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035ec:	e000      	b.n	80035f0 <HAL_ADC_IRQHandler+0x3d4>
 80035ee:	4b50      	ldr	r3, [pc, #320]	; (8003730 <HAL_ADC_IRQHandler+0x514>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d12d      	bne.n	800365a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d11a      	bne.n	8003642 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800361a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d112      	bne.n	800365a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f043 0201 	orr.w	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
 8003640:	e00b      	b.n	800365a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f043 0210 	orr.w	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	f043 0201 	orr.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8c4 	bl	80037e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2260      	movs	r2, #96	; 0x60
 8003666:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d011      	beq.n	8003696 <HAL_ADC_IRQHandler+0x47a>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00c      	beq.n	8003696 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff fa85 	bl	8002b98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d012      	beq.n	80036c6 <HAL_ADC_IRQHandler+0x4aa>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8aa 	bl	8003810 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036c4:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d012      	beq.n	80036f6 <HAL_ADC_IRQHandler+0x4da>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00d      	beq.n	80036f6 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f89c 	bl	8003824 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d04f      	beq.n	80037a0 <HAL_ADC_IRQHandler+0x584>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	d04a      	beq.n	80037a0 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	2b01      	cmp	r3, #1
 8003710:	d102      	bne.n	8003718 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8003712:	2301      	movs	r3, #1
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	e02d      	b.n	8003774 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003720:	d004      	beq.n	800372c <HAL_ADC_IRQHandler+0x510>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a03      	ldr	r2, [pc, #12]	; (8003734 <HAL_ADC_IRQHandler+0x518>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d109      	bne.n	8003740 <HAL_ADC_IRQHandler+0x524>
 800372c:	4b02      	ldr	r3, [pc, #8]	; (8003738 <HAL_ADC_IRQHandler+0x51c>)
 800372e:	e008      	b.n	8003742 <HAL_ADC_IRQHandler+0x526>
 8003730:	50000400 	.word	0x50000400
 8003734:	50000100 	.word	0x50000100
 8003738:	50000300 	.word	0x50000300
 800373c:	50000700 	.word	0x50000700
 8003740:	4b28      	ldr	r3, [pc, #160]	; (80037e4 <HAL_ADC_IRQHandler+0x5c8>)
 8003742:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	2b00      	cmp	r3, #0
 800374e:	d109      	bne.n	8003764 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b01      	cmp	r3, #1
 800375c:	d10a      	bne.n	8003774 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800375e:	2301      	movs	r3, #1
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	e007      	b.n	8003774 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003770:	2301      	movs	r3, #1
 8003772:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d10e      	bne.n	8003798 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f043 0202 	orr.w	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff fa0a 	bl	8002bac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2210      	movs	r2, #16
 800379e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d018      	beq.n	80037dc <HAL_ADC_IRQHandler+0x5c0>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	f043 0208 	orr.w	r2, r3, #8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037d4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f810 	bl	80037fc <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80037dc:	bf00      	nop
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	50000700 	.word	0x50000700

080037e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003838:	b480      	push	{r7}
 800383a:	b09b      	sub	sp, #108	; 0x6c
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_ADC_ConfigChannel+0x22>
 8003856:	2302      	movs	r3, #2
 8003858:	e2ca      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x5b8>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	f040 82ae 	bne.w	8003dce <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b04      	cmp	r3, #4
 8003878:	d81c      	bhi.n	80038b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4413      	add	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	461a      	mov	r2, r3
 800388e:	231f      	movs	r3, #31
 8003890:	4093      	lsls	r3, r2
 8003892:	43db      	mvns	r3, r3
 8003894:	4019      	ands	r1, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	fa00 f203 	lsl.w	r2, r0, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
 80038b2:	e063      	b.n	800397c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b09      	cmp	r3, #9
 80038ba:	d81e      	bhi.n	80038fa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4413      	add	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	3b1e      	subs	r3, #30
 80038d0:	221f      	movs	r2, #31
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	4019      	ands	r1, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	3b1e      	subs	r3, #30
 80038ec:	fa00 f203 	lsl.w	r2, r0, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	635a      	str	r2, [r3, #52]	; 0x34
 80038f8:	e040      	b.n	800397c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b0e      	cmp	r3, #14
 8003900:	d81e      	bhi.n	8003940 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	3b3c      	subs	r3, #60	; 0x3c
 8003916:	221f      	movs	r2, #31
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	4019      	ands	r1, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	3b3c      	subs	r3, #60	; 0x3c
 8003932:	fa00 f203 	lsl.w	r2, r0, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	639a      	str	r2, [r3, #56]	; 0x38
 800393e:	e01d      	b.n	800397c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4413      	add	r3, r2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	3b5a      	subs	r3, #90	; 0x5a
 8003954:	221f      	movs	r2, #31
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	4019      	ands	r1, r3
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	3b5a      	subs	r3, #90	; 0x5a
 8003970:	fa00 f203 	lsl.w	r2, r0, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 80e5 	bne.w	8003b56 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b09      	cmp	r3, #9
 8003992:	d91c      	bls.n	80039ce <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6999      	ldr	r1, [r3, #24]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	3b1e      	subs	r3, #30
 80039a6:	2207      	movs	r2, #7
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	4019      	ands	r1, r3
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	6898      	ldr	r0, [r3, #8]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4413      	add	r3, r2
 80039be:	3b1e      	subs	r3, #30
 80039c0:	fa00 f203 	lsl.w	r2, r0, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	619a      	str	r2, [r3, #24]
 80039cc:	e019      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6959      	ldr	r1, [r3, #20]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4613      	mov	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4413      	add	r3, r2
 80039de:	2207      	movs	r2, #7
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	4019      	ands	r1, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6898      	ldr	r0, [r3, #8]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4613      	mov	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4413      	add	r3, r2
 80039f6:	fa00 f203 	lsl.w	r2, r0, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	08db      	lsrs	r3, r3, #3
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d84f      	bhi.n	8003ac4 <HAL_ADC_ConfigChannel+0x28c>
 8003a24:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <HAL_ADC_ConfigChannel+0x1f4>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a5f 	.word	0x08003a5f
 8003a34:	08003a81 	.word	0x08003a81
 8003a38:	08003aa3 	.word	0x08003aa3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a42:	4b9a      	ldr	r3, [pc, #616]	; (8003cac <HAL_ADC_ConfigChannel+0x474>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	0691      	lsls	r1, r2, #26
 8003a4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a5c:	e07e      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a64:	4b91      	ldr	r3, [pc, #580]	; (8003cac <HAL_ADC_ConfigChannel+0x474>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	0691      	lsls	r1, r2, #26
 8003a6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a70:	430a      	orrs	r2, r1
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a7c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a7e:	e06d      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a86:	4b89      	ldr	r3, [pc, #548]	; (8003cac <HAL_ADC_ConfigChannel+0x474>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	0691      	lsls	r1, r2, #26
 8003a90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a92:	430a      	orrs	r2, r1
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a9e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003aa0:	e05c      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003aa8:	4b80      	ldr	r3, [pc, #512]	; (8003cac <HAL_ADC_ConfigChannel+0x474>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	0691      	lsls	r1, r2, #26
 8003ab2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ac0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003ac2:	e04b      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	069b      	lsls	r3, r3, #26
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d107      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ae6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	069b      	lsls	r3, r3, #26
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d107      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b0a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	069b      	lsls	r3, r3, #26
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d107      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b2e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	069b      	lsls	r3, r3, #26
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d10a      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b52:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003b54:	e001      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003b56:	bf00      	nop
 8003b58:	e000      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x324>
      break;
 8003b5a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d108      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x344>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x344>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_ADC_ConfigChannel+0x346>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f040 8130 	bne.w	8003de4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d00f      	beq.n	8003bac <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	400a      	ands	r2, r1
 8003ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003baa:	e049      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b09      	cmp	r3, #9
 8003bcc:	d91c      	bls.n	8003c08 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6999      	ldr	r1, [r3, #24]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4413      	add	r3, r2
 8003bde:	3b1b      	subs	r3, #27
 8003be0:	2207      	movs	r2, #7
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	4019      	ands	r1, r3
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6898      	ldr	r0, [r3, #8]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3b1b      	subs	r3, #27
 8003bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	619a      	str	r2, [r3, #24]
 8003c06:	e01b      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6959      	ldr	r1, [r3, #20]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	2207      	movs	r2, #7
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	4019      	ands	r1, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6898      	ldr	r0, [r3, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	4613      	mov	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4413      	add	r3, r2
 8003c34:	fa00 f203 	lsl.w	r2, r0, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c48:	d004      	beq.n	8003c54 <HAL_ADC_ConfigChannel+0x41c>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <HAL_ADC_ConfigChannel+0x478>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d101      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x420>
 8003c54:	4b17      	ldr	r3, [pc, #92]	; (8003cb4 <HAL_ADC_ConfigChannel+0x47c>)
 8003c56:	e000      	b.n	8003c5a <HAL_ADC_ConfigChannel+0x422>
 8003c58:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <HAL_ADC_ConfigChannel+0x480>)
 8003c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d105      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d015      	beq.n	8003c9c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003c74:	2b11      	cmp	r3, #17
 8003c76:	d105      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00b      	beq.n	8003c9c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c88:	2b12      	cmp	r3, #18
 8003c8a:	f040 80ab 	bne.w	8003de4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f040 80a4 	bne.w	8003de4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ca4:	d10a      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x484>
 8003ca6:	4b02      	ldr	r3, [pc, #8]	; (8003cb0 <HAL_ADC_ConfigChannel+0x478>)
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e022      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x4ba>
 8003cac:	83fff000 	.word	0x83fff000
 8003cb0:	50000100 	.word	0x50000100
 8003cb4:	50000300 	.word	0x50000300
 8003cb8:	50000700 	.word	0x50000700
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a4e      	ldr	r2, [pc, #312]	; (8003dfc <HAL_ADC_ConfigChannel+0x5c4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d103      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x496>
 8003cc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e011      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x4ba>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a4b      	ldr	r2, [pc, #300]	; (8003e00 <HAL_ADC_ConfigChannel+0x5c8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d102      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x4a6>
 8003cd8:	4b4a      	ldr	r3, [pc, #296]	; (8003e04 <HAL_ADC_ConfigChannel+0x5cc>)
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e009      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x4ba>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a48      	ldr	r2, [pc, #288]	; (8003e04 <HAL_ADC_ConfigChannel+0x5cc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d102      	bne.n	8003cee <HAL_ADC_ConfigChannel+0x4b6>
 8003ce8:	4b45      	ldr	r3, [pc, #276]	; (8003e00 <HAL_ADC_ConfigChannel+0x5c8>)
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e001      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x4ba>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d108      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x4da>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x4da>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x4dc>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d150      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003d18:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d010      	beq.n	8003d40 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x502>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x502>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x504>
 8003d3a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d13c      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d11d      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x54c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d50:	d118      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d5c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d5e:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <HAL_ADC_ConfigChannel+0x5d0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a2a      	ldr	r2, [pc, #168]	; (8003e0c <HAL_ADC_ConfigChannel+0x5d4>)
 8003d64:	fba2 2303 	umull	r2, r3, r2, r3
 8003d68:	0c9a      	lsrs	r2, r3, #18
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d74:	e002      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f9      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d82:	e02e      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b11      	cmp	r3, #17
 8003d8a:	d10b      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x56c>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d94:	d106      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003da2:	e01e      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b12      	cmp	r3, #18
 8003daa:	d11a      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003db8:	e013      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f043 0220 	orr.w	r2, r3, #32
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003dcc:	e00a      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f043 0220 	orr.w	r2, r3, #32
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003de0:	e000      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003de2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003dec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	376c      	adds	r7, #108	; 0x6c
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	50000100 	.word	0x50000100
 8003e00:	50000400 	.word	0x50000400
 8003e04:	50000500 	.word	0x50000500
 8003e08:	20000028 	.word	0x20000028
 8003e0c:	431bde83 	.word	0x431bde83

08003e10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b099      	sub	sp, #100	; 0x64
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e28:	d102      	bne.n	8003e30 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003e2a:	4b6d      	ldr	r3, [pc, #436]	; (8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	e01a      	b.n	8003e66 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a6a      	ldr	r2, [pc, #424]	; (8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d103      	bne.n	8003e42 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003e3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	e011      	b.n	8003e66 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a67      	ldr	r2, [pc, #412]	; (8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d102      	bne.n	8003e52 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003e4c:	4b66      	ldr	r3, [pc, #408]	; (8003fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	e009      	b.n	8003e66 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a64      	ldr	r2, [pc, #400]	; (8003fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d102      	bne.n	8003e62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003e5c:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	e001      	b.n	8003e66 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003e62:	2300      	movs	r3, #0
 8003e64:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0b0      	b.n	8003fd2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e0a9      	b.n	8003fd2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f040 808d 	bne.w	8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f040 8086 	bne.w	8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eac:	d004      	beq.n	8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a4b      	ldr	r2, [pc, #300]	; (8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003eb8:	4b4c      	ldr	r3, [pc, #304]	; (8003fec <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003eba:	e000      	b.n	8003ebe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003ebc:	4b4c      	ldr	r3, [pc, #304]	; (8003ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003ebe:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d040      	beq.n	8003f4a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003ec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003eda:	035b      	lsls	r3, r3, #13
 8003edc:	430b      	orrs	r3, r1
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ee2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d108      	bne.n	8003f04 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d15c      	bne.n	8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d107      	bne.n	8003f26 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003f26:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d14b      	bne.n	8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f34:	f023 030f 	bic.w	r3, r3, #15
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	6811      	ldr	r1, [r2, #0]
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	6892      	ldr	r2, [r2, #8]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	431a      	orrs	r2, r3
 8003f44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f46:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f48:	e03c      	b.n	8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f54:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d108      	bne.n	8003f76 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003f76:	2300      	movs	r3, #0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d123      	bne.n	8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d107      	bne.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003f98:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d112      	bne.n	8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003fa6:	f023 030f 	bic.w	r3, r3, #15
 8003faa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fac:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fae:	e009      	b.n	8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	f043 0220 	orr.w	r2, r3, #32
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003fc2:	e000      	b.n	8003fc6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fc4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003fce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3764      	adds	r7, #100	; 0x64
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	50000100 	.word	0x50000100
 8003fe4:	50000400 	.word	0x50000400
 8003fe8:	50000500 	.word	0x50000500
 8003fec:	50000300 	.word	0x50000300
 8003ff0:	50000700 	.word	0x50000700

08003ff4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d108      	bne.n	8004020 <ADC_Enable+0x2c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <ADC_Enable+0x2c>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <ADC_Enable+0x2e>
 8004020:	2300      	movs	r3, #0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d143      	bne.n	80040ae <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <ADC_Enable+0xc4>)
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	f043 0210 	orr.w	r2, r3, #16
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	f043 0201 	orr.w	r2, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e02f      	b.n	80040b0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004060:	f7fe fd6a 	bl	8002b38 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004066:	e01b      	b.n	80040a0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004068:	f7fe fd66 	bl	8002b38 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d914      	bls.n	80040a0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d00d      	beq.n	80040a0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f043 0210 	orr.w	r2, r3, #16
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	f043 0201 	orr.w	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e007      	b.n	80040b0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d1dc      	bne.n	8004068 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	8000003f 	.word	0x8000003f

080040bc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d108      	bne.n	80040e8 <ADC_Disable+0x2c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <ADC_Disable+0x2c>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <ADC_Disable+0x2e>
 80040e8:	2300      	movs	r3, #0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d047      	beq.n	800417e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 030d 	and.w	r3, r3, #13
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d10f      	bne.n	800411c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0202 	orr.w	r2, r2, #2
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2203      	movs	r2, #3
 8004112:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004114:	f7fe fd10 	bl	8002b38 <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800411a:	e029      	b.n	8004170 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f043 0210 	orr.w	r2, r3, #16
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	f043 0201 	orr.w	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e023      	b.n	8004180 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004138:	f7fe fcfe 	bl	8002b38 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d914      	bls.n	8004170 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d10d      	bne.n	8004170 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f043 0210 	orr.w	r2, r3, #16
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004164:	f043 0201 	orr.w	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e007      	b.n	8004180 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b01      	cmp	r3, #1
 800417c:	d0dc      	beq.n	8004138 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <__NVIC_SetPriorityGrouping+0x44>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041a4:	4013      	ands	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ba:	4a04      	ldr	r2, [pc, #16]	; (80041cc <__NVIC_SetPriorityGrouping+0x44>)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	60d3      	str	r3, [r2, #12]
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041d4:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <__NVIC_GetPriorityGrouping+0x18>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	f003 0307 	and.w	r3, r3, #7
}
 80041de:	4618      	mov	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	e000ed00 	.word	0xe000ed00

080041ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	db0b      	blt.n	8004216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	f003 021f 	and.w	r2, r3, #31
 8004204:	4907      	ldr	r1, [pc, #28]	; (8004224 <__NVIC_EnableIRQ+0x38>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2001      	movs	r0, #1
 800420e:	fa00 f202 	lsl.w	r2, r0, r2
 8004212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	e000e100 	.word	0xe000e100

08004228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	6039      	str	r1, [r7, #0]
 8004232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004238:	2b00      	cmp	r3, #0
 800423a:	db0a      	blt.n	8004252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	490c      	ldr	r1, [pc, #48]	; (8004274 <__NVIC_SetPriority+0x4c>)
 8004242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004246:	0112      	lsls	r2, r2, #4
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	440b      	add	r3, r1
 800424c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004250:	e00a      	b.n	8004268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	4908      	ldr	r1, [pc, #32]	; (8004278 <__NVIC_SetPriority+0x50>)
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	3b04      	subs	r3, #4
 8004260:	0112      	lsls	r2, r2, #4
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	440b      	add	r3, r1
 8004266:	761a      	strb	r2, [r3, #24]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000e100 	.word	0xe000e100
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800427c:	b480      	push	{r7}
 800427e:	b089      	sub	sp, #36	; 0x24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f1c3 0307 	rsb	r3, r3, #7
 8004296:	2b04      	cmp	r3, #4
 8004298:	bf28      	it	cs
 800429a:	2304      	movcs	r3, #4
 800429c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3304      	adds	r3, #4
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d902      	bls.n	80042ac <NVIC_EncodePriority+0x30>
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3b03      	subs	r3, #3
 80042aa:	e000      	b.n	80042ae <NVIC_EncodePriority+0x32>
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b0:	f04f 32ff 	mov.w	r2, #4294967295
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43da      	mvns	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	401a      	ands	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042c4:	f04f 31ff 	mov.w	r1, #4294967295
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	43d9      	mvns	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d4:	4313      	orrs	r3, r2
         );
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3724      	adds	r7, #36	; 0x24
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042f4:	d301      	bcc.n	80042fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042f6:	2301      	movs	r3, #1
 80042f8:	e00f      	b.n	800431a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042fa:	4a0a      	ldr	r2, [pc, #40]	; (8004324 <SysTick_Config+0x40>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3b01      	subs	r3, #1
 8004300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004302:	210f      	movs	r1, #15
 8004304:	f04f 30ff 	mov.w	r0, #4294967295
 8004308:	f7ff ff8e 	bl	8004228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <SysTick_Config+0x40>)
 800430e:	2200      	movs	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004312:	4b04      	ldr	r3, [pc, #16]	; (8004324 <SysTick_Config+0x40>)
 8004314:	2207      	movs	r2, #7
 8004316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	e000e010 	.word	0xe000e010

08004328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff ff29 	bl	8004188 <__NVIC_SetPriorityGrouping>
}
 8004336:	bf00      	nop
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b086      	sub	sp, #24
 8004342:	af00      	add	r7, sp, #0
 8004344:	4603      	mov	r3, r0
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004350:	f7ff ff3e 	bl	80041d0 <__NVIC_GetPriorityGrouping>
 8004354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	6978      	ldr	r0, [r7, #20]
 800435c:	f7ff ff8e 	bl	800427c <NVIC_EncodePriority>
 8004360:	4602      	mov	r2, r0
 8004362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ff5d 	bl	8004228 <__NVIC_SetPriority>
}
 800436e:	bf00      	nop
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b082      	sub	sp, #8
 800437a:	af00      	add	r7, sp, #0
 800437c:	4603      	mov	r3, r0
 800437e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff ff31 	bl	80041ec <__NVIC_EnableIRQ>
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff ffa2 	bl	80042e4 <SysTick_Config>
 80043a0:	4603      	mov	r3, r0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d008      	beq.n	80043ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2204      	movs	r2, #4
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e020      	b.n	8004410 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 020e 	bic.w	r2, r2, #14
 80043dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	2101      	movs	r1, #1
 80043f8:	fa01 f202 	lsl.w	r2, r1, r2
 80043fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800442e:	2b02      	cmp	r3, #2
 8004430:	d005      	beq.n	800443e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2204      	movs	r2, #4
 8004436:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
 800443c:	e027      	b.n	800448e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 020e 	bic.w	r2, r2, #14
 800444c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	2101      	movs	r1, #1
 8004468:	fa01 f202 	lsl.w	r2, r1, r2
 800446c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	4798      	blx	r3
    } 
  }
  return status;
 800448e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044a6:	e154      	b.n	8004752 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	2101      	movs	r1, #1
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	fa01 f303 	lsl.w	r3, r1, r3
 80044b4:	4013      	ands	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8146 	beq.w	800474c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d005      	beq.n	80044d8 <HAL_GPIO_Init+0x40>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d130      	bne.n	800453a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	2203      	movs	r2, #3
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	43db      	mvns	r3, r3
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4013      	ands	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800450e:	2201      	movs	r2, #1
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4013      	ands	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	f003 0201 	and.w	r2, r3, #1
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2b03      	cmp	r3, #3
 8004544:	d017      	beq.n	8004576 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	2203      	movs	r2, #3
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4013      	ands	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d123      	bne.n	80045ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	08da      	lsrs	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3208      	adds	r2, #8
 800458a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800458e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	220f      	movs	r2, #15
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	08da      	lsrs	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3208      	adds	r2, #8
 80045c4:	6939      	ldr	r1, [r7, #16]
 80045c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	2203      	movs	r2, #3
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f003 0203 	and.w	r2, r3, #3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80a0 	beq.w	800474c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800460c:	4b58      	ldr	r3, [pc, #352]	; (8004770 <HAL_GPIO_Init+0x2d8>)
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	4a57      	ldr	r2, [pc, #348]	; (8004770 <HAL_GPIO_Init+0x2d8>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6193      	str	r3, [r2, #24]
 8004618:	4b55      	ldr	r3, [pc, #340]	; (8004770 <HAL_GPIO_Init+0x2d8>)
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004624:	4a53      	ldr	r2, [pc, #332]	; (8004774 <HAL_GPIO_Init+0x2dc>)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	089b      	lsrs	r3, r3, #2
 800462a:	3302      	adds	r3, #2
 800462c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004630:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	220f      	movs	r2, #15
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4013      	ands	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800464e:	d019      	beq.n	8004684 <HAL_GPIO_Init+0x1ec>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a49      	ldr	r2, [pc, #292]	; (8004778 <HAL_GPIO_Init+0x2e0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d013      	beq.n	8004680 <HAL_GPIO_Init+0x1e8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a48      	ldr	r2, [pc, #288]	; (800477c <HAL_GPIO_Init+0x2e4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00d      	beq.n	800467c <HAL_GPIO_Init+0x1e4>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a47      	ldr	r2, [pc, #284]	; (8004780 <HAL_GPIO_Init+0x2e8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d007      	beq.n	8004678 <HAL_GPIO_Init+0x1e0>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a46      	ldr	r2, [pc, #280]	; (8004784 <HAL_GPIO_Init+0x2ec>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d101      	bne.n	8004674 <HAL_GPIO_Init+0x1dc>
 8004670:	2304      	movs	r3, #4
 8004672:	e008      	b.n	8004686 <HAL_GPIO_Init+0x1ee>
 8004674:	2305      	movs	r3, #5
 8004676:	e006      	b.n	8004686 <HAL_GPIO_Init+0x1ee>
 8004678:	2303      	movs	r3, #3
 800467a:	e004      	b.n	8004686 <HAL_GPIO_Init+0x1ee>
 800467c:	2302      	movs	r3, #2
 800467e:	e002      	b.n	8004686 <HAL_GPIO_Init+0x1ee>
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <HAL_GPIO_Init+0x1ee>
 8004684:	2300      	movs	r3, #0
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	f002 0203 	and.w	r2, r2, #3
 800468c:	0092      	lsls	r2, r2, #2
 800468e:	4093      	lsls	r3, r2
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004696:	4937      	ldr	r1, [pc, #220]	; (8004774 <HAL_GPIO_Init+0x2dc>)
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	089b      	lsrs	r3, r3, #2
 800469c:	3302      	adds	r3, #2
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046a4:	4b38      	ldr	r3, [pc, #224]	; (8004788 <HAL_GPIO_Init+0x2f0>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4013      	ands	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80046c8:	4a2f      	ldr	r2, [pc, #188]	; (8004788 <HAL_GPIO_Init+0x2f0>)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046ce:	4b2e      	ldr	r3, [pc, #184]	; (8004788 <HAL_GPIO_Init+0x2f0>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	43db      	mvns	r3, r3
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4013      	ands	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80046f2:	4a25      	ldr	r2, [pc, #148]	; (8004788 <HAL_GPIO_Init+0x2f0>)
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046f8:	4b23      	ldr	r3, [pc, #140]	; (8004788 <HAL_GPIO_Init+0x2f0>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	43db      	mvns	r3, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800471c:	4a1a      	ldr	r2, [pc, #104]	; (8004788 <HAL_GPIO_Init+0x2f0>)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004722:	4b19      	ldr	r3, [pc, #100]	; (8004788 <HAL_GPIO_Init+0x2f0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	43db      	mvns	r3, r3
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4013      	ands	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004746:	4a10      	ldr	r2, [pc, #64]	; (8004788 <HAL_GPIO_Init+0x2f0>)
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	3301      	adds	r3, #1
 8004750:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	f47f aea3 	bne.w	80044a8 <HAL_GPIO_Init+0x10>
  }
}
 8004762:	bf00      	nop
 8004764:	bf00      	nop
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40021000 	.word	0x40021000
 8004774:	40010000 	.word	0x40010000
 8004778:	48000400 	.word	0x48000400
 800477c:	48000800 	.word	0x48000800
 8004780:	48000c00 	.word	0x48000c00
 8004784:	48001000 	.word	0x48001000
 8004788:	40010400 	.word	0x40010400

0800478c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	807b      	strh	r3, [r7, #2]
 8004798:	4613      	mov	r3, r2
 800479a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800479c:	787b      	ldrb	r3, [r7, #1]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047a2:	887a      	ldrh	r2, [r7, #2]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047a8:	e002      	b.n	80047b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047aa:	887a      	ldrh	r2, [r7, #2]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047c6:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d006      	beq.n	80047e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047d2:	4a05      	ldr	r2, [pc, #20]	; (80047e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fc fefc 	bl	80015d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40010400 	.word	0x40010400

080047ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e081      	b.n	8004902 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fd fe50 	bl	80024b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2224      	movs	r2, #36	; 0x24
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800483c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800484c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d107      	bne.n	8004866 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004862:	609a      	str	r2, [r3, #8]
 8004864:	e006      	b.n	8004874 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004872:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d104      	bne.n	8004886 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004884:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004898:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69d9      	ldr	r1, [r3, #28]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1a      	ldr	r2, [r3, #32]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b20      	cmp	r3, #32
 800491e:	d138      	bne.n	8004992 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800492a:	2302      	movs	r3, #2
 800492c:	e032      	b.n	8004994 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2224      	movs	r2, #36	; 0x24
 800493a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0201 	bic.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800495c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0201 	orr.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e000      	b.n	8004994 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004992:	2302      	movs	r3, #2
  }
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d139      	bne.n	8004a2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e033      	b.n	8004a2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	; 0x24
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0201 	orr.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
  }
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3a:	b08b      	sub	sp, #44	; 0x2c
 8004a3c:	af06      	add	r7, sp, #24
 8004a3e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0c4      	b.n	8004bd4 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fd fed0 	bl	8002804 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2203      	movs	r2, #3
 8004a68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f004 fc01 	bl	8009278 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a76:	2300      	movs	r3, #0
 8004a78:	73fb      	strb	r3, [r7, #15]
 8004a7a:	e040      	b.n	8004afe <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	2201      	movs	r2, #1
 8004a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	440b      	add	r3, r1
 8004aa2:	7bfa      	ldrb	r2, [r7, #15]
 8004aa4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3303      	adds	r3, #3
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004abc:	7bfa      	ldrb	r2, [r7, #15]
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	440b      	add	r3, r1
 8004aca:	3338      	adds	r3, #56	; 0x38
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ad0:	7bfa      	ldrb	r2, [r7, #15]
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	440b      	add	r3, r1
 8004ade:	333c      	adds	r3, #60	; 0x3c
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ae4:	7bfa      	ldrb	r2, [r7, #15]
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	440b      	add	r3, r1
 8004af2:	3340      	adds	r3, #64	; 0x40
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	3301      	adds	r3, #1
 8004afc:	73fb      	strb	r3, [r7, #15]
 8004afe:	7bfa      	ldrb	r2, [r7, #15]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d3b9      	bcc.n	8004a7c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b08:	2300      	movs	r3, #0
 8004b0a:	73fb      	strb	r3, [r7, #15]
 8004b0c:	e044      	b.n	8004b98 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b0e:	7bfa      	ldrb	r2, [r7, #15]
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	440b      	add	r3, r1
 8004b1c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b24:	7bfa      	ldrb	r2, [r7, #15]
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	440b      	add	r3, r1
 8004b32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b36:	7bfa      	ldrb	r2, [r7, #15]
 8004b38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b3a:	7bfa      	ldrb	r2, [r7, #15]
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	440b      	add	r3, r1
 8004b48:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b50:	7bfa      	ldrb	r2, [r7, #15]
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	440b      	add	r3, r1
 8004b5e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b66:	7bfa      	ldrb	r2, [r7, #15]
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	440b      	add	r3, r1
 8004b74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b7c:	7bfa      	ldrb	r2, [r7, #15]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	440b      	add	r3, r1
 8004b8a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	3301      	adds	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	7bfa      	ldrb	r2, [r7, #15]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d3b5      	bcc.n	8004b0e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	687e      	ldr	r6, [r7, #4]
 8004baa:	466d      	mov	r5, sp
 8004bac:	f106 0410 	add.w	r4, r6, #16
 8004bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	602b      	str	r3, [r5, #0]
 8004bb8:	1d33      	adds	r3, r6, #4
 8004bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bbc:	6838      	ldr	r0, [r7, #0]
 8004bbe:	f004 fb76 	bl	80092ae <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f001 b823 	b.w	8005c48 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 817d 	beq.w	8004f12 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004c18:	4bbc      	ldr	r3, [pc, #752]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d00c      	beq.n	8004c3e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c24:	4bb9      	ldr	r3, [pc, #740]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f003 030c 	and.w	r3, r3, #12
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d15c      	bne.n	8004cea <HAL_RCC_OscConfig+0x10e>
 8004c30:	4bb6      	ldr	r3, [pc, #728]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3c:	d155      	bne.n	8004cea <HAL_RCC_OscConfig+0x10e>
 8004c3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c42:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004c4a:	fa93 f3a3 	rbit	r3, r3
 8004c4e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c56:	fab3 f383 	clz	r3, r3
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d102      	bne.n	8004c70 <HAL_RCC_OscConfig+0x94>
 8004c6a:	4ba8      	ldr	r3, [pc, #672]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	e015      	b.n	8004c9c <HAL_RCC_OscConfig+0xc0>
 8004c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c74:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c78:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004c7c:	fa93 f3a3 	rbit	r3, r3
 8004c80:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c88:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004c8c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004c90:	fa93 f3a3 	rbit	r3, r3
 8004c94:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004c98:	4b9c      	ldr	r3, [pc, #624]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ca0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004ca4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004ca8:	fa92 f2a2 	rbit	r2, r2
 8004cac:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004cb0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004cb4:	fab2 f282 	clz	r2, r2
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	f042 0220 	orr.w	r2, r2, #32
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	f002 021f 	and.w	r2, r2, #31
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 811f 	beq.w	8004f10 <HAL_RCC_OscConfig+0x334>
 8004cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 8116 	bne.w	8004f10 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f000 bfaf 	b.w	8005c48 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCC_OscConfig+0x12e>
 8004cfc:	4b83      	ldr	r3, [pc, #524]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a82      	ldr	r2, [pc, #520]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	e036      	b.n	8004d78 <HAL_RCC_OscConfig+0x19c>
 8004d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCC_OscConfig+0x158>
 8004d1a:	4b7c      	ldr	r3, [pc, #496]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a7b      	ldr	r2, [pc, #492]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b79      	ldr	r3, [pc, #484]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a78      	ldr	r2, [pc, #480]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e021      	b.n	8004d78 <HAL_RCC_OscConfig+0x19c>
 8004d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d44:	d10c      	bne.n	8004d60 <HAL_RCC_OscConfig+0x184>
 8004d46:	4b71      	ldr	r3, [pc, #452]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a70      	ldr	r2, [pc, #448]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	4b6e      	ldr	r3, [pc, #440]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a6d      	ldr	r2, [pc, #436]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	e00b      	b.n	8004d78 <HAL_RCC_OscConfig+0x19c>
 8004d60:	4b6a      	ldr	r3, [pc, #424]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a69      	ldr	r2, [pc, #420]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	4b67      	ldr	r3, [pc, #412]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a66      	ldr	r2, [pc, #408]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d76:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d78:	4b64      	ldr	r3, [pc, #400]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	f023 020f 	bic.w	r2, r3, #15
 8004d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	495f      	ldr	r1, [pc, #380]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d059      	beq.n	8004e56 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da2:	f7fd fec9 	bl	8002b38 <HAL_GetTick>
 8004da6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dac:	f7fd fec4 	bl	8002b38 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b64      	cmp	r3, #100	; 0x64
 8004dba:	d902      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	f000 bf43 	b.w	8005c48 <HAL_RCC_OscConfig+0x106c>
 8004dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dc6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004dce:	fa93 f3a3 	rbit	r3, r3
 8004dd2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004dd6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dda:	fab3 f383 	clz	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d102      	bne.n	8004df4 <HAL_RCC_OscConfig+0x218>
 8004dee:	4b47      	ldr	r3, [pc, #284]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	e015      	b.n	8004e20 <HAL_RCC_OscConfig+0x244>
 8004df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004df8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004e00:	fa93 f3a3 	rbit	r3, r3
 8004e04:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e0c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004e10:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004e14:	fa93 f3a3 	rbit	r3, r3
 8004e18:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004e1c:	4b3b      	ldr	r3, [pc, #236]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e24:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004e28:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004e2c:	fa92 f2a2 	rbit	r2, r2
 8004e30:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004e34:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004e38:	fab2 f282 	clz	r2, r2
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	f042 0220 	orr.w	r2, r2, #32
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	f002 021f 	and.w	r2, r2, #31
 8004e48:	2101      	movs	r1, #1
 8004e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ab      	beq.n	8004dac <HAL_RCC_OscConfig+0x1d0>
 8004e54:	e05d      	b.n	8004f12 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e56:	f7fd fe6f 	bl	8002b38 <HAL_GetTick>
 8004e5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e60:	f7fd fe6a 	bl	8002b38 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b64      	cmp	r3, #100	; 0x64
 8004e6e:	d902      	bls.n	8004e76 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	f000 bee9 	b.w	8005c48 <HAL_RCC_OscConfig+0x106c>
 8004e76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e7a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004e82:	fa93 f3a3 	rbit	r3, r3
 8004e86:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004e8a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8e:	fab3 f383 	clz	r3, r3
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d102      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x2cc>
 8004ea2:	4b1a      	ldr	r3, [pc, #104]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	e015      	b.n	8004ed4 <HAL_RCC_OscConfig+0x2f8>
 8004ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004eb4:	fa93 f3a3 	rbit	r3, r3
 8004eb8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ec0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004ec4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004ec8:	fa93 f3a3 	rbit	r3, r3
 8004ecc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <HAL_RCC_OscConfig+0x330>)
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ed8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004edc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004ee0:	fa92 f2a2 	rbit	r2, r2
 8004ee4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004ee8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004eec:	fab2 f282 	clz	r2, r2
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	f042 0220 	orr.w	r2, r2, #32
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	f002 021f 	and.w	r2, r2, #31
 8004efc:	2101      	movs	r1, #1
 8004efe:	fa01 f202 	lsl.w	r2, r1, r2
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1ab      	bne.n	8004e60 <HAL_RCC_OscConfig+0x284>
 8004f08:	e003      	b.n	8004f12 <HAL_RCC_OscConfig+0x336>
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 817d 	beq.w	8005222 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f28:	4ba6      	ldr	r3, [pc, #664]	; (80051c4 <HAL_RCC_OscConfig+0x5e8>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00b      	beq.n	8004f4c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004f34:	4ba3      	ldr	r3, [pc, #652]	; (80051c4 <HAL_RCC_OscConfig+0x5e8>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 030c 	and.w	r3, r3, #12
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d172      	bne.n	8005026 <HAL_RCC_OscConfig+0x44a>
 8004f40:	4ba0      	ldr	r3, [pc, #640]	; (80051c4 <HAL_RCC_OscConfig+0x5e8>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d16c      	bne.n	8005026 <HAL_RCC_OscConfig+0x44a>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004f56:	fa93 f3a3 	rbit	r3, r3
 8004f5a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004f5e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f62:	fab3 f383 	clz	r3, r3
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d102      	bne.n	8004f7c <HAL_RCC_OscConfig+0x3a0>
 8004f76:	4b93      	ldr	r3, [pc, #588]	; (80051c4 <HAL_RCC_OscConfig+0x5e8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	e013      	b.n	8004fa4 <HAL_RCC_OscConfig+0x3c8>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f82:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004f8e:	2302      	movs	r3, #2
 8004f90:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004f94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004f98:	fa93 f3a3 	rbit	r3, r3
 8004f9c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004fa0:	4b88      	ldr	r3, [pc, #544]	; (80051c4 <HAL_RCC_OscConfig+0x5e8>)
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004faa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004fae:	fa92 f2a2 	rbit	r2, r2
 8004fb2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004fb6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004fba:	fab2 f282 	clz	r2, r2
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	f042 0220 	orr.w	r2, r2, #32
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	f002 021f 	and.w	r2, r2, #31
 8004fca:	2101      	movs	r1, #1
 8004fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_RCC_OscConfig+0x410>
 8004fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d002      	beq.n	8004fec <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f000 be2e 	b.w	8005c48 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fec:	4b75      	ldr	r3, [pc, #468]	; (80051c4 <HAL_RCC_OscConfig+0x5e8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	21f8      	movs	r1, #248	; 0xf8
 8005002:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005006:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800500a:	fa91 f1a1 	rbit	r1, r1
 800500e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005012:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005016:	fab1 f181 	clz	r1, r1
 800501a:	b2c9      	uxtb	r1, r1
 800501c:	408b      	lsls	r3, r1
 800501e:	4969      	ldr	r1, [pc, #420]	; (80051c4 <HAL_RCC_OscConfig+0x5e8>)
 8005020:	4313      	orrs	r3, r2
 8005022:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005024:	e0fd      	b.n	8005222 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 8088 	beq.w	8005148 <HAL_RCC_OscConfig+0x56c>
 8005038:	2301      	movs	r3, #1
 800503a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005042:	fa93 f3a3 	rbit	r3, r3
 8005046:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800504a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800504e:	fab3 f383 	clz	r3, r3
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005058:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	461a      	mov	r2, r3
 8005060:	2301      	movs	r3, #1
 8005062:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7fd fd68 	bl	8002b38 <HAL_GetTick>
 8005068:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506c:	e00a      	b.n	8005084 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800506e:	f7fd fd63 	bl	8002b38 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d902      	bls.n	8005084 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	f000 bde2 	b.w	8005c48 <HAL_RCC_OscConfig+0x106c>
 8005084:	2302      	movs	r3, #2
 8005086:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800508e:	fa93 f3a3 	rbit	r3, r3
 8005092:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005096:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509a:	fab3 f383 	clz	r3, r3
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d102      	bne.n	80050b4 <HAL_RCC_OscConfig+0x4d8>
 80050ae:	4b45      	ldr	r3, [pc, #276]	; (80051c4 <HAL_RCC_OscConfig+0x5e8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	e013      	b.n	80050dc <HAL_RCC_OscConfig+0x500>
 80050b4:	2302      	movs	r3, #2
 80050b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80050be:	fa93 f3a3 	rbit	r3, r3
 80050c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80050c6:	2302      	movs	r3, #2
 80050c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80050cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80050d0:	fa93 f3a3 	rbit	r3, r3
 80050d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80050d8:	4b3a      	ldr	r3, [pc, #232]	; (80051c4 <HAL_RCC_OscConfig+0x5e8>)
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2202      	movs	r2, #2
 80050de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80050e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80050e6:	fa92 f2a2 	rbit	r2, r2
 80050ea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80050ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80050f2:	fab2 f282 	clz	r2, r2
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	f042 0220 	orr.w	r2, r2, #32
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	f002 021f 	and.w	r2, r2, #31
 8005102:	2101      	movs	r1, #1
 8005104:	fa01 f202 	lsl.w	r2, r1, r2
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0af      	beq.n	800506e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510e:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <HAL_RCC_OscConfig+0x5e8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	21f8      	movs	r1, #248	; 0xf8
 8005124:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005128:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800512c:	fa91 f1a1 	rbit	r1, r1
 8005130:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005134:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005138:	fab1 f181 	clz	r1, r1
 800513c:	b2c9      	uxtb	r1, r1
 800513e:	408b      	lsls	r3, r1
 8005140:	4920      	ldr	r1, [pc, #128]	; (80051c4 <HAL_RCC_OscConfig+0x5e8>)
 8005142:	4313      	orrs	r3, r2
 8005144:	600b      	str	r3, [r1, #0]
 8005146:	e06c      	b.n	8005222 <HAL_RCC_OscConfig+0x646>
 8005148:	2301      	movs	r3, #1
 800514a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005152:	fa93 f3a3 	rbit	r3, r3
 8005156:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800515a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800515e:	fab3 f383 	clz	r3, r3
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005168:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	461a      	mov	r2, r3
 8005170:	2300      	movs	r3, #0
 8005172:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7fd fce0 	bl	8002b38 <HAL_GetTick>
 8005178:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517c:	e00a      	b.n	8005194 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800517e:	f7fd fcdb 	bl	8002b38 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d902      	bls.n	8005194 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	f000 bd5a 	b.w	8005c48 <HAL_RCC_OscConfig+0x106c>
 8005194:	2302      	movs	r3, #2
 8005196:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800519e:	fa93 f3a3 	rbit	r3, r3
 80051a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80051a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051aa:	fab3 f383 	clz	r3, r3
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d104      	bne.n	80051c8 <HAL_RCC_OscConfig+0x5ec>
 80051be:	4b01      	ldr	r3, [pc, #4]	; (80051c4 <HAL_RCC_OscConfig+0x5e8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	e015      	b.n	80051f0 <HAL_RCC_OscConfig+0x614>
 80051c4:	40021000 	.word	0x40021000
 80051c8:	2302      	movs	r3, #2
 80051ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051d2:	fa93 f3a3 	rbit	r3, r3
 80051d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80051da:	2302      	movs	r3, #2
 80051dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80051e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80051e4:	fa93 f3a3 	rbit	r3, r3
 80051e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80051ec:	4bc8      	ldr	r3, [pc, #800]	; (8005510 <HAL_RCC_OscConfig+0x934>)
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	2202      	movs	r2, #2
 80051f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80051f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80051fa:	fa92 f2a2 	rbit	r2, r2
 80051fe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005202:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005206:	fab2 f282 	clz	r2, r2
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	f042 0220 	orr.w	r2, r2, #32
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	f002 021f 	and.w	r2, r2, #31
 8005216:	2101      	movs	r1, #1
 8005218:	fa01 f202 	lsl.w	r2, r1, r2
 800521c:	4013      	ands	r3, r2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1ad      	bne.n	800517e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005226:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 8110 	beq.w	8005458 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800523c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d079      	beq.n	800533c <HAL_RCC_OscConfig+0x760>
 8005248:	2301      	movs	r3, #1
 800524a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005252:	fa93 f3a3 	rbit	r3, r3
 8005256:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800525a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800525e:	fab3 f383 	clz	r3, r3
 8005262:	b2db      	uxtb	r3, r3
 8005264:	461a      	mov	r2, r3
 8005266:	4bab      	ldr	r3, [pc, #684]	; (8005514 <HAL_RCC_OscConfig+0x938>)
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	461a      	mov	r2, r3
 800526e:	2301      	movs	r3, #1
 8005270:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005272:	f7fd fc61 	bl	8002b38 <HAL_GetTick>
 8005276:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800527a:	e00a      	b.n	8005292 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800527c:	f7fd fc5c 	bl	8002b38 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d902      	bls.n	8005292 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	f000 bcdb 	b.w	8005c48 <HAL_RCC_OscConfig+0x106c>
 8005292:	2302      	movs	r3, #2
 8005294:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005298:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800529c:	fa93 f3a3 	rbit	r3, r3
 80052a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80052a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80052ac:	2202      	movs	r2, #2
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	fa93 f2a3 	rbit	r2, r3
 80052be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d0:	2202      	movs	r2, #2
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	fa93 f2a3 	rbit	r2, r3
 80052e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ec:	4b88      	ldr	r3, [pc, #544]	; (8005510 <HAL_RCC_OscConfig+0x934>)
 80052ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80052f8:	2102      	movs	r1, #2
 80052fa:	6019      	str	r1, [r3, #0]
 80052fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005300:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	fa93 f1a3 	rbit	r1, r3
 800530a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005312:	6019      	str	r1, [r3, #0]
  return result;
 8005314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005318:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	fab3 f383 	clz	r3, r3
 8005322:	b2db      	uxtb	r3, r3
 8005324:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005328:	b2db      	uxtb	r3, r3
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	2101      	movs	r1, #1
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	4013      	ands	r3, r2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0a0      	beq.n	800527c <HAL_RCC_OscConfig+0x6a0>
 800533a:	e08d      	b.n	8005458 <HAL_RCC_OscConfig+0x87c>
 800533c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005340:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	fa93 f2a3 	rbit	r2, r3
 8005356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800535e:	601a      	str	r2, [r3, #0]
  return result;
 8005360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005364:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005368:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800536a:	fab3 f383 	clz	r3, r3
 800536e:	b2db      	uxtb	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	4b68      	ldr	r3, [pc, #416]	; (8005514 <HAL_RCC_OscConfig+0x938>)
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	461a      	mov	r2, r3
 800537a:	2300      	movs	r3, #0
 800537c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800537e:	f7fd fbdb 	bl	8002b38 <HAL_GetTick>
 8005382:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005386:	e00a      	b.n	800539e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005388:	f7fd fbd6 	bl	8002b38 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d902      	bls.n	800539e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	f000 bc55 	b.w	8005c48 <HAL_RCC_OscConfig+0x106c>
 800539e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80053a6:	2202      	movs	r2, #2
 80053a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	fa93 f2a3 	rbit	r2, r3
 80053b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053ca:	2202      	movs	r2, #2
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	fa93 f2a3 	rbit	r2, r3
 80053dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ee:	2202      	movs	r2, #2
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	fa93 f2a3 	rbit	r2, r3
 8005400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005404:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005408:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800540a:	4b41      	ldr	r3, [pc, #260]	; (8005510 <HAL_RCC_OscConfig+0x934>)
 800540c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800540e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005412:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005416:	2102      	movs	r1, #2
 8005418:	6019      	str	r1, [r3, #0]
 800541a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	fa93 f1a3 	rbit	r1, r3
 8005428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800542c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005430:	6019      	str	r1, [r3, #0]
  return result;
 8005432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005436:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	fab3 f383 	clz	r3, r3
 8005440:	b2db      	uxtb	r3, r3
 8005442:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	2101      	movs	r1, #1
 800544e:	fa01 f303 	lsl.w	r3, r1, r3
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d197      	bne.n	8005388 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 81a1 	beq.w	80057b0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546e:	2300      	movs	r3, #0
 8005470:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005474:	4b26      	ldr	r3, [pc, #152]	; (8005510 <HAL_RCC_OscConfig+0x934>)
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d116      	bne.n	80054ae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005480:	4b23      	ldr	r3, [pc, #140]	; (8005510 <HAL_RCC_OscConfig+0x934>)
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	4a22      	ldr	r2, [pc, #136]	; (8005510 <HAL_RCC_OscConfig+0x934>)
 8005486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548a:	61d3      	str	r3, [r2, #28]
 800548c:	4b20      	ldr	r3, [pc, #128]	; (8005510 <HAL_RCC_OscConfig+0x934>)
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005498:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80054a6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ae:	4b1a      	ldr	r3, [pc, #104]	; (8005518 <HAL_RCC_OscConfig+0x93c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d11a      	bne.n	80054f0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ba:	4b17      	ldr	r3, [pc, #92]	; (8005518 <HAL_RCC_OscConfig+0x93c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a16      	ldr	r2, [pc, #88]	; (8005518 <HAL_RCC_OscConfig+0x93c>)
 80054c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c6:	f7fd fb37 	bl	8002b38 <HAL_GetTick>
 80054ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ce:	e009      	b.n	80054e4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d0:	f7fd fb32 	bl	8002b38 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b64      	cmp	r3, #100	; 0x64
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e3b1      	b.n	8005c48 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e4:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <HAL_RCC_OscConfig+0x93c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0ef      	beq.n	80054d0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10d      	bne.n	800551c <HAL_RCC_OscConfig+0x940>
 8005500:	4b03      	ldr	r3, [pc, #12]	; (8005510 <HAL_RCC_OscConfig+0x934>)
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	4a02      	ldr	r2, [pc, #8]	; (8005510 <HAL_RCC_OscConfig+0x934>)
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	6213      	str	r3, [r2, #32]
 800550c:	e03c      	b.n	8005588 <HAL_RCC_OscConfig+0x9ac>
 800550e:	bf00      	nop
 8005510:	40021000 	.word	0x40021000
 8005514:	10908120 	.word	0x10908120
 8005518:	40007000 	.word	0x40007000
 800551c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005520:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10c      	bne.n	8005546 <HAL_RCC_OscConfig+0x96a>
 800552c:	4bc1      	ldr	r3, [pc, #772]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	4ac0      	ldr	r2, [pc, #768]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 8005532:	f023 0301 	bic.w	r3, r3, #1
 8005536:	6213      	str	r3, [r2, #32]
 8005538:	4bbe      	ldr	r3, [pc, #760]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	4abd      	ldr	r2, [pc, #756]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 800553e:	f023 0304 	bic.w	r3, r3, #4
 8005542:	6213      	str	r3, [r2, #32]
 8005544:	e020      	b.n	8005588 <HAL_RCC_OscConfig+0x9ac>
 8005546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	2b05      	cmp	r3, #5
 8005554:	d10c      	bne.n	8005570 <HAL_RCC_OscConfig+0x994>
 8005556:	4bb7      	ldr	r3, [pc, #732]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	4ab6      	ldr	r2, [pc, #728]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 800555c:	f043 0304 	orr.w	r3, r3, #4
 8005560:	6213      	str	r3, [r2, #32]
 8005562:	4bb4      	ldr	r3, [pc, #720]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	4ab3      	ldr	r2, [pc, #716]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	6213      	str	r3, [r2, #32]
 800556e:	e00b      	b.n	8005588 <HAL_RCC_OscConfig+0x9ac>
 8005570:	4bb0      	ldr	r3, [pc, #704]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	4aaf      	ldr	r2, [pc, #700]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	6213      	str	r3, [r2, #32]
 800557c:	4bad      	ldr	r3, [pc, #692]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	4aac      	ldr	r2, [pc, #688]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 8005582:	f023 0304 	bic.w	r3, r3, #4
 8005586:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800558c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8081 	beq.w	800569c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800559a:	f7fd facd 	bl	8002b38 <HAL_GetTick>
 800559e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a2:	e00b      	b.n	80055bc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a4:	f7fd fac8 	bl	8002b38 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e345      	b.n	8005c48 <HAL_RCC_OscConfig+0x106c>
 80055bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80055c4:	2202      	movs	r2, #2
 80055c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	fa93 f2a3 	rbit	r2, r3
 80055d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80055e8:	2202      	movs	r2, #2
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	fa93 f2a3 	rbit	r2, r3
 80055fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005602:	601a      	str	r2, [r3, #0]
  return result;
 8005604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005608:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800560c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800560e:	fab3 f383 	clz	r3, r3
 8005612:	b2db      	uxtb	r3, r3
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	b2db      	uxtb	r3, r3
 8005618:	f043 0302 	orr.w	r3, r3, #2
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d102      	bne.n	8005628 <HAL_RCC_OscConfig+0xa4c>
 8005622:	4b84      	ldr	r3, [pc, #528]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	e013      	b.n	8005650 <HAL_RCC_OscConfig+0xa74>
 8005628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005630:	2202      	movs	r2, #2
 8005632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005638:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	fa93 f2a3 	rbit	r2, r3
 8005642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005646:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	4b79      	ldr	r3, [pc, #484]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005654:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005658:	2102      	movs	r1, #2
 800565a:	6011      	str	r1, [r2, #0]
 800565c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005660:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	fa92 f1a2 	rbit	r1, r2
 800566a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800566e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005672:	6011      	str	r1, [r2, #0]
  return result;
 8005674:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005678:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	fab2 f282 	clz	r2, r2
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	f002 021f 	and.w	r2, r2, #31
 800568e:	2101      	movs	r1, #1
 8005690:	fa01 f202 	lsl.w	r2, r1, r2
 8005694:	4013      	ands	r3, r2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d084      	beq.n	80055a4 <HAL_RCC_OscConfig+0x9c8>
 800569a:	e07f      	b.n	800579c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800569c:	f7fd fa4c 	bl	8002b38 <HAL_GetTick>
 80056a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a4:	e00b      	b.n	80056be <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a6:	f7fd fa47 	bl	8002b38 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e2c4      	b.n	8005c48 <HAL_RCC_OscConfig+0x106c>
 80056be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80056c6:	2202      	movs	r2, #2
 80056c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	fa93 f2a3 	rbit	r2, r3
 80056d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056dc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80056ea:	2202      	movs	r2, #2
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	fa93 f2a3 	rbit	r2, r3
 80056fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005700:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005704:	601a      	str	r2, [r3, #0]
  return result;
 8005706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800570a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800570e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005710:	fab3 f383 	clz	r3, r3
 8005714:	b2db      	uxtb	r3, r3
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f043 0302 	orr.w	r3, r3, #2
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d102      	bne.n	800572a <HAL_RCC_OscConfig+0xb4e>
 8005724:	4b43      	ldr	r3, [pc, #268]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	e013      	b.n	8005752 <HAL_RCC_OscConfig+0xb76>
 800572a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005732:	2202      	movs	r2, #2
 8005734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	fa93 f2a3 	rbit	r2, r3
 8005744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005748:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	4b39      	ldr	r3, [pc, #228]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005756:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800575a:	2102      	movs	r1, #2
 800575c:	6011      	str	r1, [r2, #0]
 800575e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005762:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	fa92 f1a2 	rbit	r1, r2
 800576c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005770:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005774:	6011      	str	r1, [r2, #0]
  return result;
 8005776:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800577a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800577e:	6812      	ldr	r2, [r2, #0]
 8005780:	fab2 f282 	clz	r2, r2
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	f002 021f 	and.w	r2, r2, #31
 8005790:	2101      	movs	r1, #1
 8005792:	fa01 f202 	lsl.w	r2, r1, r2
 8005796:	4013      	ands	r3, r2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d184      	bne.n	80056a6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800579c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d105      	bne.n	80057b0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a4:	4b23      	ldr	r3, [pc, #140]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	4a22      	ldr	r2, [pc, #136]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 80057aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 8242 	beq.w	8005c46 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057c2:	4b1c      	ldr	r3, [pc, #112]	; (8005834 <HAL_RCC_OscConfig+0xc58>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f003 030c 	and.w	r3, r3, #12
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	f000 8213 	beq.w	8005bf6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	f040 8162 	bne.w	8005aa6 <HAL_RCC_OscConfig+0xeca>
 80057e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80057ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	fa93 f2a3 	rbit	r2, r3
 80057fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005802:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005806:	601a      	str	r2, [r3, #0]
  return result;
 8005808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800580c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005810:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005812:	fab3 f383 	clz	r3, r3
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800581c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	461a      	mov	r2, r3
 8005824:	2300      	movs	r3, #0
 8005826:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005828:	f7fd f986 	bl	8002b38 <HAL_GetTick>
 800582c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005830:	e00c      	b.n	800584c <HAL_RCC_OscConfig+0xc70>
 8005832:	bf00      	nop
 8005834:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005838:	f7fd f97e 	bl	8002b38 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e1fd      	b.n	8005c48 <HAL_RCC_OscConfig+0x106c>
 800584c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005850:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005854:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800585e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	fa93 f2a3 	rbit	r2, r3
 8005868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800586c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005870:	601a      	str	r2, [r3, #0]
  return result;
 8005872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005876:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800587a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800587c:	fab3 f383 	clz	r3, r3
 8005880:	b2db      	uxtb	r3, r3
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f043 0301 	orr.w	r3, r3, #1
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d102      	bne.n	8005896 <HAL_RCC_OscConfig+0xcba>
 8005890:	4bb0      	ldr	r3, [pc, #704]	; (8005b54 <HAL_RCC_OscConfig+0xf78>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	e027      	b.n	80058e6 <HAL_RCC_OscConfig+0xd0a>
 8005896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800589a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800589e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	fa93 f2a3 	rbit	r2, r3
 80058b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80058c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ce:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	fa93 f2a3 	rbit	r2, r3
 80058d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058dc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	4b9c      	ldr	r3, [pc, #624]	; (8005b54 <HAL_RCC_OscConfig+0xf78>)
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058ea:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80058ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80058f2:	6011      	str	r1, [r2, #0]
 80058f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058f8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	fa92 f1a2 	rbit	r1, r2
 8005902:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005906:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800590a:	6011      	str	r1, [r2, #0]
  return result;
 800590c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005910:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	fab2 f282 	clz	r2, r2
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	f042 0220 	orr.w	r2, r2, #32
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	f002 021f 	and.w	r2, r2, #31
 8005926:	2101      	movs	r1, #1
 8005928:	fa01 f202 	lsl.w	r2, r1, r2
 800592c:	4013      	ands	r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d182      	bne.n	8005838 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005932:	4b88      	ldr	r3, [pc, #544]	; (8005b54 <HAL_RCC_OscConfig+0xf78>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800593a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800593e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800594a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	430b      	orrs	r3, r1
 8005954:	497f      	ldr	r1, [pc, #508]	; (8005b54 <HAL_RCC_OscConfig+0xf78>)
 8005956:	4313      	orrs	r3, r2
 8005958:	604b      	str	r3, [r1, #4]
 800595a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800595e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005962:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800596c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	fa93 f2a3 	rbit	r2, r3
 8005976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800597a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800597e:	601a      	str	r2, [r3, #0]
  return result;
 8005980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005984:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005988:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800598a:	fab3 f383 	clz	r3, r3
 800598e:	b2db      	uxtb	r3, r3
 8005990:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005994:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	461a      	mov	r2, r3
 800599c:	2301      	movs	r3, #1
 800599e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a0:	f7fd f8ca 	bl	8002b38 <HAL_GetTick>
 80059a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059a8:	e009      	b.n	80059be <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059aa:	f7fd f8c5 	bl	8002b38 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e144      	b.n	8005c48 <HAL_RCC_OscConfig+0x106c>
 80059be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059c2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80059c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	fa93 f2a3 	rbit	r2, r3
 80059da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059de:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80059e2:	601a      	str	r2, [r3, #0]
  return result;
 80059e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059e8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80059ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059ee:	fab3 f383 	clz	r3, r3
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d102      	bne.n	8005a08 <HAL_RCC_OscConfig+0xe2c>
 8005a02:	4b54      	ldr	r3, [pc, #336]	; (8005b54 <HAL_RCC_OscConfig+0xf78>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	e027      	b.n	8005a58 <HAL_RCC_OscConfig+0xe7c>
 8005a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a0c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005a10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a1a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	fa93 f2a3 	rbit	r2, r3
 8005a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a28:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a32:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005a36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a40:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	fa93 f2a3 	rbit	r2, r3
 8005a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a4e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	4b3f      	ldr	r3, [pc, #252]	; (8005b54 <HAL_RCC_OscConfig+0xf78>)
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a5c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005a60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a64:	6011      	str	r1, [r2, #0]
 8005a66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a6a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	fa92 f1a2 	rbit	r1, r2
 8005a74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a78:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005a7c:	6011      	str	r1, [r2, #0]
  return result;
 8005a7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a82:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	fab2 f282 	clz	r2, r2
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	f042 0220 	orr.w	r2, r2, #32
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	f002 021f 	and.w	r2, r2, #31
 8005a98:	2101      	movs	r1, #1
 8005a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d082      	beq.n	80059aa <HAL_RCC_OscConfig+0xdce>
 8005aa4:	e0cf      	b.n	8005c46 <HAL_RCC_OscConfig+0x106a>
 8005aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aaa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005aae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ab2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	fa93 f2a3 	rbit	r2, r3
 8005ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ac6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005aca:	601a      	str	r2, [r3, #0]
  return result;
 8005acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ad0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005ad4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad6:	fab3 f383 	clz	r3, r3
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ae0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2300      	movs	r3, #0
 8005aea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aec:	f7fd f824 	bl	8002b38 <HAL_GetTick>
 8005af0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005af4:	e009      	b.n	8005b0a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005af6:	f7fd f81f 	bl	8002b38 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e09e      	b.n	8005c48 <HAL_RCC_OscConfig+0x106c>
 8005b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b0e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005b12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b1c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	fa93 f2a3 	rbit	r2, r3
 8005b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b2a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005b2e:	601a      	str	r2, [r3, #0]
  return result;
 8005b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b34:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005b38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b3a:	fab3 f383 	clz	r3, r3
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	f043 0301 	orr.w	r3, r3, #1
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d104      	bne.n	8005b58 <HAL_RCC_OscConfig+0xf7c>
 8005b4e:	4b01      	ldr	r3, [pc, #4]	; (8005b54 <HAL_RCC_OscConfig+0xf78>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	e029      	b.n	8005ba8 <HAL_RCC_OscConfig+0xfcc>
 8005b54:	40021000 	.word	0x40021000
 8005b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b5c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b6a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	fa93 f2a3 	rbit	r2, r3
 8005b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b78:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b82:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005b86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b90:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	fa93 f2a3 	rbit	r2, r3
 8005b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b9e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	4b2b      	ldr	r3, [pc, #172]	; (8005c54 <HAL_RCC_OscConfig+0x1078>)
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bac:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005bb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005bb4:	6011      	str	r1, [r2, #0]
 8005bb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bba:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005bbe:	6812      	ldr	r2, [r2, #0]
 8005bc0:	fa92 f1a2 	rbit	r1, r2
 8005bc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bc8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005bcc:	6011      	str	r1, [r2, #0]
  return result;
 8005bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bd2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005bd6:	6812      	ldr	r2, [r2, #0]
 8005bd8:	fab2 f282 	clz	r2, r2
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	f042 0220 	orr.w	r2, r2, #32
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	f002 021f 	and.w	r2, r2, #31
 8005be8:	2101      	movs	r1, #1
 8005bea:	fa01 f202 	lsl.w	r2, r1, r2
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d180      	bne.n	8005af6 <HAL_RCC_OscConfig+0xf1a>
 8005bf4:	e027      	b.n	8005c46 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e01e      	b.n	8005c48 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c0a:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <HAL_RCC_OscConfig+0x1078>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005c16:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d10b      	bne.n	8005c42 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005c2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005c2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d001      	beq.n	8005c46 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40021000 	.word	0x40021000

08005c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b09e      	sub	sp, #120	; 0x78
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e162      	b.n	8005f36 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c70:	4b90      	ldr	r3, [pc, #576]	; (8005eb4 <HAL_RCC_ClockConfig+0x25c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d910      	bls.n	8005ca0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7e:	4b8d      	ldr	r3, [pc, #564]	; (8005eb4 <HAL_RCC_ClockConfig+0x25c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f023 0207 	bic.w	r2, r3, #7
 8005c86:	498b      	ldr	r1, [pc, #556]	; (8005eb4 <HAL_RCC_ClockConfig+0x25c>)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8e:	4b89      	ldr	r3, [pc, #548]	; (8005eb4 <HAL_RCC_ClockConfig+0x25c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d001      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e14a      	b.n	8005f36 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cac:	4b82      	ldr	r3, [pc, #520]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	497f      	ldr	r1, [pc, #508]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 80dc 	beq.w	8005e84 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d13c      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xf6>
 8005cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cd8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cdc:	fa93 f3a3 	rbit	r3, r3
 8005ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce4:	fab3 f383 	clz	r3, r3
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	f043 0301 	orr.w	r3, r3, #1
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d102      	bne.n	8005cfe <HAL_RCC_ClockConfig+0xa6>
 8005cf8:	4b6f      	ldr	r3, [pc, #444]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	e00f      	b.n	8005d1e <HAL_RCC_ClockConfig+0xc6>
 8005cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d06:	fa93 f3a3 	rbit	r3, r3
 8005d0a:	667b      	str	r3, [r7, #100]	; 0x64
 8005d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d10:	663b      	str	r3, [r7, #96]	; 0x60
 8005d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d14:	fa93 f3a3 	rbit	r3, r3
 8005d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d1a:	4b67      	ldr	r3, [pc, #412]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d22:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d26:	fa92 f2a2 	rbit	r2, r2
 8005d2a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005d2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d2e:	fab2 f282 	clz	r2, r2
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	f042 0220 	orr.w	r2, r2, #32
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	f002 021f 	and.w	r2, r2, #31
 8005d3e:	2101      	movs	r1, #1
 8005d40:	fa01 f202 	lsl.w	r2, r1, r2
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d17b      	bne.n	8005e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e0f3      	b.n	8005f36 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d13c      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0x178>
 8005d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5e:	fa93 f3a3 	rbit	r3, r3
 8005d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d66:	fab3 f383 	clz	r3, r3
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	095b      	lsrs	r3, r3, #5
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f043 0301 	orr.w	r3, r3, #1
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d102      	bne.n	8005d80 <HAL_RCC_ClockConfig+0x128>
 8005d7a:	4b4f      	ldr	r3, [pc, #316]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	e00f      	b.n	8005da0 <HAL_RCC_ClockConfig+0x148>
 8005d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d88:	fa93 f3a3 	rbit	r3, r3
 8005d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d92:	643b      	str	r3, [r7, #64]	; 0x40
 8005d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d96:	fa93 f3a3 	rbit	r3, r3
 8005d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d9c:	4b46      	ldr	r3, [pc, #280]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005da4:	63ba      	str	r2, [r7, #56]	; 0x38
 8005da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005da8:	fa92 f2a2 	rbit	r2, r2
 8005dac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005db0:	fab2 f282 	clz	r2, r2
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	f042 0220 	orr.w	r2, r2, #32
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	f002 021f 	and.w	r2, r2, #31
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d13a      	bne.n	8005e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e0b2      	b.n	8005f36 <HAL_RCC_ClockConfig+0x2de>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	fa93 f3a3 	rbit	r3, r3
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dde:	fab3 f383 	clz	r3, r3
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	f043 0301 	orr.w	r3, r3, #1
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d102      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x1a0>
 8005df2:	4b31      	ldr	r3, [pc, #196]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	e00d      	b.n	8005e14 <HAL_RCC_ClockConfig+0x1bc>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	fa93 f3a3 	rbit	r3, r3
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
 8005e04:	2302      	movs	r3, #2
 8005e06:	623b      	str	r3, [r7, #32]
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	fa93 f3a3 	rbit	r3, r3
 8005e0e:	61fb      	str	r3, [r7, #28]
 8005e10:	4b29      	ldr	r3, [pc, #164]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	2202      	movs	r2, #2
 8005e16:	61ba      	str	r2, [r7, #24]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	fa92 f2a2 	rbit	r2, r2
 8005e1e:	617a      	str	r2, [r7, #20]
  return result;
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	fab2 f282 	clz	r2, r2
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	f042 0220 	orr.w	r2, r2, #32
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	f002 021f 	and.w	r2, r2, #31
 8005e32:	2101      	movs	r1, #1
 8005e34:	fa01 f202 	lsl.w	r2, r1, r2
 8005e38:	4013      	ands	r3, r2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e079      	b.n	8005f36 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e42:	4b1d      	ldr	r3, [pc, #116]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f023 0203 	bic.w	r2, r3, #3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	491a      	ldr	r1, [pc, #104]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e54:	f7fc fe70 	bl	8002b38 <HAL_GetTick>
 8005e58:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5a:	e00a      	b.n	8005e72 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e5c:	f7fc fe6c 	bl	8002b38 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e061      	b.n	8005f36 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e72:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f003 020c 	and.w	r2, r3, #12
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d1eb      	bne.n	8005e5c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e84:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <HAL_RCC_ClockConfig+0x25c>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d214      	bcs.n	8005ebc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e92:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <HAL_RCC_ClockConfig+0x25c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f023 0207 	bic.w	r2, r3, #7
 8005e9a:	4906      	ldr	r1, [pc, #24]	; (8005eb4 <HAL_RCC_ClockConfig+0x25c>)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ea2:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <HAL_RCC_ClockConfig+0x25c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d005      	beq.n	8005ebc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e040      	b.n	8005f36 <HAL_RCC_ClockConfig+0x2de>
 8005eb4:	40022000 	.word	0x40022000
 8005eb8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <HAL_RCC_ClockConfig+0x2e8>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	491a      	ldr	r1, [pc, #104]	; (8005f40 <HAL_RCC_ClockConfig+0x2e8>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d009      	beq.n	8005efa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ee6:	4b16      	ldr	r3, [pc, #88]	; (8005f40 <HAL_RCC_ClockConfig+0x2e8>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4912      	ldr	r1, [pc, #72]	; (8005f40 <HAL_RCC_ClockConfig+0x2e8>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005efa:	f000 f829 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8005efe:	4601      	mov	r1, r0
 8005f00:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <HAL_RCC_ClockConfig+0x2e8>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f08:	22f0      	movs	r2, #240	; 0xf0
 8005f0a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	fa92 f2a2 	rbit	r2, r2
 8005f12:	60fa      	str	r2, [r7, #12]
  return result;
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	fab2 f282 	clz	r2, r2
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	40d3      	lsrs	r3, r2
 8005f1e:	4a09      	ldr	r2, [pc, #36]	; (8005f44 <HAL_RCC_ClockConfig+0x2ec>)
 8005f20:	5cd3      	ldrb	r3, [r2, r3]
 8005f22:	fa21 f303 	lsr.w	r3, r1, r3
 8005f26:	4a08      	ldr	r2, [pc, #32]	; (8005f48 <HAL_RCC_ClockConfig+0x2f0>)
 8005f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005f2a:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <HAL_RCC_ClockConfig+0x2f4>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fc fdbe 	bl	8002ab0 <HAL_InitTick>
  
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3778      	adds	r7, #120	; 0x78
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40021000 	.word	0x40021000
 8005f44:	0800aeac 	.word	0x0800aeac
 8005f48:	20000028 	.word	0x20000028
 8005f4c:	2000002c 	.word	0x2000002c

08005f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b08b      	sub	sp, #44	; 0x2c
 8005f54:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005f6a:	4b29      	ldr	r3, [pc, #164]	; (8006010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d002      	beq.n	8005f80 <HAL_RCC_GetSysClockFreq+0x30>
 8005f7a:	2b08      	cmp	r3, #8
 8005f7c:	d003      	beq.n	8005f86 <HAL_RCC_GetSysClockFreq+0x36>
 8005f7e:	e03c      	b.n	8005ffa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f80:	4b24      	ldr	r3, [pc, #144]	; (8006014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005f82:	623b      	str	r3, [r7, #32]
      break;
 8005f84:	e03c      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005f8c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005f90:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	fa92 f2a2 	rbit	r2, r2
 8005f98:	607a      	str	r2, [r7, #4]
  return result;
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	fab2 f282 	clz	r2, r2
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	40d3      	lsrs	r3, r2
 8005fa4:	4a1c      	ldr	r2, [pc, #112]	; (8006018 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005fa6:	5cd3      	ldrb	r3, [r2, r3]
 8005fa8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005faa:	4b19      	ldr	r3, [pc, #100]	; (8006010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	220f      	movs	r2, #15
 8005fb4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	fa92 f2a2 	rbit	r2, r2
 8005fbc:	60fa      	str	r2, [r7, #12]
  return result;
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	fab2 f282 	clz	r2, r2
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	40d3      	lsrs	r3, r2
 8005fc8:	4a14      	ldr	r2, [pc, #80]	; (800601c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005fca:	5cd3      	ldrb	r3, [r2, r3]
 8005fcc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005fd8:	4a0e      	ldr	r2, [pc, #56]	; (8006014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	fb02 f303 	mul.w	r3, r2, r3
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe8:	e004      	b.n	8005ff4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	4a0c      	ldr	r2, [pc, #48]	; (8006020 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005fee:	fb02 f303 	mul.w	r3, r2, r3
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	623b      	str	r3, [r7, #32]
      break;
 8005ff8:	e002      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ffa:	4b06      	ldr	r3, [pc, #24]	; (8006014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ffc:	623b      	str	r3, [r7, #32]
      break;
 8005ffe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006000:	6a3b      	ldr	r3, [r7, #32]
}
 8006002:	4618      	mov	r0, r3
 8006004:	372c      	adds	r7, #44	; 0x2c
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40021000 	.word	0x40021000
 8006014:	007a1200 	.word	0x007a1200
 8006018:	0800aec4 	.word	0x0800aec4
 800601c:	0800aed4 	.word	0x0800aed4
 8006020:	003d0900 	.word	0x003d0900

08006024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006028:	4b03      	ldr	r3, [pc, #12]	; (8006038 <HAL_RCC_GetHCLKFreq+0x14>)
 800602a:	681b      	ldr	r3, [r3, #0]
}
 800602c:	4618      	mov	r0, r3
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	20000028 	.word	0x20000028

0800603c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006042:	f7ff ffef 	bl	8006024 <HAL_RCC_GetHCLKFreq>
 8006046:	4601      	mov	r1, r0
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006050:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006054:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	fa92 f2a2 	rbit	r2, r2
 800605c:	603a      	str	r2, [r7, #0]
  return result;
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	fab2 f282 	clz	r2, r2
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	40d3      	lsrs	r3, r2
 8006068:	4a04      	ldr	r2, [pc, #16]	; (800607c <HAL_RCC_GetPCLK1Freq+0x40>)
 800606a:	5cd3      	ldrb	r3, [r2, r3]
 800606c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006070:	4618      	mov	r0, r3
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40021000 	.word	0x40021000
 800607c:	0800aebc 	.word	0x0800aebc

08006080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006086:	f7ff ffcd 	bl	8006024 <HAL_RCC_GetHCLKFreq>
 800608a:	4601      	mov	r1, r0
 800608c:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006094:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006098:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	fa92 f2a2 	rbit	r2, r2
 80060a0:	603a      	str	r2, [r7, #0]
  return result;
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	fab2 f282 	clz	r2, r2
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	40d3      	lsrs	r3, r2
 80060ac:	4a04      	ldr	r2, [pc, #16]	; (80060c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80060ae:	5cd3      	ldrb	r3, [r2, r3]
 80060b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40021000 	.word	0x40021000
 80060c0:	0800aebc 	.word	0x0800aebc

080060c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b092      	sub	sp, #72	; 0x48
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80060d4:	2300      	movs	r3, #0
 80060d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 80d4 	beq.w	8006290 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060e8:	4b4e      	ldr	r3, [pc, #312]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10e      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060f4:	4b4b      	ldr	r3, [pc, #300]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	4a4a      	ldr	r2, [pc, #296]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fe:	61d3      	str	r3, [r2, #28]
 8006100:	4b48      	ldr	r3, [pc, #288]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006108:	60bb      	str	r3, [r7, #8]
 800610a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800610c:	2301      	movs	r3, #1
 800610e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006112:	4b45      	ldr	r3, [pc, #276]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611a:	2b00      	cmp	r3, #0
 800611c:	d118      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800611e:	4b42      	ldr	r3, [pc, #264]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a41      	ldr	r2, [pc, #260]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006128:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800612a:	f7fc fd05 	bl	8002b38 <HAL_GetTick>
 800612e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006130:	e008      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006132:	f7fc fd01 	bl	8002b38 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b64      	cmp	r3, #100	; 0x64
 800613e:	d901      	bls.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e169      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006144:	4b38      	ldr	r3, [pc, #224]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0f0      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006150:	4b34      	ldr	r3, [pc, #208]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800615a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8084 	beq.w	800626a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800616a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800616c:	429a      	cmp	r2, r3
 800616e:	d07c      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006170:	4b2c      	ldr	r3, [pc, #176]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800617a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800617e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	fa93 f3a3 	rbit	r3, r3
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800618a:	fab3 f383 	clz	r3, r3
 800618e:	b2db      	uxtb	r3, r3
 8006190:	461a      	mov	r2, r3
 8006192:	4b26      	ldr	r3, [pc, #152]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	461a      	mov	r2, r3
 800619a:	2301      	movs	r3, #1
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	fa93 f3a3 	rbit	r3, r3
 80061aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80061ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061ae:	fab3 f383 	clz	r3, r3
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	4b1d      	ldr	r3, [pc, #116]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061b8:	4413      	add	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	461a      	mov	r2, r3
 80061be:	2300      	movs	r3, #0
 80061c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061c2:	4a18      	ldr	r2, [pc, #96]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d04b      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d2:	f7fc fcb1 	bl	8002b38 <HAL_GetTick>
 80061d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d8:	e00a      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061da:	f7fc fcad 	bl	8002b38 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e113      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80061f0:	2302      	movs	r3, #2
 80061f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	fa93 f3a3 	rbit	r3, r3
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
 80061fc:	2302      	movs	r3, #2
 80061fe:	623b      	str	r3, [r7, #32]
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	fa93 f3a3 	rbit	r3, r3
 8006206:	61fb      	str	r3, [r7, #28]
  return result;
 8006208:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800620a:	fab3 f383 	clz	r3, r3
 800620e:	b2db      	uxtb	r3, r3
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	b2db      	uxtb	r3, r3
 8006214:	f043 0302 	orr.w	r3, r3, #2
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d108      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800621e:	4b01      	ldr	r3, [pc, #4]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	e00d      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006224:	40021000 	.word	0x40021000
 8006228:	40007000 	.word	0x40007000
 800622c:	10908100 	.word	0x10908100
 8006230:	2302      	movs	r3, #2
 8006232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	fa93 f3a3 	rbit	r3, r3
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	4b78      	ldr	r3, [pc, #480]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	2202      	movs	r2, #2
 8006242:	613a      	str	r2, [r7, #16]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	fa92 f2a2 	rbit	r2, r2
 800624a:	60fa      	str	r2, [r7, #12]
  return result;
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	fab2 f282 	clz	r2, r2
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	f002 021f 	and.w	r2, r2, #31
 800625e:	2101      	movs	r1, #1
 8006260:	fa01 f202 	lsl.w	r2, r1, r2
 8006264:	4013      	ands	r3, r2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0b7      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800626a:	4b6d      	ldr	r3, [pc, #436]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	496a      	ldr	r1, [pc, #424]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006278:	4313      	orrs	r3, r2
 800627a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800627c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006280:	2b01      	cmp	r3, #1
 8006282:	d105      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006284:	4b66      	ldr	r3, [pc, #408]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	4a65      	ldr	r2, [pc, #404]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800628a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800628e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800629c:	4b60      	ldr	r3, [pc, #384]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	f023 0203 	bic.w	r2, r3, #3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	495d      	ldr	r1, [pc, #372]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d008      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062ba:	4b59      	ldr	r3, [pc, #356]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	4956      	ldr	r1, [pc, #344]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d008      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062d8:	4b51      	ldr	r3, [pc, #324]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	494e      	ldr	r1, [pc, #312]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d008      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062f6:	4b4a      	ldr	r3, [pc, #296]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	f023 0210 	bic.w	r2, r3, #16
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	4947      	ldr	r1, [pc, #284]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006304:	4313      	orrs	r3, r2
 8006306:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d008      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006314:	4b42      	ldr	r3, [pc, #264]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	493f      	ldr	r1, [pc, #252]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006322:	4313      	orrs	r3, r2
 8006324:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d008      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006332:	4b3b      	ldr	r3, [pc, #236]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	f023 0220 	bic.w	r2, r3, #32
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	4938      	ldr	r1, [pc, #224]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006340:	4313      	orrs	r3, r2
 8006342:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006350:	4b33      	ldr	r3, [pc, #204]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	4930      	ldr	r1, [pc, #192]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800635e:	4313      	orrs	r3, r2
 8006360:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b00      	cmp	r3, #0
 800636c:	d008      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800636e:	4b2c      	ldr	r3, [pc, #176]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	4929      	ldr	r1, [pc, #164]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800637c:	4313      	orrs	r3, r2
 800637e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800638c:	4b24      	ldr	r3, [pc, #144]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	4921      	ldr	r1, [pc, #132]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800639a:	4313      	orrs	r3, r2
 800639c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d008      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80063aa:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	491a      	ldr	r1, [pc, #104]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80063c8:	4b15      	ldr	r3, [pc, #84]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	4912      	ldr	r1, [pc, #72]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80063e6:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	490b      	ldr	r1, [pc, #44]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006404:	4b06      	ldr	r3, [pc, #24]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006408:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006410:	4903      	ldr	r1, [pc, #12]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006412:	4313      	orrs	r3, r2
 8006414:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3748      	adds	r7, #72	; 0x48
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	40021000 	.word	0x40021000

08006424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e09d      	b.n	8006572 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	2b00      	cmp	r3, #0
 800643c:	d108      	bne.n	8006450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006446:	d009      	beq.n	800645c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	61da      	str	r2, [r3, #28]
 800644e:	e005      	b.n	800645c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fc f862 	bl	8002540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006492:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800649c:	d902      	bls.n	80064a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e002      	b.n	80064aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064b2:	d007      	beq.n	80064c4 <HAL_SPI_Init+0xa0>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064bc:	d002      	beq.n	80064c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064d4:	431a      	orrs	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	431a      	orrs	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006506:	ea42 0103 	orr.w	r1, r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	0c1b      	lsrs	r3, r3, #16
 8006520:	f003 0204 	and.w	r2, r3, #4
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	f003 0310 	and.w	r3, r3, #16
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006540:	ea42 0103 	orr.w	r1, r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69da      	ldr	r2, [r3, #28]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006560:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e049      	b.n	8006620 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d106      	bne.n	80065a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7fc f80f 	bl	80025c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2202      	movs	r2, #2
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f000 fdb3 	bl	8007124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	d001      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e04a      	b.n	80066d6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0201 	orr.w	r2, r2, #1
 8006656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a21      	ldr	r2, [pc, #132]	; (80066e4 <HAL_TIM_Base_Start_IT+0xbc>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d018      	beq.n	8006694 <HAL_TIM_Base_Start_IT+0x6c>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666a:	d013      	beq.n	8006694 <HAL_TIM_Base_Start_IT+0x6c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00e      	beq.n	8006694 <HAL_TIM_Base_Start_IT+0x6c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a1c      	ldr	r2, [pc, #112]	; (80066ec <HAL_TIM_Base_Start_IT+0xc4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d009      	beq.n	8006694 <HAL_TIM_Base_Start_IT+0x6c>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a1a      	ldr	r2, [pc, #104]	; (80066f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <HAL_TIM_Base_Start_IT+0x6c>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d115      	bne.n	80066c0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	4b17      	ldr	r3, [pc, #92]	; (80066f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800669c:	4013      	ands	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b06      	cmp	r3, #6
 80066a4:	d015      	beq.n	80066d2 <HAL_TIM_Base_Start_IT+0xaa>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ac:	d011      	beq.n	80066d2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0201 	orr.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066be:	e008      	b.n	80066d2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0201 	orr.w	r2, r2, #1
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	e000      	b.n	80066d4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40013400 	.word	0x40013400
 80066f4:	40014000 	.word	0x40014000
 80066f8:	00010007 	.word	0x00010007

080066fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e049      	b.n	80067a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fb ffa8 	bl	8002678 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3304      	adds	r3, #4
 8006738:	4619      	mov	r1, r3
 800673a:	4610      	mov	r0, r2
 800673c:	f000 fcf2 	bl	8007124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d109      	bne.n	80067d0 <HAL_TIM_PWM_Start+0x24>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	bf14      	ite	ne
 80067c8:	2301      	movne	r3, #1
 80067ca:	2300      	moveq	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	e03c      	b.n	800684a <HAL_TIM_PWM_Start+0x9e>
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d109      	bne.n	80067ea <HAL_TIM_PWM_Start+0x3e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b01      	cmp	r3, #1
 80067e0:	bf14      	ite	ne
 80067e2:	2301      	movne	r3, #1
 80067e4:	2300      	moveq	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	e02f      	b.n	800684a <HAL_TIM_PWM_Start+0x9e>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d109      	bne.n	8006804 <HAL_TIM_PWM_Start+0x58>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	bf14      	ite	ne
 80067fc:	2301      	movne	r3, #1
 80067fe:	2300      	moveq	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	e022      	b.n	800684a <HAL_TIM_PWM_Start+0x9e>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b0c      	cmp	r3, #12
 8006808:	d109      	bne.n	800681e <HAL_TIM_PWM_Start+0x72>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b01      	cmp	r3, #1
 8006814:	bf14      	ite	ne
 8006816:	2301      	movne	r3, #1
 8006818:	2300      	moveq	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	e015      	b.n	800684a <HAL_TIM_PWM_Start+0x9e>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b10      	cmp	r3, #16
 8006822:	d109      	bne.n	8006838 <HAL_TIM_PWM_Start+0x8c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	bf14      	ite	ne
 8006830:	2301      	movne	r3, #1
 8006832:	2300      	moveq	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	e008      	b.n	800684a <HAL_TIM_PWM_Start+0x9e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b01      	cmp	r3, #1
 8006842:	bf14      	ite	ne
 8006844:	2301      	movne	r3, #1
 8006846:	2300      	moveq	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e097      	b.n	8006982 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <HAL_TIM_PWM_Start+0xb6>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006860:	e023      	b.n	80068aa <HAL_TIM_PWM_Start+0xfe>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b04      	cmp	r3, #4
 8006866:	d104      	bne.n	8006872 <HAL_TIM_PWM_Start+0xc6>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006870:	e01b      	b.n	80068aa <HAL_TIM_PWM_Start+0xfe>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b08      	cmp	r3, #8
 8006876:	d104      	bne.n	8006882 <HAL_TIM_PWM_Start+0xd6>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006880:	e013      	b.n	80068aa <HAL_TIM_PWM_Start+0xfe>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b0c      	cmp	r3, #12
 8006886:	d104      	bne.n	8006892 <HAL_TIM_PWM_Start+0xe6>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006890:	e00b      	b.n	80068aa <HAL_TIM_PWM_Start+0xfe>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b10      	cmp	r3, #16
 8006896:	d104      	bne.n	80068a2 <HAL_TIM_PWM_Start+0xf6>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068a0:	e003      	b.n	80068aa <HAL_TIM_PWM_Start+0xfe>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2201      	movs	r2, #1
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f001 f836 	bl	8007924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a33      	ldr	r2, [pc, #204]	; (800698c <HAL_TIM_PWM_Start+0x1e0>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d013      	beq.n	80068ea <HAL_TIM_PWM_Start+0x13e>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a32      	ldr	r2, [pc, #200]	; (8006990 <HAL_TIM_PWM_Start+0x1e4>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00e      	beq.n	80068ea <HAL_TIM_PWM_Start+0x13e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a30      	ldr	r2, [pc, #192]	; (8006994 <HAL_TIM_PWM_Start+0x1e8>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d009      	beq.n	80068ea <HAL_TIM_PWM_Start+0x13e>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a2f      	ldr	r2, [pc, #188]	; (8006998 <HAL_TIM_PWM_Start+0x1ec>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d004      	beq.n	80068ea <HAL_TIM_PWM_Start+0x13e>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a2d      	ldr	r2, [pc, #180]	; (800699c <HAL_TIM_PWM_Start+0x1f0>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d101      	bne.n	80068ee <HAL_TIM_PWM_Start+0x142>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <HAL_TIM_PWM_Start+0x144>
 80068ee:	2300      	movs	r3, #0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006902:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a20      	ldr	r2, [pc, #128]	; (800698c <HAL_TIM_PWM_Start+0x1e0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d018      	beq.n	8006940 <HAL_TIM_PWM_Start+0x194>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006916:	d013      	beq.n	8006940 <HAL_TIM_PWM_Start+0x194>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a20      	ldr	r2, [pc, #128]	; (80069a0 <HAL_TIM_PWM_Start+0x1f4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00e      	beq.n	8006940 <HAL_TIM_PWM_Start+0x194>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1f      	ldr	r2, [pc, #124]	; (80069a4 <HAL_TIM_PWM_Start+0x1f8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d009      	beq.n	8006940 <HAL_TIM_PWM_Start+0x194>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a17      	ldr	r2, [pc, #92]	; (8006990 <HAL_TIM_PWM_Start+0x1e4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d004      	beq.n	8006940 <HAL_TIM_PWM_Start+0x194>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a16      	ldr	r2, [pc, #88]	; (8006994 <HAL_TIM_PWM_Start+0x1e8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d115      	bne.n	800696c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	4b18      	ldr	r3, [pc, #96]	; (80069a8 <HAL_TIM_PWM_Start+0x1fc>)
 8006948:	4013      	ands	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b06      	cmp	r3, #6
 8006950:	d015      	beq.n	800697e <HAL_TIM_PWM_Start+0x1d2>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006958:	d011      	beq.n	800697e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0201 	orr.w	r2, r2, #1
 8006968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696a:	e008      	b.n	800697e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	e000      	b.n	8006980 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800697e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40012c00 	.word	0x40012c00
 8006990:	40013400 	.word	0x40013400
 8006994:	40014000 	.word	0x40014000
 8006998:	40014400 	.word	0x40014400
 800699c:	40014800 	.word	0x40014800
 80069a0:	40000400 	.word	0x40000400
 80069a4:	40000800 	.word	0x40000800
 80069a8:	00010007 	.word	0x00010007

080069ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2200      	movs	r2, #0
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 ffb0 	bl	8007924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a3e      	ldr	r2, [pc, #248]	; (8006ac4 <HAL_TIM_PWM_Stop+0x118>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d013      	beq.n	80069f6 <HAL_TIM_PWM_Stop+0x4a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a3d      	ldr	r2, [pc, #244]	; (8006ac8 <HAL_TIM_PWM_Stop+0x11c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00e      	beq.n	80069f6 <HAL_TIM_PWM_Stop+0x4a>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a3b      	ldr	r2, [pc, #236]	; (8006acc <HAL_TIM_PWM_Stop+0x120>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d009      	beq.n	80069f6 <HAL_TIM_PWM_Stop+0x4a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a3a      	ldr	r2, [pc, #232]	; (8006ad0 <HAL_TIM_PWM_Stop+0x124>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d004      	beq.n	80069f6 <HAL_TIM_PWM_Stop+0x4a>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a38      	ldr	r2, [pc, #224]	; (8006ad4 <HAL_TIM_PWM_Stop+0x128>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d101      	bne.n	80069fa <HAL_TIM_PWM_Stop+0x4e>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <HAL_TIM_PWM_Stop+0x50>
 80069fa:	2300      	movs	r3, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d017      	beq.n	8006a30 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a1a      	ldr	r2, [r3, #32]
 8006a06:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10f      	bne.n	8006a30 <HAL_TIM_PWM_Stop+0x84>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6a1a      	ldr	r2, [r3, #32]
 8006a16:	f240 4344 	movw	r3, #1092	; 0x444
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d107      	bne.n	8006a30 <HAL_TIM_PWM_Stop+0x84>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6a1a      	ldr	r2, [r3, #32]
 8006a36:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10f      	bne.n	8006a60 <HAL_TIM_PWM_Stop+0xb4>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6a1a      	ldr	r2, [r3, #32]
 8006a46:	f240 4344 	movw	r3, #1092	; 0x444
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d107      	bne.n	8006a60 <HAL_TIM_PWM_Stop+0xb4>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0201 	bic.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <HAL_TIM_PWM_Stop+0xc4>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a6e:	e023      	b.n	8006ab8 <HAL_TIM_PWM_Stop+0x10c>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d104      	bne.n	8006a80 <HAL_TIM_PWM_Stop+0xd4>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a7e:	e01b      	b.n	8006ab8 <HAL_TIM_PWM_Stop+0x10c>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d104      	bne.n	8006a90 <HAL_TIM_PWM_Stop+0xe4>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a8e:	e013      	b.n	8006ab8 <HAL_TIM_PWM_Stop+0x10c>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b0c      	cmp	r3, #12
 8006a94:	d104      	bne.n	8006aa0 <HAL_TIM_PWM_Stop+0xf4>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a9e:	e00b      	b.n	8006ab8 <HAL_TIM_PWM_Stop+0x10c>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b10      	cmp	r3, #16
 8006aa4:	d104      	bne.n	8006ab0 <HAL_TIM_PWM_Stop+0x104>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aae:	e003      	b.n	8006ab8 <HAL_TIM_PWM_Stop+0x10c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40013400 	.word	0x40013400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40014400 	.word	0x40014400
 8006ad4:	40014800 	.word	0x40014800

08006ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d122      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d11b      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0202 	mvn.w	r2, #2
 8006b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fae3 	bl	80070e6 <HAL_TIM_IC_CaptureCallback>
 8006b20:	e005      	b.n	8006b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fad5 	bl	80070d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fae6 	bl	80070fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0304 	and.w	r3, r3, #4
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d122      	bne.n	8006b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d11b      	bne.n	8006b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0204 	mvn.w	r2, #4
 8006b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fab9 	bl	80070e6 <HAL_TIM_IC_CaptureCallback>
 8006b74:	e005      	b.n	8006b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 faab 	bl	80070d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fabc 	bl	80070fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b08      	cmp	r3, #8
 8006b94:	d122      	bne.n	8006bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d11b      	bne.n	8006bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f06f 0208 	mvn.w	r2, #8
 8006bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fa8f 	bl	80070e6 <HAL_TIM_IC_CaptureCallback>
 8006bc8:	e005      	b.n	8006bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fa81 	bl	80070d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fa92 	bl	80070fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f003 0310 	and.w	r3, r3, #16
 8006be6:	2b10      	cmp	r3, #16
 8006be8:	d122      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b10      	cmp	r3, #16
 8006bf6:	d11b      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f06f 0210 	mvn.w	r2, #16
 8006c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2208      	movs	r2, #8
 8006c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa65 	bl	80070e6 <HAL_TIM_IC_CaptureCallback>
 8006c1c:	e005      	b.n	8006c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fa57 	bl	80070d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fa68 	bl	80070fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d10e      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d107      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f06f 0201 	mvn.w	r2, #1
 8006c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7fa f834 	bl	8000cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c66:	2b80      	cmp	r3, #128	; 0x80
 8006c68:	d10e      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c74:	2b80      	cmp	r3, #128	; 0x80
 8006c76:	d107      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 ff7c 	bl	8007b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c96:	d10e      	bne.n	8006cb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca2:	2b80      	cmp	r3, #128	; 0x80
 8006ca4:	d107      	bne.n	8006cb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 ff6f 	bl	8007b94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc0:	2b40      	cmp	r3, #64	; 0x40
 8006cc2:	d10e      	bne.n	8006ce2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b40      	cmp	r3, #64	; 0x40
 8006cd0:	d107      	bne.n	8006ce2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fa16 	bl	800710e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d10e      	bne.n	8006d0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d107      	bne.n	8006d0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f06f 0220 	mvn.w	r2, #32
 8006d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 ff2f 	bl	8007b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d0e:	bf00      	nop
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e0ff      	b.n	8006f36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b14      	cmp	r3, #20
 8006d42:	f200 80f0 	bhi.w	8006f26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d46:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006da1 	.word	0x08006da1
 8006d50:	08006f27 	.word	0x08006f27
 8006d54:	08006f27 	.word	0x08006f27
 8006d58:	08006f27 	.word	0x08006f27
 8006d5c:	08006de1 	.word	0x08006de1
 8006d60:	08006f27 	.word	0x08006f27
 8006d64:	08006f27 	.word	0x08006f27
 8006d68:	08006f27 	.word	0x08006f27
 8006d6c:	08006e23 	.word	0x08006e23
 8006d70:	08006f27 	.word	0x08006f27
 8006d74:	08006f27 	.word	0x08006f27
 8006d78:	08006f27 	.word	0x08006f27
 8006d7c:	08006e63 	.word	0x08006e63
 8006d80:	08006f27 	.word	0x08006f27
 8006d84:	08006f27 	.word	0x08006f27
 8006d88:	08006f27 	.word	0x08006f27
 8006d8c:	08006ea5 	.word	0x08006ea5
 8006d90:	08006f27 	.word	0x08006f27
 8006d94:	08006f27 	.word	0x08006f27
 8006d98:	08006f27 	.word	0x08006f27
 8006d9c:	08006ee5 	.word	0x08006ee5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68b9      	ldr	r1, [r7, #8]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fa4c 	bl	8007244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0208 	orr.w	r2, r2, #8
 8006dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	699a      	ldr	r2, [r3, #24]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0204 	bic.w	r2, r2, #4
 8006dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6999      	ldr	r1, [r3, #24]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	691a      	ldr	r2, [r3, #16]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	619a      	str	r2, [r3, #24]
      break;
 8006dde:	e0a5      	b.n	8006f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68b9      	ldr	r1, [r7, #8]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fabc 	bl	8007364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6999      	ldr	r1, [r3, #24]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	021a      	lsls	r2, r3, #8
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	619a      	str	r2, [r3, #24]
      break;
 8006e20:	e084      	b.n	8006f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68b9      	ldr	r1, [r7, #8]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 fb25 	bl	8007478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69da      	ldr	r2, [r3, #28]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0208 	orr.w	r2, r2, #8
 8006e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69da      	ldr	r2, [r3, #28]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0204 	bic.w	r2, r2, #4
 8006e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69d9      	ldr	r1, [r3, #28]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	61da      	str	r2, [r3, #28]
      break;
 8006e60:	e064      	b.n	8006f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68b9      	ldr	r1, [r7, #8]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 fb8d 	bl	8007588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69da      	ldr	r2, [r3, #28]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69d9      	ldr	r1, [r3, #28]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	021a      	lsls	r2, r3, #8
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	61da      	str	r2, [r3, #28]
      break;
 8006ea2:	e043      	b.n	8006f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fbd6 	bl	800765c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0208 	orr.w	r2, r2, #8
 8006ebe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0204 	bic.w	r2, r2, #4
 8006ece:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	691a      	ldr	r2, [r3, #16]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ee2:	e023      	b.n	8006f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68b9      	ldr	r1, [r7, #8]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fc1a 	bl	8007724 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006efe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	021a      	lsls	r2, r3, #8
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f24:	e002      	b.n	8006f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	75fb      	strb	r3, [r7, #23]
      break;
 8006f2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop

08006f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d101      	bne.n	8006f5c <HAL_TIM_ConfigClockSource+0x1c>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e0b6      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x18a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f98:	d03e      	beq.n	8007018 <HAL_TIM_ConfigClockSource+0xd8>
 8006f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f9e:	f200 8087 	bhi.w	80070b0 <HAL_TIM_ConfigClockSource+0x170>
 8006fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa6:	f000 8086 	beq.w	80070b6 <HAL_TIM_ConfigClockSource+0x176>
 8006faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fae:	d87f      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x170>
 8006fb0:	2b70      	cmp	r3, #112	; 0x70
 8006fb2:	d01a      	beq.n	8006fea <HAL_TIM_ConfigClockSource+0xaa>
 8006fb4:	2b70      	cmp	r3, #112	; 0x70
 8006fb6:	d87b      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x170>
 8006fb8:	2b60      	cmp	r3, #96	; 0x60
 8006fba:	d050      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x11e>
 8006fbc:	2b60      	cmp	r3, #96	; 0x60
 8006fbe:	d877      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x170>
 8006fc0:	2b50      	cmp	r3, #80	; 0x50
 8006fc2:	d03c      	beq.n	800703e <HAL_TIM_ConfigClockSource+0xfe>
 8006fc4:	2b50      	cmp	r3, #80	; 0x50
 8006fc6:	d873      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x170>
 8006fc8:	2b40      	cmp	r3, #64	; 0x40
 8006fca:	d058      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x13e>
 8006fcc:	2b40      	cmp	r3, #64	; 0x40
 8006fce:	d86f      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x170>
 8006fd0:	2b30      	cmp	r3, #48	; 0x30
 8006fd2:	d064      	beq.n	800709e <HAL_TIM_ConfigClockSource+0x15e>
 8006fd4:	2b30      	cmp	r3, #48	; 0x30
 8006fd6:	d86b      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x170>
 8006fd8:	2b20      	cmp	r3, #32
 8006fda:	d060      	beq.n	800709e <HAL_TIM_ConfigClockSource+0x15e>
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	d867      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x170>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d05c      	beq.n	800709e <HAL_TIM_ConfigClockSource+0x15e>
 8006fe4:	2b10      	cmp	r3, #16
 8006fe6:	d05a      	beq.n	800709e <HAL_TIM_ConfigClockSource+0x15e>
 8006fe8:	e062      	b.n	80070b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6818      	ldr	r0, [r3, #0]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	6899      	ldr	r1, [r3, #8]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f000 fc73 	bl	80078e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800700c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	609a      	str	r2, [r3, #8]
      break;
 8007016:	e04f      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6818      	ldr	r0, [r3, #0]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	6899      	ldr	r1, [r3, #8]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f000 fc5c 	bl	80078e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800703a:	609a      	str	r2, [r3, #8]
      break;
 800703c:	e03c      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6859      	ldr	r1, [r3, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	461a      	mov	r2, r3
 800704c:	f000 fbd0 	bl	80077f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2150      	movs	r1, #80	; 0x50
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fc29 	bl	80078ae <TIM_ITRx_SetConfig>
      break;
 800705c:	e02c      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6859      	ldr	r1, [r3, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	461a      	mov	r2, r3
 800706c:	f000 fbef 	bl	800784e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2160      	movs	r1, #96	; 0x60
 8007076:	4618      	mov	r0, r3
 8007078:	f000 fc19 	bl	80078ae <TIM_ITRx_SetConfig>
      break;
 800707c:	e01c      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6818      	ldr	r0, [r3, #0]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	6859      	ldr	r1, [r3, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	461a      	mov	r2, r3
 800708c:	f000 fbb0 	bl	80077f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2140      	movs	r1, #64	; 0x40
 8007096:	4618      	mov	r0, r3
 8007098:	f000 fc09 	bl	80078ae <TIM_ITRx_SetConfig>
      break;
 800709c:	e00c      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f000 fc00 	bl	80078ae <TIM_ITRx_SetConfig>
      break;
 80070ae:	e003      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
      break;
 80070b4:	e000      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80070b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070da:	bf00      	nop
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
	...

08007124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a3c      	ldr	r2, [pc, #240]	; (8007228 <TIM_Base_SetConfig+0x104>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00f      	beq.n	800715c <TIM_Base_SetConfig+0x38>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007142:	d00b      	beq.n	800715c <TIM_Base_SetConfig+0x38>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a39      	ldr	r2, [pc, #228]	; (800722c <TIM_Base_SetConfig+0x108>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d007      	beq.n	800715c <TIM_Base_SetConfig+0x38>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a38      	ldr	r2, [pc, #224]	; (8007230 <TIM_Base_SetConfig+0x10c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_Base_SetConfig+0x38>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a37      	ldr	r2, [pc, #220]	; (8007234 <TIM_Base_SetConfig+0x110>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d108      	bne.n	800716e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a2d      	ldr	r2, [pc, #180]	; (8007228 <TIM_Base_SetConfig+0x104>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d01b      	beq.n	80071ae <TIM_Base_SetConfig+0x8a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800717c:	d017      	beq.n	80071ae <TIM_Base_SetConfig+0x8a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a2a      	ldr	r2, [pc, #168]	; (800722c <TIM_Base_SetConfig+0x108>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d013      	beq.n	80071ae <TIM_Base_SetConfig+0x8a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a29      	ldr	r2, [pc, #164]	; (8007230 <TIM_Base_SetConfig+0x10c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00f      	beq.n	80071ae <TIM_Base_SetConfig+0x8a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a28      	ldr	r2, [pc, #160]	; (8007234 <TIM_Base_SetConfig+0x110>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00b      	beq.n	80071ae <TIM_Base_SetConfig+0x8a>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a27      	ldr	r2, [pc, #156]	; (8007238 <TIM_Base_SetConfig+0x114>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d007      	beq.n	80071ae <TIM_Base_SetConfig+0x8a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a26      	ldr	r2, [pc, #152]	; (800723c <TIM_Base_SetConfig+0x118>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d003      	beq.n	80071ae <TIM_Base_SetConfig+0x8a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a25      	ldr	r2, [pc, #148]	; (8007240 <TIM_Base_SetConfig+0x11c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d108      	bne.n	80071c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	689a      	ldr	r2, [r3, #8]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a10      	ldr	r2, [pc, #64]	; (8007228 <TIM_Base_SetConfig+0x104>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00f      	beq.n	800720c <TIM_Base_SetConfig+0xe8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a11      	ldr	r2, [pc, #68]	; (8007234 <TIM_Base_SetConfig+0x110>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00b      	beq.n	800720c <TIM_Base_SetConfig+0xe8>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a10      	ldr	r2, [pc, #64]	; (8007238 <TIM_Base_SetConfig+0x114>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d007      	beq.n	800720c <TIM_Base_SetConfig+0xe8>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a0f      	ldr	r2, [pc, #60]	; (800723c <TIM_Base_SetConfig+0x118>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d003      	beq.n	800720c <TIM_Base_SetConfig+0xe8>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a0e      	ldr	r2, [pc, #56]	; (8007240 <TIM_Base_SetConfig+0x11c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d103      	bne.n	8007214 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	691a      	ldr	r2, [r3, #16]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	615a      	str	r2, [r3, #20]
}
 800721a:	bf00      	nop
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40012c00 	.word	0x40012c00
 800722c:	40000400 	.word	0x40000400
 8007230:	40000800 	.word	0x40000800
 8007234:	40013400 	.word	0x40013400
 8007238:	40014000 	.word	0x40014000
 800723c:	40014400 	.word	0x40014400
 8007240:	40014800 	.word	0x40014800

08007244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f023 0201 	bic.w	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0303 	bic.w	r3, r3, #3
 800727e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	4313      	orrs	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f023 0302 	bic.w	r3, r3, #2
 8007290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a2c      	ldr	r2, [pc, #176]	; (8007350 <TIM_OC1_SetConfig+0x10c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00f      	beq.n	80072c4 <TIM_OC1_SetConfig+0x80>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a2b      	ldr	r2, [pc, #172]	; (8007354 <TIM_OC1_SetConfig+0x110>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d00b      	beq.n	80072c4 <TIM_OC1_SetConfig+0x80>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a2a      	ldr	r2, [pc, #168]	; (8007358 <TIM_OC1_SetConfig+0x114>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d007      	beq.n	80072c4 <TIM_OC1_SetConfig+0x80>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a29      	ldr	r2, [pc, #164]	; (800735c <TIM_OC1_SetConfig+0x118>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d003      	beq.n	80072c4 <TIM_OC1_SetConfig+0x80>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a28      	ldr	r2, [pc, #160]	; (8007360 <TIM_OC1_SetConfig+0x11c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d10c      	bne.n	80072de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f023 0308 	bic.w	r3, r3, #8
 80072ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f023 0304 	bic.w	r3, r3, #4
 80072dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a1b      	ldr	r2, [pc, #108]	; (8007350 <TIM_OC1_SetConfig+0x10c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d00f      	beq.n	8007306 <TIM_OC1_SetConfig+0xc2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a1a      	ldr	r2, [pc, #104]	; (8007354 <TIM_OC1_SetConfig+0x110>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d00b      	beq.n	8007306 <TIM_OC1_SetConfig+0xc2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a19      	ldr	r2, [pc, #100]	; (8007358 <TIM_OC1_SetConfig+0x114>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d007      	beq.n	8007306 <TIM_OC1_SetConfig+0xc2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a18      	ldr	r2, [pc, #96]	; (800735c <TIM_OC1_SetConfig+0x118>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d003      	beq.n	8007306 <TIM_OC1_SetConfig+0xc2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a17      	ldr	r2, [pc, #92]	; (8007360 <TIM_OC1_SetConfig+0x11c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d111      	bne.n	800732a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800730c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	4313      	orrs	r3, r2
 8007328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	621a      	str	r2, [r3, #32]
}
 8007344:	bf00      	nop
 8007346:	371c      	adds	r7, #28
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	40012c00 	.word	0x40012c00
 8007354:	40013400 	.word	0x40013400
 8007358:	40014000 	.word	0x40014000
 800735c:	40014400 	.word	0x40014400
 8007360:	40014800 	.word	0x40014800

08007364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f023 0210 	bic.w	r2, r3, #16
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f023 0320 	bic.w	r3, r3, #32
 80073b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4313      	orrs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a28      	ldr	r2, [pc, #160]	; (8007464 <TIM_OC2_SetConfig+0x100>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d003      	beq.n	80073d0 <TIM_OC2_SetConfig+0x6c>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a27      	ldr	r2, [pc, #156]	; (8007468 <TIM_OC2_SetConfig+0x104>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d10d      	bne.n	80073ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a1d      	ldr	r2, [pc, #116]	; (8007464 <TIM_OC2_SetConfig+0x100>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00f      	beq.n	8007414 <TIM_OC2_SetConfig+0xb0>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a1c      	ldr	r2, [pc, #112]	; (8007468 <TIM_OC2_SetConfig+0x104>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00b      	beq.n	8007414 <TIM_OC2_SetConfig+0xb0>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a1b      	ldr	r2, [pc, #108]	; (800746c <TIM_OC2_SetConfig+0x108>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d007      	beq.n	8007414 <TIM_OC2_SetConfig+0xb0>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a1a      	ldr	r2, [pc, #104]	; (8007470 <TIM_OC2_SetConfig+0x10c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d003      	beq.n	8007414 <TIM_OC2_SetConfig+0xb0>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a19      	ldr	r2, [pc, #100]	; (8007474 <TIM_OC2_SetConfig+0x110>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d113      	bne.n	800743c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800741a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007422:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	621a      	str	r2, [r3, #32]
}
 8007456:	bf00      	nop
 8007458:	371c      	adds	r7, #28
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	40012c00 	.word	0x40012c00
 8007468:	40013400 	.word	0x40013400
 800746c:	40014000 	.word	0x40014000
 8007470:	40014400 	.word	0x40014400
 8007474:	40014800 	.word	0x40014800

08007478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0303 	bic.w	r3, r3, #3
 80074b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	021b      	lsls	r3, r3, #8
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a27      	ldr	r2, [pc, #156]	; (8007574 <TIM_OC3_SetConfig+0xfc>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d003      	beq.n	80074e2 <TIM_OC3_SetConfig+0x6a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a26      	ldr	r2, [pc, #152]	; (8007578 <TIM_OC3_SetConfig+0x100>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d10d      	bne.n	80074fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074fc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a1c      	ldr	r2, [pc, #112]	; (8007574 <TIM_OC3_SetConfig+0xfc>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00f      	beq.n	8007526 <TIM_OC3_SetConfig+0xae>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a1b      	ldr	r2, [pc, #108]	; (8007578 <TIM_OC3_SetConfig+0x100>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00b      	beq.n	8007526 <TIM_OC3_SetConfig+0xae>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a1a      	ldr	r2, [pc, #104]	; (800757c <TIM_OC3_SetConfig+0x104>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d007      	beq.n	8007526 <TIM_OC3_SetConfig+0xae>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a19      	ldr	r2, [pc, #100]	; (8007580 <TIM_OC3_SetConfig+0x108>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d003      	beq.n	8007526 <TIM_OC3_SetConfig+0xae>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a18      	ldr	r2, [pc, #96]	; (8007584 <TIM_OC3_SetConfig+0x10c>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d113      	bne.n	800754e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800752c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	011b      	lsls	r3, r3, #4
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	4313      	orrs	r3, r2
 8007540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	4313      	orrs	r3, r2
 800754c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	621a      	str	r2, [r3, #32]
}
 8007568:	bf00      	nop
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	40012c00 	.word	0x40012c00
 8007578:	40013400 	.word	0x40013400
 800757c:	40014000 	.word	0x40014000
 8007580:	40014400 	.word	0x40014400
 8007584:	40014800 	.word	0x40014800

08007588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	021b      	lsls	r3, r3, #8
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	031b      	lsls	r3, r3, #12
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a18      	ldr	r2, [pc, #96]	; (8007648 <TIM_OC4_SetConfig+0xc0>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00f      	beq.n	800760c <TIM_OC4_SetConfig+0x84>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a17      	ldr	r2, [pc, #92]	; (800764c <TIM_OC4_SetConfig+0xc4>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d00b      	beq.n	800760c <TIM_OC4_SetConfig+0x84>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a16      	ldr	r2, [pc, #88]	; (8007650 <TIM_OC4_SetConfig+0xc8>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d007      	beq.n	800760c <TIM_OC4_SetConfig+0x84>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a15      	ldr	r2, [pc, #84]	; (8007654 <TIM_OC4_SetConfig+0xcc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d003      	beq.n	800760c <TIM_OC4_SetConfig+0x84>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a14      	ldr	r2, [pc, #80]	; (8007658 <TIM_OC4_SetConfig+0xd0>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d109      	bne.n	8007620 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	019b      	lsls	r3, r3, #6
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	4313      	orrs	r3, r2
 800761e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	621a      	str	r2, [r3, #32]
}
 800763a:	bf00      	nop
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	40012c00 	.word	0x40012c00
 800764c:	40013400 	.word	0x40013400
 8007650:	40014000 	.word	0x40014000
 8007654:	40014400 	.word	0x40014400
 8007658:	40014800 	.word	0x40014800

0800765c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800768a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	041b      	lsls	r3, r3, #16
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a17      	ldr	r2, [pc, #92]	; (8007710 <TIM_OC5_SetConfig+0xb4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00f      	beq.n	80076d6 <TIM_OC5_SetConfig+0x7a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a16      	ldr	r2, [pc, #88]	; (8007714 <TIM_OC5_SetConfig+0xb8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d00b      	beq.n	80076d6 <TIM_OC5_SetConfig+0x7a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a15      	ldr	r2, [pc, #84]	; (8007718 <TIM_OC5_SetConfig+0xbc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d007      	beq.n	80076d6 <TIM_OC5_SetConfig+0x7a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a14      	ldr	r2, [pc, #80]	; (800771c <TIM_OC5_SetConfig+0xc0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d003      	beq.n	80076d6 <TIM_OC5_SetConfig+0x7a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a13      	ldr	r2, [pc, #76]	; (8007720 <TIM_OC5_SetConfig+0xc4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d109      	bne.n	80076ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	021b      	lsls	r3, r3, #8
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	621a      	str	r2, [r3, #32]
}
 8007704:	bf00      	nop
 8007706:	371c      	adds	r7, #28
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	40012c00 	.word	0x40012c00
 8007714:	40013400 	.word	0x40013400
 8007718:	40014000 	.word	0x40014000
 800771c:	40014400 	.word	0x40014400
 8007720:	40014800 	.word	0x40014800

08007724 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800776a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	051b      	lsls	r3, r3, #20
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	4313      	orrs	r3, r2
 8007776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a18      	ldr	r2, [pc, #96]	; (80077dc <TIM_OC6_SetConfig+0xb8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d00f      	beq.n	80077a0 <TIM_OC6_SetConfig+0x7c>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a17      	ldr	r2, [pc, #92]	; (80077e0 <TIM_OC6_SetConfig+0xbc>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00b      	beq.n	80077a0 <TIM_OC6_SetConfig+0x7c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a16      	ldr	r2, [pc, #88]	; (80077e4 <TIM_OC6_SetConfig+0xc0>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d007      	beq.n	80077a0 <TIM_OC6_SetConfig+0x7c>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a15      	ldr	r2, [pc, #84]	; (80077e8 <TIM_OC6_SetConfig+0xc4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d003      	beq.n	80077a0 <TIM_OC6_SetConfig+0x7c>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a14      	ldr	r2, [pc, #80]	; (80077ec <TIM_OC6_SetConfig+0xc8>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d109      	bne.n	80077b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	029b      	lsls	r3, r3, #10
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	621a      	str	r2, [r3, #32]
}
 80077ce:	bf00      	nop
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	40012c00 	.word	0x40012c00
 80077e0:	40013400 	.word	0x40013400
 80077e4:	40014000 	.word	0x40014000
 80077e8:	40014400 	.word	0x40014400
 80077ec:	40014800 	.word	0x40014800

080077f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	f023 0201 	bic.w	r2, r3, #1
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800781a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	4313      	orrs	r3, r2
 8007824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f023 030a 	bic.w	r3, r3, #10
 800782c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	621a      	str	r2, [r3, #32]
}
 8007842:	bf00      	nop
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800784e:	b480      	push	{r7}
 8007850:	b087      	sub	sp, #28
 8007852:	af00      	add	r7, sp, #0
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f023 0210 	bic.w	r2, r3, #16
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007878:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	031b      	lsls	r3, r3, #12
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	4313      	orrs	r3, r2
 8007882:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800788a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	011b      	lsls	r3, r3, #4
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	621a      	str	r2, [r3, #32]
}
 80078a2:	bf00      	nop
 80078a4:	371c      	adds	r7, #28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b085      	sub	sp, #20
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	f043 0307 	orr.w	r3, r3, #7
 80078d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	609a      	str	r2, [r3, #8]
}
 80078d8:	bf00      	nop
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	021a      	lsls	r2, r3, #8
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	431a      	orrs	r2, r3
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4313      	orrs	r3, r2
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	4313      	orrs	r3, r2
 8007910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	609a      	str	r2, [r3, #8]
}
 8007918:	bf00      	nop
 800791a:	371c      	adds	r7, #28
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f003 031f 	and.w	r3, r3, #31
 8007936:	2201      	movs	r2, #1
 8007938:	fa02 f303 	lsl.w	r3, r2, r3
 800793c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1a      	ldr	r2, [r3, #32]
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	43db      	mvns	r3, r3
 8007946:	401a      	ands	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6a1a      	ldr	r2, [r3, #32]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 031f 	and.w	r3, r3, #31
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	fa01 f303 	lsl.w	r3, r1, r3
 800795c:	431a      	orrs	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	621a      	str	r2, [r3, #32]
}
 8007962:	bf00      	nop
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
	...

08007970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007984:	2302      	movs	r3, #2
 8007986:	e063      	b.n	8007a50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a2b      	ldr	r2, [pc, #172]	; (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d004      	beq.n	80079bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a2a      	ldr	r2, [pc, #168]	; (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d108      	bne.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80079c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a1b      	ldr	r2, [pc, #108]	; (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d018      	beq.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079fa:	d013      	beq.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a18      	ldr	r2, [pc, #96]	; (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00e      	beq.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d009      	beq.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a12      	ldr	r2, [pc, #72]	; (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d004      	beq.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a13      	ldr	r2, [pc, #76]	; (8007a6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d10c      	bne.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	40012c00 	.word	0x40012c00
 8007a60:	40013400 	.word	0x40013400
 8007a64:	40000400 	.word	0x40000400
 8007a68:	40000800 	.word	0x40000800
 8007a6c:	40014000 	.word	0x40014000

08007a70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d101      	bne.n	8007a8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e065      	b.n	8007b58 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	041b      	lsls	r3, r3, #16
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a16      	ldr	r2, [pc, #88]	; (8007b64 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d004      	beq.n	8007b1a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a14      	ldr	r2, [pc, #80]	; (8007b68 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d115      	bne.n	8007b46 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	051b      	lsls	r3, r3, #20
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	40012c00 	.word	0x40012c00
 8007b68:	40013400 	.word	0x40013400

08007b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e040      	b.n	8007c3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d106      	bne.n	8007bd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fa fdd0 	bl	8002770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2224      	movs	r2, #36	; 0x24
 8007bd4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f022 0201 	bic.w	r2, r2, #1
 8007be4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fcb6 	bl	8008558 <UART_SetConfig>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e022      	b.n	8007c3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fe7e 	bl	8008900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689a      	ldr	r2, [r3, #8]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0201 	orr.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 ff05 	bl	8008a44 <UART_CheckIdleState>
 8007c3a:	4603      	mov	r3, r0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b08a      	sub	sp, #40	; 0x28
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	4613      	mov	r3, r2
 8007c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c58:	2b20      	cmp	r3, #32
 8007c5a:	d178      	bne.n	8007d4e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <HAL_UART_Transmit+0x24>
 8007c62:	88fb      	ldrh	r3, [r7, #6]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e071      	b.n	8007d50 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2221      	movs	r2, #33	; 0x21
 8007c78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c7a:	f7fa ff5d 	bl	8002b38 <HAL_GetTick>
 8007c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	88fa      	ldrh	r2, [r7, #6]
 8007c84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	88fa      	ldrh	r2, [r7, #6]
 8007c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c98:	d108      	bne.n	8007cac <HAL_UART_Transmit+0x68>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d104      	bne.n	8007cac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	61bb      	str	r3, [r7, #24]
 8007caa:	e003      	b.n	8007cb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007cb4:	e030      	b.n	8007d18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2180      	movs	r1, #128	; 0x80
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 ff67 	bl	8008b94 <UART_WaitOnFlagUntilTimeout>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d004      	beq.n	8007cd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e03c      	b.n	8007d50 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10b      	bne.n	8007cf4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	881a      	ldrh	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ce8:	b292      	uxth	r2, r2
 8007cea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	3302      	adds	r3, #2
 8007cf0:	61bb      	str	r3, [r7, #24]
 8007cf2:	e008      	b.n	8007d06 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	781a      	ldrb	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	b292      	uxth	r2, r2
 8007cfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	3301      	adds	r3, #1
 8007d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1c8      	bne.n	8007cb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2140      	movs	r1, #64	; 0x40
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 ff30 	bl	8008b94 <UART_WaitOnFlagUntilTimeout>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e005      	b.n	8007d50 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2220      	movs	r2, #32
 8007d48:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e000      	b.n	8007d50 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007d4e:	2302      	movs	r3, #2
  }
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3720      	adds	r7, #32
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	; 0x28
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	4613      	mov	r3, r2
 8007d66:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	f040 80a3 	bne.w	8007eba <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <HAL_UART_Receive+0x28>
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e09b      	b.n	8007ebc <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2222      	movs	r2, #34	; 0x22
 8007d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d9a:	f7fa fecd 	bl	8002b38 <HAL_GetTick>
 8007d9e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	88fa      	ldrh	r2, [r7, #6]
 8007da4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	88fa      	ldrh	r2, [r7, #6]
 8007dac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db8:	d10e      	bne.n	8007dd8 <HAL_UART_Receive+0x80>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d105      	bne.n	8007dce <HAL_UART_Receive+0x76>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007dc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dcc:	e01a      	b.n	8007e04 <HAL_UART_Receive+0xac>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	22ff      	movs	r2, #255	; 0xff
 8007dd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dd6:	e015      	b.n	8007e04 <HAL_UART_Receive+0xac>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10d      	bne.n	8007dfc <HAL_UART_Receive+0xa4>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d104      	bne.n	8007df2 <HAL_UART_Receive+0x9a>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	22ff      	movs	r2, #255	; 0xff
 8007dec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007df0:	e008      	b.n	8007e04 <HAL_UART_Receive+0xac>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	227f      	movs	r2, #127	; 0x7f
 8007df6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dfa:	e003      	b.n	8007e04 <HAL_UART_Receive+0xac>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e0a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e14:	d108      	bne.n	8007e28 <HAL_UART_Receive+0xd0>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d104      	bne.n	8007e28 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	61bb      	str	r3, [r7, #24]
 8007e26:	e003      	b.n	8007e30 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007e30:	e037      	b.n	8007ea2 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2120      	movs	r1, #32
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fea9 	bl	8008b94 <UART_WaitOnFlagUntilTimeout>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d005      	beq.n	8007e54 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e033      	b.n	8007ebc <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10c      	bne.n	8007e74 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	8a7b      	ldrh	r3, [r7, #18]
 8007e64:	4013      	ands	r3, r2
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	3302      	adds	r3, #2
 8007e70:	61bb      	str	r3, [r7, #24]
 8007e72:	e00d      	b.n	8007e90 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	8a7b      	ldrh	r3, [r7, #18]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	4013      	ands	r3, r2
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1c1      	bne.n	8007e32 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e000      	b.n	8007ebc <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8007eba:	2302      	movs	r3, #2
  }
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3720      	adds	r7, #32
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08a      	sub	sp, #40	; 0x28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ed8:	2b20      	cmp	r3, #32
 8007eda:	d132      	bne.n	8007f42 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <HAL_UART_Receive_IT+0x24>
 8007ee2:	88fb      	ldrh	r3, [r7, #6]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e02b      	b.n	8007f44 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d018      	beq.n	8007f32 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f14:	627b      	str	r3, [r7, #36]	; 0x24
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	623b      	str	r3, [r7, #32]
 8007f20:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	69f9      	ldr	r1, [r7, #28]
 8007f24:	6a3a      	ldr	r2, [r7, #32]
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e6      	bne.n	8007f00 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f32:	88fb      	ldrh	r3, [r7, #6]
 8007f34:	461a      	mov	r2, r3
 8007f36:	68b9      	ldr	r1, [r7, #8]
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 fe93 	bl	8008c64 <UART_Start_Receive_IT>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	e000      	b.n	8007f44 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007f42:	2302      	movs	r3, #2
  }
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3728      	adds	r7, #40	; 0x28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b0ba      	sub	sp, #232	; 0xe8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007f76:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007f80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d115      	bne.n	8007fb4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f8c:	f003 0320 	and.w	r3, r3, #32
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00f      	beq.n	8007fb4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f98:	f003 0320 	and.w	r3, r3, #32
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d009      	beq.n	8007fb4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 82ab 	beq.w	8008500 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	4798      	blx	r3
      }
      return;
 8007fb2:	e2a5      	b.n	8008500 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007fb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 8117 	beq.w	80081ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d106      	bne.n	8007fd8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007fca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007fce:	4b85      	ldr	r3, [pc, #532]	; (80081e4 <HAL_UART_IRQHandler+0x298>)
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 810a 	beq.w	80081ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d011      	beq.n	8008008 <HAL_UART_IRQHandler+0xbc>
 8007fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00b      	beq.n	8008008 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ffe:	f043 0201 	orr.w	r2, r3, #1
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b00      	cmp	r3, #0
 8008012:	d011      	beq.n	8008038 <HAL_UART_IRQHandler+0xec>
 8008014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00b      	beq.n	8008038 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2202      	movs	r2, #2
 8008026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800802e:	f043 0204 	orr.w	r2, r3, #4
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800803c:	f003 0304 	and.w	r3, r3, #4
 8008040:	2b00      	cmp	r3, #0
 8008042:	d011      	beq.n	8008068 <HAL_UART_IRQHandler+0x11c>
 8008044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2204      	movs	r2, #4
 8008056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800805e:	f043 0202 	orr.w	r2, r3, #2
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800806c:	f003 0308 	and.w	r3, r3, #8
 8008070:	2b00      	cmp	r3, #0
 8008072:	d017      	beq.n	80080a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008078:	f003 0320 	and.w	r3, r3, #32
 800807c:	2b00      	cmp	r3, #0
 800807e:	d105      	bne.n	800808c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008084:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00b      	beq.n	80080a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2208      	movs	r2, #8
 8008092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800809a:	f043 0208 	orr.w	r2, r3, #8
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d012      	beq.n	80080d6 <HAL_UART_IRQHandler+0x18a>
 80080b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00c      	beq.n	80080d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080cc:	f043 0220 	orr.w	r2, r3, #32
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 8211 	beq.w	8008504 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80080e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00d      	beq.n	800810a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080f2:	f003 0320 	and.w	r3, r3, #32
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d007      	beq.n	800810a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008110:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800811e:	2b40      	cmp	r3, #64	; 0x40
 8008120:	d005      	beq.n	800812e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008126:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800812a:	2b00      	cmp	r3, #0
 800812c:	d04f      	beq.n	80081ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fe4c 	bl	8008dcc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813e:	2b40      	cmp	r3, #64	; 0x40
 8008140:	d141      	bne.n	80081c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3308      	adds	r3, #8
 8008148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800815c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3308      	adds	r3, #8
 800816a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800816e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800817a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800817e:	e841 2300 	strex	r3, r2, [r1]
 8008182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1d9      	bne.n	8008142 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008192:	2b00      	cmp	r3, #0
 8008194:	d013      	beq.n	80081be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800819a:	4a13      	ldr	r2, [pc, #76]	; (80081e8 <HAL_UART_IRQHandler+0x29c>)
 800819c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fc f93a 	bl	800441c <HAL_DMA_Abort_IT>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d017      	beq.n	80081de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80081b8:	4610      	mov	r0, r2
 80081ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081bc:	e00f      	b.n	80081de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f9b4 	bl	800852c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c4:	e00b      	b.n	80081de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f9b0 	bl	800852c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081cc:	e007      	b.n	80081de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f9ac 	bl	800852c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80081dc:	e192      	b.n	8008504 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081de:	bf00      	nop
    return;
 80081e0:	e190      	b.n	8008504 <HAL_UART_IRQHandler+0x5b8>
 80081e2:	bf00      	nop
 80081e4:	04000120 	.word	0x04000120
 80081e8:	08008e95 	.word	0x08008e95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	f040 814b 	bne.w	800848c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081fa:	f003 0310 	and.w	r3, r3, #16
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 8144 	beq.w	800848c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008208:	f003 0310 	and.w	r3, r3, #16
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 813d 	beq.w	800848c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2210      	movs	r2, #16
 8008218:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008224:	2b40      	cmp	r3, #64	; 0x40
 8008226:	f040 80b5 	bne.w	8008394 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008236:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 8164 	beq.w	8008508 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800824a:	429a      	cmp	r2, r3
 800824c:	f080 815c 	bcs.w	8008508 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008256:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	2b20      	cmp	r3, #32
 8008262:	f000 8086 	beq.w	8008372 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008272:	e853 3f00 	ldrex	r3, [r3]
 8008276:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800827a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800827e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008282:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008290:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008294:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800829c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082a0:	e841 2300 	strex	r3, r2, [r1]
 80082a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80082a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1da      	bne.n	8008266 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3308      	adds	r3, #8
 80082b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082ba:	e853 3f00 	ldrex	r3, [r3]
 80082be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082c2:	f023 0301 	bic.w	r3, r3, #1
 80082c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3308      	adds	r3, #8
 80082d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082e0:	e841 2300 	strex	r3, r2, [r1]
 80082e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1e1      	bne.n	80082b0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3308      	adds	r3, #8
 80082f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082f6:	e853 3f00 	ldrex	r3, [r3]
 80082fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008302:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3308      	adds	r3, #8
 800830c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008310:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008312:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008314:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008316:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800831e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e3      	bne.n	80082ec <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2220      	movs	r2, #32
 8008328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008342:	f023 0310 	bic.w	r3, r3, #16
 8008346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008354:	65bb      	str	r3, [r7, #88]	; 0x58
 8008356:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800835a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e4      	bne.n	8008332 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800836c:	4618      	mov	r0, r3
 800836e:	f7fc f81c 	bl	80043aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2202      	movs	r2, #2
 8008376:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008384:	b29b      	uxth	r3, r3
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	b29b      	uxth	r3, r3
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f8d7 	bl	8008540 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008392:	e0b9      	b.n	8008508 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 80ab 	beq.w	800850c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80083b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 80a6 	beq.w	800850c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083e2:	647b      	str	r3, [r7, #68]	; 0x44
 80083e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1e4      	bne.n	80083c0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3308      	adds	r3, #8
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	e853 3f00 	ldrex	r3, [r3]
 8008404:	623b      	str	r3, [r7, #32]
   return(result);
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	f023 0301 	bic.w	r3, r3, #1
 800840c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3308      	adds	r3, #8
 8008416:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800841a:	633a      	str	r2, [r7, #48]	; 0x30
 800841c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e3      	bne.n	80083f6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2220      	movs	r2, #32
 8008432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	e853 3f00 	ldrex	r3, [r3]
 800844e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f023 0310 	bic.w	r3, r3, #16
 8008456:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008464:	61fb      	str	r3, [r7, #28]
 8008466:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008468:	69b9      	ldr	r1, [r7, #24]
 800846a:	69fa      	ldr	r2, [r7, #28]
 800846c:	e841 2300 	strex	r3, r2, [r1]
 8008470:	617b      	str	r3, [r7, #20]
   return(result);
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1e4      	bne.n	8008442 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800847e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f85b 	bl	8008540 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800848a:	e03f      	b.n	800850c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800848c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00e      	beq.n	80084b6 <HAL_UART_IRQHandler+0x56a>
 8008498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800849c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d008      	beq.n	80084b6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80084ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fed8 	bl	8009264 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084b4:	e02d      	b.n	8008512 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80084b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00e      	beq.n	80084e0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80084c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d008      	beq.n	80084e0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d01c      	beq.n	8008510 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	4798      	blx	r3
    }
    return;
 80084de:	e017      	b.n	8008510 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d012      	beq.n	8008512 <HAL_UART_IRQHandler+0x5c6>
 80084ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00c      	beq.n	8008512 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fce1 	bl	8008ec0 <UART_EndTransmit_IT>
    return;
 80084fe:	e008      	b.n	8008512 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008500:	bf00      	nop
 8008502:	e006      	b.n	8008512 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008504:	bf00      	nop
 8008506:	e004      	b.n	8008512 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008508:	bf00      	nop
 800850a:	e002      	b.n	8008512 <HAL_UART_IRQHandler+0x5c6>
      return;
 800850c:	bf00      	nop
 800850e:	e000      	b.n	8008512 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008510:	bf00      	nop
  }

}
 8008512:	37e8      	adds	r7, #232	; 0xe8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	460b      	mov	r3, r1
 800854a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	431a      	orrs	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	431a      	orrs	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	4313      	orrs	r3, r2
 800857a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008586:	f023 030c 	bic.w	r3, r3, #12
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	6812      	ldr	r2, [r2, #0]
 800858e:	6979      	ldr	r1, [r7, #20]
 8008590:	430b      	orrs	r3, r1
 8008592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	430a      	orrs	r2, r1
 80085cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4aa7      	ldr	r2, [pc, #668]	; (8008870 <UART_SetConfig+0x318>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d120      	bne.n	800861a <UART_SetConfig+0xc2>
 80085d8:	4ba6      	ldr	r3, [pc, #664]	; (8008874 <UART_SetConfig+0x31c>)
 80085da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085dc:	f003 0303 	and.w	r3, r3, #3
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d817      	bhi.n	8008614 <UART_SetConfig+0xbc>
 80085e4:	a201      	add	r2, pc, #4	; (adr r2, 80085ec <UART_SetConfig+0x94>)
 80085e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ea:	bf00      	nop
 80085ec:	080085fd 	.word	0x080085fd
 80085f0:	08008609 	.word	0x08008609
 80085f4:	0800860f 	.word	0x0800860f
 80085f8:	08008603 	.word	0x08008603
 80085fc:	2301      	movs	r3, #1
 80085fe:	77fb      	strb	r3, [r7, #31]
 8008600:	e0b5      	b.n	800876e <UART_SetConfig+0x216>
 8008602:	2302      	movs	r3, #2
 8008604:	77fb      	strb	r3, [r7, #31]
 8008606:	e0b2      	b.n	800876e <UART_SetConfig+0x216>
 8008608:	2304      	movs	r3, #4
 800860a:	77fb      	strb	r3, [r7, #31]
 800860c:	e0af      	b.n	800876e <UART_SetConfig+0x216>
 800860e:	2308      	movs	r3, #8
 8008610:	77fb      	strb	r3, [r7, #31]
 8008612:	e0ac      	b.n	800876e <UART_SetConfig+0x216>
 8008614:	2310      	movs	r3, #16
 8008616:	77fb      	strb	r3, [r7, #31]
 8008618:	e0a9      	b.n	800876e <UART_SetConfig+0x216>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a96      	ldr	r2, [pc, #600]	; (8008878 <UART_SetConfig+0x320>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d124      	bne.n	800866e <UART_SetConfig+0x116>
 8008624:	4b93      	ldr	r3, [pc, #588]	; (8008874 <UART_SetConfig+0x31c>)
 8008626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800862c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008630:	d011      	beq.n	8008656 <UART_SetConfig+0xfe>
 8008632:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008636:	d817      	bhi.n	8008668 <UART_SetConfig+0x110>
 8008638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800863c:	d011      	beq.n	8008662 <UART_SetConfig+0x10a>
 800863e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008642:	d811      	bhi.n	8008668 <UART_SetConfig+0x110>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <UART_SetConfig+0xf8>
 8008648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800864c:	d006      	beq.n	800865c <UART_SetConfig+0x104>
 800864e:	e00b      	b.n	8008668 <UART_SetConfig+0x110>
 8008650:	2300      	movs	r3, #0
 8008652:	77fb      	strb	r3, [r7, #31]
 8008654:	e08b      	b.n	800876e <UART_SetConfig+0x216>
 8008656:	2302      	movs	r3, #2
 8008658:	77fb      	strb	r3, [r7, #31]
 800865a:	e088      	b.n	800876e <UART_SetConfig+0x216>
 800865c:	2304      	movs	r3, #4
 800865e:	77fb      	strb	r3, [r7, #31]
 8008660:	e085      	b.n	800876e <UART_SetConfig+0x216>
 8008662:	2308      	movs	r3, #8
 8008664:	77fb      	strb	r3, [r7, #31]
 8008666:	e082      	b.n	800876e <UART_SetConfig+0x216>
 8008668:	2310      	movs	r3, #16
 800866a:	77fb      	strb	r3, [r7, #31]
 800866c:	e07f      	b.n	800876e <UART_SetConfig+0x216>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a82      	ldr	r2, [pc, #520]	; (800887c <UART_SetConfig+0x324>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d124      	bne.n	80086c2 <UART_SetConfig+0x16a>
 8008678:	4b7e      	ldr	r3, [pc, #504]	; (8008874 <UART_SetConfig+0x31c>)
 800867a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008680:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008684:	d011      	beq.n	80086aa <UART_SetConfig+0x152>
 8008686:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800868a:	d817      	bhi.n	80086bc <UART_SetConfig+0x164>
 800868c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008690:	d011      	beq.n	80086b6 <UART_SetConfig+0x15e>
 8008692:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008696:	d811      	bhi.n	80086bc <UART_SetConfig+0x164>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <UART_SetConfig+0x14c>
 800869c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086a0:	d006      	beq.n	80086b0 <UART_SetConfig+0x158>
 80086a2:	e00b      	b.n	80086bc <UART_SetConfig+0x164>
 80086a4:	2300      	movs	r3, #0
 80086a6:	77fb      	strb	r3, [r7, #31]
 80086a8:	e061      	b.n	800876e <UART_SetConfig+0x216>
 80086aa:	2302      	movs	r3, #2
 80086ac:	77fb      	strb	r3, [r7, #31]
 80086ae:	e05e      	b.n	800876e <UART_SetConfig+0x216>
 80086b0:	2304      	movs	r3, #4
 80086b2:	77fb      	strb	r3, [r7, #31]
 80086b4:	e05b      	b.n	800876e <UART_SetConfig+0x216>
 80086b6:	2308      	movs	r3, #8
 80086b8:	77fb      	strb	r3, [r7, #31]
 80086ba:	e058      	b.n	800876e <UART_SetConfig+0x216>
 80086bc:	2310      	movs	r3, #16
 80086be:	77fb      	strb	r3, [r7, #31]
 80086c0:	e055      	b.n	800876e <UART_SetConfig+0x216>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a6e      	ldr	r2, [pc, #440]	; (8008880 <UART_SetConfig+0x328>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d124      	bne.n	8008716 <UART_SetConfig+0x1be>
 80086cc:	4b69      	ldr	r3, [pc, #420]	; (8008874 <UART_SetConfig+0x31c>)
 80086ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80086d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086d8:	d011      	beq.n	80086fe <UART_SetConfig+0x1a6>
 80086da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086de:	d817      	bhi.n	8008710 <UART_SetConfig+0x1b8>
 80086e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086e4:	d011      	beq.n	800870a <UART_SetConfig+0x1b2>
 80086e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086ea:	d811      	bhi.n	8008710 <UART_SetConfig+0x1b8>
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <UART_SetConfig+0x1a0>
 80086f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086f4:	d006      	beq.n	8008704 <UART_SetConfig+0x1ac>
 80086f6:	e00b      	b.n	8008710 <UART_SetConfig+0x1b8>
 80086f8:	2300      	movs	r3, #0
 80086fa:	77fb      	strb	r3, [r7, #31]
 80086fc:	e037      	b.n	800876e <UART_SetConfig+0x216>
 80086fe:	2302      	movs	r3, #2
 8008700:	77fb      	strb	r3, [r7, #31]
 8008702:	e034      	b.n	800876e <UART_SetConfig+0x216>
 8008704:	2304      	movs	r3, #4
 8008706:	77fb      	strb	r3, [r7, #31]
 8008708:	e031      	b.n	800876e <UART_SetConfig+0x216>
 800870a:	2308      	movs	r3, #8
 800870c:	77fb      	strb	r3, [r7, #31]
 800870e:	e02e      	b.n	800876e <UART_SetConfig+0x216>
 8008710:	2310      	movs	r3, #16
 8008712:	77fb      	strb	r3, [r7, #31]
 8008714:	e02b      	b.n	800876e <UART_SetConfig+0x216>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a5a      	ldr	r2, [pc, #360]	; (8008884 <UART_SetConfig+0x32c>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d124      	bne.n	800876a <UART_SetConfig+0x212>
 8008720:	4b54      	ldr	r3, [pc, #336]	; (8008874 <UART_SetConfig+0x31c>)
 8008722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008724:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008728:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800872c:	d011      	beq.n	8008752 <UART_SetConfig+0x1fa>
 800872e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008732:	d817      	bhi.n	8008764 <UART_SetConfig+0x20c>
 8008734:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008738:	d011      	beq.n	800875e <UART_SetConfig+0x206>
 800873a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800873e:	d811      	bhi.n	8008764 <UART_SetConfig+0x20c>
 8008740:	2b00      	cmp	r3, #0
 8008742:	d003      	beq.n	800874c <UART_SetConfig+0x1f4>
 8008744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008748:	d006      	beq.n	8008758 <UART_SetConfig+0x200>
 800874a:	e00b      	b.n	8008764 <UART_SetConfig+0x20c>
 800874c:	2300      	movs	r3, #0
 800874e:	77fb      	strb	r3, [r7, #31]
 8008750:	e00d      	b.n	800876e <UART_SetConfig+0x216>
 8008752:	2302      	movs	r3, #2
 8008754:	77fb      	strb	r3, [r7, #31]
 8008756:	e00a      	b.n	800876e <UART_SetConfig+0x216>
 8008758:	2304      	movs	r3, #4
 800875a:	77fb      	strb	r3, [r7, #31]
 800875c:	e007      	b.n	800876e <UART_SetConfig+0x216>
 800875e:	2308      	movs	r3, #8
 8008760:	77fb      	strb	r3, [r7, #31]
 8008762:	e004      	b.n	800876e <UART_SetConfig+0x216>
 8008764:	2310      	movs	r3, #16
 8008766:	77fb      	strb	r3, [r7, #31]
 8008768:	e001      	b.n	800876e <UART_SetConfig+0x216>
 800876a:	2310      	movs	r3, #16
 800876c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008776:	d15b      	bne.n	8008830 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8008778:	7ffb      	ldrb	r3, [r7, #31]
 800877a:	2b08      	cmp	r3, #8
 800877c:	d827      	bhi.n	80087ce <UART_SetConfig+0x276>
 800877e:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <UART_SetConfig+0x22c>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	080087a9 	.word	0x080087a9
 8008788:	080087b1 	.word	0x080087b1
 800878c:	080087b9 	.word	0x080087b9
 8008790:	080087cf 	.word	0x080087cf
 8008794:	080087bf 	.word	0x080087bf
 8008798:	080087cf 	.word	0x080087cf
 800879c:	080087cf 	.word	0x080087cf
 80087a0:	080087cf 	.word	0x080087cf
 80087a4:	080087c7 	.word	0x080087c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087a8:	f7fd fc48 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 80087ac:	61b8      	str	r0, [r7, #24]
        break;
 80087ae:	e013      	b.n	80087d8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087b0:	f7fd fc66 	bl	8006080 <HAL_RCC_GetPCLK2Freq>
 80087b4:	61b8      	str	r0, [r7, #24]
        break;
 80087b6:	e00f      	b.n	80087d8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087b8:	4b33      	ldr	r3, [pc, #204]	; (8008888 <UART_SetConfig+0x330>)
 80087ba:	61bb      	str	r3, [r7, #24]
        break;
 80087bc:	e00c      	b.n	80087d8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087be:	f7fd fbc7 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 80087c2:	61b8      	str	r0, [r7, #24]
        break;
 80087c4:	e008      	b.n	80087d8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ca:	61bb      	str	r3, [r7, #24]
        break;
 80087cc:	e004      	b.n	80087d8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	77bb      	strb	r3, [r7, #30]
        break;
 80087d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 8082 	beq.w	80088e4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	005a      	lsls	r2, r3, #1
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	085b      	lsrs	r3, r3, #1
 80087ea:	441a      	add	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2b0f      	cmp	r3, #15
 80087fa:	d916      	bls.n	800882a <UART_SetConfig+0x2d2>
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008802:	d212      	bcs.n	800882a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	b29b      	uxth	r3, r3
 8008808:	f023 030f 	bic.w	r3, r3, #15
 800880c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	085b      	lsrs	r3, r3, #1
 8008812:	b29b      	uxth	r3, r3
 8008814:	f003 0307 	and.w	r3, r3, #7
 8008818:	b29a      	uxth	r2, r3
 800881a:	89fb      	ldrh	r3, [r7, #14]
 800881c:	4313      	orrs	r3, r2
 800881e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	89fa      	ldrh	r2, [r7, #14]
 8008826:	60da      	str	r2, [r3, #12]
 8008828:	e05c      	b.n	80088e4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	77bb      	strb	r3, [r7, #30]
 800882e:	e059      	b.n	80088e4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008830:	7ffb      	ldrb	r3, [r7, #31]
 8008832:	2b08      	cmp	r3, #8
 8008834:	d835      	bhi.n	80088a2 <UART_SetConfig+0x34a>
 8008836:	a201      	add	r2, pc, #4	; (adr r2, 800883c <UART_SetConfig+0x2e4>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	08008861 	.word	0x08008861
 8008840:	08008869 	.word	0x08008869
 8008844:	0800888d 	.word	0x0800888d
 8008848:	080088a3 	.word	0x080088a3
 800884c:	08008893 	.word	0x08008893
 8008850:	080088a3 	.word	0x080088a3
 8008854:	080088a3 	.word	0x080088a3
 8008858:	080088a3 	.word	0x080088a3
 800885c:	0800889b 	.word	0x0800889b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008860:	f7fd fbec 	bl	800603c <HAL_RCC_GetPCLK1Freq>
 8008864:	61b8      	str	r0, [r7, #24]
        break;
 8008866:	e021      	b.n	80088ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008868:	f7fd fc0a 	bl	8006080 <HAL_RCC_GetPCLK2Freq>
 800886c:	61b8      	str	r0, [r7, #24]
        break;
 800886e:	e01d      	b.n	80088ac <UART_SetConfig+0x354>
 8008870:	40013800 	.word	0x40013800
 8008874:	40021000 	.word	0x40021000
 8008878:	40004400 	.word	0x40004400
 800887c:	40004800 	.word	0x40004800
 8008880:	40004c00 	.word	0x40004c00
 8008884:	40005000 	.word	0x40005000
 8008888:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800888c:	4b1b      	ldr	r3, [pc, #108]	; (80088fc <UART_SetConfig+0x3a4>)
 800888e:	61bb      	str	r3, [r7, #24]
        break;
 8008890:	e00c      	b.n	80088ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008892:	f7fd fb5d 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8008896:	61b8      	str	r0, [r7, #24]
        break;
 8008898:	e008      	b.n	80088ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800889a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800889e:	61bb      	str	r3, [r7, #24]
        break;
 80088a0:	e004      	b.n	80088ac <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	77bb      	strb	r3, [r7, #30]
        break;
 80088aa:	bf00      	nop
    }

    if (pclk != 0U)
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d018      	beq.n	80088e4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	085a      	lsrs	r2, r3, #1
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	441a      	add	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b0f      	cmp	r3, #15
 80088ca:	d909      	bls.n	80088e0 <UART_SetConfig+0x388>
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d2:	d205      	bcs.n	80088e0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	60da      	str	r2, [r3, #12]
 80088de:	e001      	b.n	80088e4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80088f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3720      	adds	r7, #32
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	007a1200 	.word	0x007a1200

08008900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00a      	beq.n	800896e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	f003 0310 	and.w	r3, r3, #16
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00a      	beq.n	80089b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01a      	beq.n	8008a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089fe:	d10a      	bne.n	8008a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00a      	beq.n	8008a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	605a      	str	r2, [r3, #4]
  }
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b098      	sub	sp, #96	; 0x60
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a54:	f7fa f870 	bl	8002b38 <HAL_GetTick>
 8008a58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0308 	and.w	r3, r3, #8
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	d12e      	bne.n	8008ac6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a70:	2200      	movs	r2, #0
 8008a72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f88c 	bl	8008b94 <UART_WaitOnFlagUntilTimeout>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d021      	beq.n	8008ac6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a96:	653b      	str	r3, [r7, #80]	; 0x50
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8008aa2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e6      	bne.n	8008a82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e062      	b.n	8008b8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0304 	and.w	r3, r3, #4
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d149      	bne.n	8008b68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008adc:	2200      	movs	r2, #0
 8008ade:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f856 	bl	8008b94 <UART_WaitOnFlagUntilTimeout>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d03c      	beq.n	8008b68 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	e853 3f00 	ldrex	r3, [r3]
 8008afa:	623b      	str	r3, [r7, #32]
   return(result);
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8008b0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e6      	bne.n	8008aee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3308      	adds	r3, #8
 8008b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	e853 3f00 	ldrex	r3, [r3]
 8008b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f023 0301 	bic.w	r3, r3, #1
 8008b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b40:	61fa      	str	r2, [r7, #28]
 8008b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b44:	69b9      	ldr	r1, [r7, #24]
 8008b46:	69fa      	ldr	r2, [r7, #28]
 8008b48:	e841 2300 	strex	r3, r2, [r1]
 8008b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e5      	bne.n	8008b20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e011      	b.n	8008b8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2220      	movs	r2, #32
 8008b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3758      	adds	r7, #88	; 0x58
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ba4:	e049      	b.n	8008c3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bac:	d045      	beq.n	8008c3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bae:	f7f9 ffc3 	bl	8002b38 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d302      	bcc.n	8008bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e048      	b.n	8008c5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d031      	beq.n	8008c3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	f003 0308 	and.w	r3, r3, #8
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d110      	bne.n	8008c06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2208      	movs	r2, #8
 8008bea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 f8ed 	bl	8008dcc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e029      	b.n	8008c5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c14:	d111      	bne.n	8008c3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 f8d3 	bl	8008dcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2220      	movs	r2, #32
 8008c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e00f      	b.n	8008c5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	69da      	ldr	r2, [r3, #28]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	4013      	ands	r3, r2
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	bf0c      	ite	eq
 8008c4a:	2301      	moveq	r3, #1
 8008c4c:	2300      	movne	r3, #0
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	461a      	mov	r2, r3
 8008c52:	79fb      	ldrb	r3, [r7, #7]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d0a6      	beq.n	8008ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
	...

08008c64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b097      	sub	sp, #92	; 0x5c
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	88fa      	ldrh	r2, [r7, #6]
 8008c7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	88fa      	ldrh	r2, [r7, #6]
 8008c84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c96:	d10e      	bne.n	8008cb6 <UART_Start_Receive_IT+0x52>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d105      	bne.n	8008cac <UART_Start_Receive_IT+0x48>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008ca6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008caa:	e01a      	b.n	8008ce2 <UART_Start_Receive_IT+0x7e>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	22ff      	movs	r2, #255	; 0xff
 8008cb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cb4:	e015      	b.n	8008ce2 <UART_Start_Receive_IT+0x7e>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10d      	bne.n	8008cda <UART_Start_Receive_IT+0x76>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d104      	bne.n	8008cd0 <UART_Start_Receive_IT+0x6c>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	22ff      	movs	r2, #255	; 0xff
 8008cca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cce:	e008      	b.n	8008ce2 <UART_Start_Receive_IT+0x7e>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	227f      	movs	r2, #127	; 0x7f
 8008cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cd8:	e003      	b.n	8008ce2 <UART_Start_Receive_IT+0x7e>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2222      	movs	r2, #34	; 0x22
 8008cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	f043 0301 	orr.w	r3, r3, #1
 8008d08:	657b      	str	r3, [r7, #84]	; 0x54
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3308      	adds	r3, #8
 8008d10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d12:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d1a:	e841 2300 	strex	r3, r2, [r1]
 8008d1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1e5      	bne.n	8008cf2 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2e:	d107      	bne.n	8008d40 <UART_Start_Receive_IT+0xdc>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d103      	bne.n	8008d40 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4a22      	ldr	r2, [pc, #136]	; (8008dc4 <UART_Start_Receive_IT+0x160>)
 8008d3c:	669a      	str	r2, [r3, #104]	; 0x68
 8008d3e:	e002      	b.n	8008d46 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4a21      	ldr	r2, [pc, #132]	; (8008dc8 <UART_Start_Receive_IT+0x164>)
 8008d44:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d019      	beq.n	8008d82 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e6      	bne.n	8008d4e <UART_Start_Receive_IT+0xea>
 8008d80:	e018      	b.n	8008db4 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f043 0320 	orr.w	r3, r3, #32
 8008d96:	653b      	str	r3, [r7, #80]	; 0x50
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008da0:	623b      	str	r3, [r7, #32]
 8008da2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	69f9      	ldr	r1, [r7, #28]
 8008da6:	6a3a      	ldr	r2, [r7, #32]
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e6      	bne.n	8008d82 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	375c      	adds	r7, #92	; 0x5c
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	080090bd 	.word	0x080090bd
 8008dc8:	08008f15 	.word	0x08008f15

08008dcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b095      	sub	sp, #84	; 0x54
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ddc:	e853 3f00 	ldrex	r3, [r3]
 8008de0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008de8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df2:	643b      	str	r3, [r7, #64]	; 0x40
 8008df4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008df8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dfa:	e841 2300 	strex	r3, r2, [r1]
 8008dfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1e6      	bne.n	8008dd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3308      	adds	r3, #8
 8008e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0e:	6a3b      	ldr	r3, [r7, #32]
 8008e10:	e853 3f00 	ldrex	r3, [r3]
 8008e14:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	f023 0301 	bic.w	r3, r3, #1
 8008e1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3308      	adds	r3, #8
 8008e24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e2e:	e841 2300 	strex	r3, r2, [r1]
 8008e32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1e5      	bne.n	8008e06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d118      	bne.n	8008e74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	e853 3f00 	ldrex	r3, [r3]
 8008e4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	f023 0310 	bic.w	r3, r3, #16
 8008e56:	647b      	str	r3, [r7, #68]	; 0x44
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e60:	61bb      	str	r3, [r7, #24]
 8008e62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e64:	6979      	ldr	r1, [r7, #20]
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	e841 2300 	strex	r3, r2, [r1]
 8008e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e6      	bne.n	8008e42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2220      	movs	r2, #32
 8008e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e88:	bf00      	nop
 8008e8a:	3754      	adds	r7, #84	; 0x54
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff fb3a 	bl	800852c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eb8:	bf00      	nop
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008edc:	61fb      	str	r3, [r7, #28]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	61bb      	str	r3, [r7, #24]
 8008ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6979      	ldr	r1, [r7, #20]
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e6      	bne.n	8008ec8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff fb06 	bl	8008518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f0c:	bf00      	nop
 8008f0e:	3720      	adds	r7, #32
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b09c      	sub	sp, #112	; 0x70
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f2c:	2b22      	cmp	r3, #34	; 0x22
 8008f2e:	f040 80b9 	bne.w	80090a4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008f38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008f40:	b2d9      	uxtb	r1, r3
 8008f42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f4c:	400a      	ands	r2, r1
 8008f4e:	b2d2      	uxtb	r2, r2
 8008f50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f040 809c 	bne.w	80090b4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f84:	e853 3f00 	ldrex	r3, [r3]
 8008f88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e6      	bne.n	8008f7c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3308      	adds	r3, #8
 8008fcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008fce:	647a      	str	r2, [r7, #68]	; 0x44
 8008fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e5      	bne.n	8008fae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d018      	beq.n	8009036 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	623b      	str	r3, [r7, #32]
   return(result);
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009018:	663b      	str	r3, [r7, #96]	; 0x60
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009022:	633b      	str	r3, [r7, #48]	; 0x30
 8009024:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e6      	bne.n	8009004 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800903a:	2b01      	cmp	r3, #1
 800903c:	d12e      	bne.n	800909c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	e853 3f00 	ldrex	r3, [r3]
 8009050:	60fb      	str	r3, [r7, #12]
   return(result);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f023 0310 	bic.w	r3, r3, #16
 8009058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009062:	61fb      	str	r3, [r7, #28]
 8009064:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	69b9      	ldr	r1, [r7, #24]
 8009068:	69fa      	ldr	r2, [r7, #28]
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	617b      	str	r3, [r7, #20]
   return(result);
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e6      	bne.n	8009044 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	f003 0310 	and.w	r3, r3, #16
 8009080:	2b10      	cmp	r3, #16
 8009082:	d103      	bne.n	800908c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2210      	movs	r2, #16
 800908a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff fa53 	bl	8008540 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800909a:	e00b      	b.n	80090b4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7f8 f983 	bl	80013a8 <HAL_UART_RxCpltCallback>
}
 80090a2:	e007      	b.n	80090b4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	699a      	ldr	r2, [r3, #24]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f042 0208 	orr.w	r2, r2, #8
 80090b2:	619a      	str	r2, [r3, #24]
}
 80090b4:	bf00      	nop
 80090b6:	3770      	adds	r7, #112	; 0x70
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b09c      	sub	sp, #112	; 0x70
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090d4:	2b22      	cmp	r3, #34	; 0x22
 80090d6:	f040 80b9 	bne.w	800924c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80090e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80090ea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80090ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80090f2:	4013      	ands	r3, r2
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fe:	1c9a      	adds	r2, r3, #2
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800910a:	b29b      	uxth	r3, r3
 800910c:	3b01      	subs	r3, #1
 800910e:	b29a      	uxth	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800911c:	b29b      	uxth	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	f040 809c 	bne.w	800925c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009138:	667b      	str	r3, [r7, #100]	; 0x64
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009142:	657b      	str	r3, [r7, #84]	; 0x54
 8009144:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009148:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e6      	bne.n	8009124 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3308      	adds	r3, #8
 800915c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	f023 0301 	bic.w	r3, r3, #1
 800916c:	663b      	str	r3, [r7, #96]	; 0x60
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3308      	adds	r3, #8
 8009174:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009176:	643a      	str	r2, [r7, #64]	; 0x40
 8009178:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800917c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e5      	bne.n	8009156 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2220      	movs	r2, #32
 800918e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d018      	beq.n	80091de <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	e853 3f00 	ldrex	r3, [r3]
 80091b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091d2:	e841 2300 	strex	r3, r2, [r1]
 80091d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1e6      	bne.n	80091ac <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d12e      	bne.n	8009244 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	f023 0310 	bic.w	r3, r3, #16
 8009200:	65bb      	str	r3, [r7, #88]	; 0x58
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800920a:	61bb      	str	r3, [r7, #24]
 800920c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920e:	6979      	ldr	r1, [r7, #20]
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	613b      	str	r3, [r7, #16]
   return(result);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e6      	bne.n	80091ec <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	f003 0310 	and.w	r3, r3, #16
 8009228:	2b10      	cmp	r3, #16
 800922a:	d103      	bne.n	8009234 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2210      	movs	r2, #16
 8009232:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7ff f97f 	bl	8008540 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009242:	e00b      	b.n	800925c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7f8 f8af 	bl	80013a8 <HAL_UART_RxCpltCallback>
}
 800924a:	e007      	b.n	800925c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	699a      	ldr	r2, [r3, #24]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f042 0208 	orr.w	r2, r2, #8
 800925a:	619a      	str	r2, [r3, #24]
}
 800925c:	bf00      	nop
 800925e:	3770      	adds	r7, #112	; 0x70
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009280:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009284:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800928c:	b29a      	uxth	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	b29b      	uxth	r3, r3
 8009292:	43db      	mvns	r3, r3
 8009294:	b29b      	uxth	r3, r3
 8009296:	4013      	ands	r3, r2
 8009298:	b29a      	uxth	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80092ae:	b084      	sub	sp, #16
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	f107 0014 	add.w	r0, r7, #20
 80092bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	370c      	adds	r7, #12
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	b004      	add	sp, #16
 80092ee:	4770      	bx	lr

080092f0 <__errno>:
 80092f0:	4b01      	ldr	r3, [pc, #4]	; (80092f8 <__errno+0x8>)
 80092f2:	6818      	ldr	r0, [r3, #0]
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	20000034 	.word	0x20000034

080092fc <__libc_init_array>:
 80092fc:	b570      	push	{r4, r5, r6, lr}
 80092fe:	4d0d      	ldr	r5, [pc, #52]	; (8009334 <__libc_init_array+0x38>)
 8009300:	4c0d      	ldr	r4, [pc, #52]	; (8009338 <__libc_init_array+0x3c>)
 8009302:	1b64      	subs	r4, r4, r5
 8009304:	10a4      	asrs	r4, r4, #2
 8009306:	2600      	movs	r6, #0
 8009308:	42a6      	cmp	r6, r4
 800930a:	d109      	bne.n	8009320 <__libc_init_array+0x24>
 800930c:	4d0b      	ldr	r5, [pc, #44]	; (800933c <__libc_init_array+0x40>)
 800930e:	4c0c      	ldr	r4, [pc, #48]	; (8009340 <__libc_init_array+0x44>)
 8009310:	f001 fd20 	bl	800ad54 <_init>
 8009314:	1b64      	subs	r4, r4, r5
 8009316:	10a4      	asrs	r4, r4, #2
 8009318:	2600      	movs	r6, #0
 800931a:	42a6      	cmp	r6, r4
 800931c:	d105      	bne.n	800932a <__libc_init_array+0x2e>
 800931e:	bd70      	pop	{r4, r5, r6, pc}
 8009320:	f855 3b04 	ldr.w	r3, [r5], #4
 8009324:	4798      	blx	r3
 8009326:	3601      	adds	r6, #1
 8009328:	e7ee      	b.n	8009308 <__libc_init_array+0xc>
 800932a:	f855 3b04 	ldr.w	r3, [r5], #4
 800932e:	4798      	blx	r3
 8009330:	3601      	adds	r6, #1
 8009332:	e7f2      	b.n	800931a <__libc_init_array+0x1e>
 8009334:	0800b0f0 	.word	0x0800b0f0
 8009338:	0800b0f0 	.word	0x0800b0f0
 800933c:	0800b0f0 	.word	0x0800b0f0
 8009340:	0800b0f4 	.word	0x0800b0f4

08009344 <memset>:
 8009344:	4402      	add	r2, r0
 8009346:	4603      	mov	r3, r0
 8009348:	4293      	cmp	r3, r2
 800934a:	d100      	bne.n	800934e <memset+0xa>
 800934c:	4770      	bx	lr
 800934e:	f803 1b01 	strb.w	r1, [r3], #1
 8009352:	e7f9      	b.n	8009348 <memset+0x4>

08009354 <siprintf>:
 8009354:	b40e      	push	{r1, r2, r3}
 8009356:	b500      	push	{lr}
 8009358:	b09c      	sub	sp, #112	; 0x70
 800935a:	ab1d      	add	r3, sp, #116	; 0x74
 800935c:	9002      	str	r0, [sp, #8]
 800935e:	9006      	str	r0, [sp, #24]
 8009360:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009364:	4809      	ldr	r0, [pc, #36]	; (800938c <siprintf+0x38>)
 8009366:	9107      	str	r1, [sp, #28]
 8009368:	9104      	str	r1, [sp, #16]
 800936a:	4909      	ldr	r1, [pc, #36]	; (8009390 <siprintf+0x3c>)
 800936c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009370:	9105      	str	r1, [sp, #20]
 8009372:	6800      	ldr	r0, [r0, #0]
 8009374:	9301      	str	r3, [sp, #4]
 8009376:	a902      	add	r1, sp, #8
 8009378:	f000 f868 	bl	800944c <_svfiprintf_r>
 800937c:	9b02      	ldr	r3, [sp, #8]
 800937e:	2200      	movs	r2, #0
 8009380:	701a      	strb	r2, [r3, #0]
 8009382:	b01c      	add	sp, #112	; 0x70
 8009384:	f85d eb04 	ldr.w	lr, [sp], #4
 8009388:	b003      	add	sp, #12
 800938a:	4770      	bx	lr
 800938c:	20000034 	.word	0x20000034
 8009390:	ffff0208 	.word	0xffff0208

08009394 <__ssputs_r>:
 8009394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009398:	688e      	ldr	r6, [r1, #8]
 800939a:	429e      	cmp	r6, r3
 800939c:	4682      	mov	sl, r0
 800939e:	460c      	mov	r4, r1
 80093a0:	4690      	mov	r8, r2
 80093a2:	461f      	mov	r7, r3
 80093a4:	d838      	bhi.n	8009418 <__ssputs_r+0x84>
 80093a6:	898a      	ldrh	r2, [r1, #12]
 80093a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093ac:	d032      	beq.n	8009414 <__ssputs_r+0x80>
 80093ae:	6825      	ldr	r5, [r4, #0]
 80093b0:	6909      	ldr	r1, [r1, #16]
 80093b2:	eba5 0901 	sub.w	r9, r5, r1
 80093b6:	6965      	ldr	r5, [r4, #20]
 80093b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093c0:	3301      	adds	r3, #1
 80093c2:	444b      	add	r3, r9
 80093c4:	106d      	asrs	r5, r5, #1
 80093c6:	429d      	cmp	r5, r3
 80093c8:	bf38      	it	cc
 80093ca:	461d      	movcc	r5, r3
 80093cc:	0553      	lsls	r3, r2, #21
 80093ce:	d531      	bpl.n	8009434 <__ssputs_r+0xa0>
 80093d0:	4629      	mov	r1, r5
 80093d2:	f000 fb63 	bl	8009a9c <_malloc_r>
 80093d6:	4606      	mov	r6, r0
 80093d8:	b950      	cbnz	r0, 80093f0 <__ssputs_r+0x5c>
 80093da:	230c      	movs	r3, #12
 80093dc:	f8ca 3000 	str.w	r3, [sl]
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e6:	81a3      	strh	r3, [r4, #12]
 80093e8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f0:	6921      	ldr	r1, [r4, #16]
 80093f2:	464a      	mov	r2, r9
 80093f4:	f000 fabe 	bl	8009974 <memcpy>
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009402:	81a3      	strh	r3, [r4, #12]
 8009404:	6126      	str	r6, [r4, #16]
 8009406:	6165      	str	r5, [r4, #20]
 8009408:	444e      	add	r6, r9
 800940a:	eba5 0509 	sub.w	r5, r5, r9
 800940e:	6026      	str	r6, [r4, #0]
 8009410:	60a5      	str	r5, [r4, #8]
 8009412:	463e      	mov	r6, r7
 8009414:	42be      	cmp	r6, r7
 8009416:	d900      	bls.n	800941a <__ssputs_r+0x86>
 8009418:	463e      	mov	r6, r7
 800941a:	6820      	ldr	r0, [r4, #0]
 800941c:	4632      	mov	r2, r6
 800941e:	4641      	mov	r1, r8
 8009420:	f000 fab6 	bl	8009990 <memmove>
 8009424:	68a3      	ldr	r3, [r4, #8]
 8009426:	1b9b      	subs	r3, r3, r6
 8009428:	60a3      	str	r3, [r4, #8]
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	4433      	add	r3, r6
 800942e:	6023      	str	r3, [r4, #0]
 8009430:	2000      	movs	r0, #0
 8009432:	e7db      	b.n	80093ec <__ssputs_r+0x58>
 8009434:	462a      	mov	r2, r5
 8009436:	f000 fba5 	bl	8009b84 <_realloc_r>
 800943a:	4606      	mov	r6, r0
 800943c:	2800      	cmp	r0, #0
 800943e:	d1e1      	bne.n	8009404 <__ssputs_r+0x70>
 8009440:	6921      	ldr	r1, [r4, #16]
 8009442:	4650      	mov	r0, sl
 8009444:	f000 fabe 	bl	80099c4 <_free_r>
 8009448:	e7c7      	b.n	80093da <__ssputs_r+0x46>
	...

0800944c <_svfiprintf_r>:
 800944c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009450:	4698      	mov	r8, r3
 8009452:	898b      	ldrh	r3, [r1, #12]
 8009454:	061b      	lsls	r3, r3, #24
 8009456:	b09d      	sub	sp, #116	; 0x74
 8009458:	4607      	mov	r7, r0
 800945a:	460d      	mov	r5, r1
 800945c:	4614      	mov	r4, r2
 800945e:	d50e      	bpl.n	800947e <_svfiprintf_r+0x32>
 8009460:	690b      	ldr	r3, [r1, #16]
 8009462:	b963      	cbnz	r3, 800947e <_svfiprintf_r+0x32>
 8009464:	2140      	movs	r1, #64	; 0x40
 8009466:	f000 fb19 	bl	8009a9c <_malloc_r>
 800946a:	6028      	str	r0, [r5, #0]
 800946c:	6128      	str	r0, [r5, #16]
 800946e:	b920      	cbnz	r0, 800947a <_svfiprintf_r+0x2e>
 8009470:	230c      	movs	r3, #12
 8009472:	603b      	str	r3, [r7, #0]
 8009474:	f04f 30ff 	mov.w	r0, #4294967295
 8009478:	e0d1      	b.n	800961e <_svfiprintf_r+0x1d2>
 800947a:	2340      	movs	r3, #64	; 0x40
 800947c:	616b      	str	r3, [r5, #20]
 800947e:	2300      	movs	r3, #0
 8009480:	9309      	str	r3, [sp, #36]	; 0x24
 8009482:	2320      	movs	r3, #32
 8009484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009488:	f8cd 800c 	str.w	r8, [sp, #12]
 800948c:	2330      	movs	r3, #48	; 0x30
 800948e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009638 <_svfiprintf_r+0x1ec>
 8009492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009496:	f04f 0901 	mov.w	r9, #1
 800949a:	4623      	mov	r3, r4
 800949c:	469a      	mov	sl, r3
 800949e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094a2:	b10a      	cbz	r2, 80094a8 <_svfiprintf_r+0x5c>
 80094a4:	2a25      	cmp	r2, #37	; 0x25
 80094a6:	d1f9      	bne.n	800949c <_svfiprintf_r+0x50>
 80094a8:	ebba 0b04 	subs.w	fp, sl, r4
 80094ac:	d00b      	beq.n	80094c6 <_svfiprintf_r+0x7a>
 80094ae:	465b      	mov	r3, fp
 80094b0:	4622      	mov	r2, r4
 80094b2:	4629      	mov	r1, r5
 80094b4:	4638      	mov	r0, r7
 80094b6:	f7ff ff6d 	bl	8009394 <__ssputs_r>
 80094ba:	3001      	adds	r0, #1
 80094bc:	f000 80aa 	beq.w	8009614 <_svfiprintf_r+0x1c8>
 80094c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094c2:	445a      	add	r2, fp
 80094c4:	9209      	str	r2, [sp, #36]	; 0x24
 80094c6:	f89a 3000 	ldrb.w	r3, [sl]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f000 80a2 	beq.w	8009614 <_svfiprintf_r+0x1c8>
 80094d0:	2300      	movs	r3, #0
 80094d2:	f04f 32ff 	mov.w	r2, #4294967295
 80094d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094da:	f10a 0a01 	add.w	sl, sl, #1
 80094de:	9304      	str	r3, [sp, #16]
 80094e0:	9307      	str	r3, [sp, #28]
 80094e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094e6:	931a      	str	r3, [sp, #104]	; 0x68
 80094e8:	4654      	mov	r4, sl
 80094ea:	2205      	movs	r2, #5
 80094ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f0:	4851      	ldr	r0, [pc, #324]	; (8009638 <_svfiprintf_r+0x1ec>)
 80094f2:	f7f6 fe75 	bl	80001e0 <memchr>
 80094f6:	9a04      	ldr	r2, [sp, #16]
 80094f8:	b9d8      	cbnz	r0, 8009532 <_svfiprintf_r+0xe6>
 80094fa:	06d0      	lsls	r0, r2, #27
 80094fc:	bf44      	itt	mi
 80094fe:	2320      	movmi	r3, #32
 8009500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009504:	0711      	lsls	r1, r2, #28
 8009506:	bf44      	itt	mi
 8009508:	232b      	movmi	r3, #43	; 0x2b
 800950a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800950e:	f89a 3000 	ldrb.w	r3, [sl]
 8009512:	2b2a      	cmp	r3, #42	; 0x2a
 8009514:	d015      	beq.n	8009542 <_svfiprintf_r+0xf6>
 8009516:	9a07      	ldr	r2, [sp, #28]
 8009518:	4654      	mov	r4, sl
 800951a:	2000      	movs	r0, #0
 800951c:	f04f 0c0a 	mov.w	ip, #10
 8009520:	4621      	mov	r1, r4
 8009522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009526:	3b30      	subs	r3, #48	; 0x30
 8009528:	2b09      	cmp	r3, #9
 800952a:	d94e      	bls.n	80095ca <_svfiprintf_r+0x17e>
 800952c:	b1b0      	cbz	r0, 800955c <_svfiprintf_r+0x110>
 800952e:	9207      	str	r2, [sp, #28]
 8009530:	e014      	b.n	800955c <_svfiprintf_r+0x110>
 8009532:	eba0 0308 	sub.w	r3, r0, r8
 8009536:	fa09 f303 	lsl.w	r3, r9, r3
 800953a:	4313      	orrs	r3, r2
 800953c:	9304      	str	r3, [sp, #16]
 800953e:	46a2      	mov	sl, r4
 8009540:	e7d2      	b.n	80094e8 <_svfiprintf_r+0x9c>
 8009542:	9b03      	ldr	r3, [sp, #12]
 8009544:	1d19      	adds	r1, r3, #4
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	9103      	str	r1, [sp, #12]
 800954a:	2b00      	cmp	r3, #0
 800954c:	bfbb      	ittet	lt
 800954e:	425b      	neglt	r3, r3
 8009550:	f042 0202 	orrlt.w	r2, r2, #2
 8009554:	9307      	strge	r3, [sp, #28]
 8009556:	9307      	strlt	r3, [sp, #28]
 8009558:	bfb8      	it	lt
 800955a:	9204      	strlt	r2, [sp, #16]
 800955c:	7823      	ldrb	r3, [r4, #0]
 800955e:	2b2e      	cmp	r3, #46	; 0x2e
 8009560:	d10c      	bne.n	800957c <_svfiprintf_r+0x130>
 8009562:	7863      	ldrb	r3, [r4, #1]
 8009564:	2b2a      	cmp	r3, #42	; 0x2a
 8009566:	d135      	bne.n	80095d4 <_svfiprintf_r+0x188>
 8009568:	9b03      	ldr	r3, [sp, #12]
 800956a:	1d1a      	adds	r2, r3, #4
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	9203      	str	r2, [sp, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	bfb8      	it	lt
 8009574:	f04f 33ff 	movlt.w	r3, #4294967295
 8009578:	3402      	adds	r4, #2
 800957a:	9305      	str	r3, [sp, #20]
 800957c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009648 <_svfiprintf_r+0x1fc>
 8009580:	7821      	ldrb	r1, [r4, #0]
 8009582:	2203      	movs	r2, #3
 8009584:	4650      	mov	r0, sl
 8009586:	f7f6 fe2b 	bl	80001e0 <memchr>
 800958a:	b140      	cbz	r0, 800959e <_svfiprintf_r+0x152>
 800958c:	2340      	movs	r3, #64	; 0x40
 800958e:	eba0 000a 	sub.w	r0, r0, sl
 8009592:	fa03 f000 	lsl.w	r0, r3, r0
 8009596:	9b04      	ldr	r3, [sp, #16]
 8009598:	4303      	orrs	r3, r0
 800959a:	3401      	adds	r4, #1
 800959c:	9304      	str	r3, [sp, #16]
 800959e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a2:	4826      	ldr	r0, [pc, #152]	; (800963c <_svfiprintf_r+0x1f0>)
 80095a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095a8:	2206      	movs	r2, #6
 80095aa:	f7f6 fe19 	bl	80001e0 <memchr>
 80095ae:	2800      	cmp	r0, #0
 80095b0:	d038      	beq.n	8009624 <_svfiprintf_r+0x1d8>
 80095b2:	4b23      	ldr	r3, [pc, #140]	; (8009640 <_svfiprintf_r+0x1f4>)
 80095b4:	bb1b      	cbnz	r3, 80095fe <_svfiprintf_r+0x1b2>
 80095b6:	9b03      	ldr	r3, [sp, #12]
 80095b8:	3307      	adds	r3, #7
 80095ba:	f023 0307 	bic.w	r3, r3, #7
 80095be:	3308      	adds	r3, #8
 80095c0:	9303      	str	r3, [sp, #12]
 80095c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c4:	4433      	add	r3, r6
 80095c6:	9309      	str	r3, [sp, #36]	; 0x24
 80095c8:	e767      	b.n	800949a <_svfiprintf_r+0x4e>
 80095ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80095ce:	460c      	mov	r4, r1
 80095d0:	2001      	movs	r0, #1
 80095d2:	e7a5      	b.n	8009520 <_svfiprintf_r+0xd4>
 80095d4:	2300      	movs	r3, #0
 80095d6:	3401      	adds	r4, #1
 80095d8:	9305      	str	r3, [sp, #20]
 80095da:	4619      	mov	r1, r3
 80095dc:	f04f 0c0a 	mov.w	ip, #10
 80095e0:	4620      	mov	r0, r4
 80095e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095e6:	3a30      	subs	r2, #48	; 0x30
 80095e8:	2a09      	cmp	r2, #9
 80095ea:	d903      	bls.n	80095f4 <_svfiprintf_r+0x1a8>
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0c5      	beq.n	800957c <_svfiprintf_r+0x130>
 80095f0:	9105      	str	r1, [sp, #20]
 80095f2:	e7c3      	b.n	800957c <_svfiprintf_r+0x130>
 80095f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80095f8:	4604      	mov	r4, r0
 80095fa:	2301      	movs	r3, #1
 80095fc:	e7f0      	b.n	80095e0 <_svfiprintf_r+0x194>
 80095fe:	ab03      	add	r3, sp, #12
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	462a      	mov	r2, r5
 8009604:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <_svfiprintf_r+0x1f8>)
 8009606:	a904      	add	r1, sp, #16
 8009608:	4638      	mov	r0, r7
 800960a:	f3af 8000 	nop.w
 800960e:	1c42      	adds	r2, r0, #1
 8009610:	4606      	mov	r6, r0
 8009612:	d1d6      	bne.n	80095c2 <_svfiprintf_r+0x176>
 8009614:	89ab      	ldrh	r3, [r5, #12]
 8009616:	065b      	lsls	r3, r3, #25
 8009618:	f53f af2c 	bmi.w	8009474 <_svfiprintf_r+0x28>
 800961c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800961e:	b01d      	add	sp, #116	; 0x74
 8009620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009624:	ab03      	add	r3, sp, #12
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	462a      	mov	r2, r5
 800962a:	4b06      	ldr	r3, [pc, #24]	; (8009644 <_svfiprintf_r+0x1f8>)
 800962c:	a904      	add	r1, sp, #16
 800962e:	4638      	mov	r0, r7
 8009630:	f000 f87a 	bl	8009728 <_printf_i>
 8009634:	e7eb      	b.n	800960e <_svfiprintf_r+0x1c2>
 8009636:	bf00      	nop
 8009638:	0800aee4 	.word	0x0800aee4
 800963c:	0800aeee 	.word	0x0800aeee
 8009640:	00000000 	.word	0x00000000
 8009644:	08009395 	.word	0x08009395
 8009648:	0800aeea 	.word	0x0800aeea

0800964c <_printf_common>:
 800964c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009650:	4616      	mov	r6, r2
 8009652:	4699      	mov	r9, r3
 8009654:	688a      	ldr	r2, [r1, #8]
 8009656:	690b      	ldr	r3, [r1, #16]
 8009658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800965c:	4293      	cmp	r3, r2
 800965e:	bfb8      	it	lt
 8009660:	4613      	movlt	r3, r2
 8009662:	6033      	str	r3, [r6, #0]
 8009664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009668:	4607      	mov	r7, r0
 800966a:	460c      	mov	r4, r1
 800966c:	b10a      	cbz	r2, 8009672 <_printf_common+0x26>
 800966e:	3301      	adds	r3, #1
 8009670:	6033      	str	r3, [r6, #0]
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	0699      	lsls	r1, r3, #26
 8009676:	bf42      	ittt	mi
 8009678:	6833      	ldrmi	r3, [r6, #0]
 800967a:	3302      	addmi	r3, #2
 800967c:	6033      	strmi	r3, [r6, #0]
 800967e:	6825      	ldr	r5, [r4, #0]
 8009680:	f015 0506 	ands.w	r5, r5, #6
 8009684:	d106      	bne.n	8009694 <_printf_common+0x48>
 8009686:	f104 0a19 	add.w	sl, r4, #25
 800968a:	68e3      	ldr	r3, [r4, #12]
 800968c:	6832      	ldr	r2, [r6, #0]
 800968e:	1a9b      	subs	r3, r3, r2
 8009690:	42ab      	cmp	r3, r5
 8009692:	dc26      	bgt.n	80096e2 <_printf_common+0x96>
 8009694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009698:	1e13      	subs	r3, r2, #0
 800969a:	6822      	ldr	r2, [r4, #0]
 800969c:	bf18      	it	ne
 800969e:	2301      	movne	r3, #1
 80096a0:	0692      	lsls	r2, r2, #26
 80096a2:	d42b      	bmi.n	80096fc <_printf_common+0xb0>
 80096a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096a8:	4649      	mov	r1, r9
 80096aa:	4638      	mov	r0, r7
 80096ac:	47c0      	blx	r8
 80096ae:	3001      	adds	r0, #1
 80096b0:	d01e      	beq.n	80096f0 <_printf_common+0xa4>
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	68e5      	ldr	r5, [r4, #12]
 80096b6:	6832      	ldr	r2, [r6, #0]
 80096b8:	f003 0306 	and.w	r3, r3, #6
 80096bc:	2b04      	cmp	r3, #4
 80096be:	bf08      	it	eq
 80096c0:	1aad      	subeq	r5, r5, r2
 80096c2:	68a3      	ldr	r3, [r4, #8]
 80096c4:	6922      	ldr	r2, [r4, #16]
 80096c6:	bf0c      	ite	eq
 80096c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096cc:	2500      	movne	r5, #0
 80096ce:	4293      	cmp	r3, r2
 80096d0:	bfc4      	itt	gt
 80096d2:	1a9b      	subgt	r3, r3, r2
 80096d4:	18ed      	addgt	r5, r5, r3
 80096d6:	2600      	movs	r6, #0
 80096d8:	341a      	adds	r4, #26
 80096da:	42b5      	cmp	r5, r6
 80096dc:	d11a      	bne.n	8009714 <_printf_common+0xc8>
 80096de:	2000      	movs	r0, #0
 80096e0:	e008      	b.n	80096f4 <_printf_common+0xa8>
 80096e2:	2301      	movs	r3, #1
 80096e4:	4652      	mov	r2, sl
 80096e6:	4649      	mov	r1, r9
 80096e8:	4638      	mov	r0, r7
 80096ea:	47c0      	blx	r8
 80096ec:	3001      	adds	r0, #1
 80096ee:	d103      	bne.n	80096f8 <_printf_common+0xac>
 80096f0:	f04f 30ff 	mov.w	r0, #4294967295
 80096f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f8:	3501      	adds	r5, #1
 80096fa:	e7c6      	b.n	800968a <_printf_common+0x3e>
 80096fc:	18e1      	adds	r1, r4, r3
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	2030      	movs	r0, #48	; 0x30
 8009702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009706:	4422      	add	r2, r4
 8009708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800970c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009710:	3302      	adds	r3, #2
 8009712:	e7c7      	b.n	80096a4 <_printf_common+0x58>
 8009714:	2301      	movs	r3, #1
 8009716:	4622      	mov	r2, r4
 8009718:	4649      	mov	r1, r9
 800971a:	4638      	mov	r0, r7
 800971c:	47c0      	blx	r8
 800971e:	3001      	adds	r0, #1
 8009720:	d0e6      	beq.n	80096f0 <_printf_common+0xa4>
 8009722:	3601      	adds	r6, #1
 8009724:	e7d9      	b.n	80096da <_printf_common+0x8e>
	...

08009728 <_printf_i>:
 8009728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800972c:	7e0f      	ldrb	r7, [r1, #24]
 800972e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009730:	2f78      	cmp	r7, #120	; 0x78
 8009732:	4691      	mov	r9, r2
 8009734:	4680      	mov	r8, r0
 8009736:	460c      	mov	r4, r1
 8009738:	469a      	mov	sl, r3
 800973a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800973e:	d807      	bhi.n	8009750 <_printf_i+0x28>
 8009740:	2f62      	cmp	r7, #98	; 0x62
 8009742:	d80a      	bhi.n	800975a <_printf_i+0x32>
 8009744:	2f00      	cmp	r7, #0
 8009746:	f000 80d8 	beq.w	80098fa <_printf_i+0x1d2>
 800974a:	2f58      	cmp	r7, #88	; 0x58
 800974c:	f000 80a3 	beq.w	8009896 <_printf_i+0x16e>
 8009750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009758:	e03a      	b.n	80097d0 <_printf_i+0xa8>
 800975a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800975e:	2b15      	cmp	r3, #21
 8009760:	d8f6      	bhi.n	8009750 <_printf_i+0x28>
 8009762:	a101      	add	r1, pc, #4	; (adr r1, 8009768 <_printf_i+0x40>)
 8009764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009768:	080097c1 	.word	0x080097c1
 800976c:	080097d5 	.word	0x080097d5
 8009770:	08009751 	.word	0x08009751
 8009774:	08009751 	.word	0x08009751
 8009778:	08009751 	.word	0x08009751
 800977c:	08009751 	.word	0x08009751
 8009780:	080097d5 	.word	0x080097d5
 8009784:	08009751 	.word	0x08009751
 8009788:	08009751 	.word	0x08009751
 800978c:	08009751 	.word	0x08009751
 8009790:	08009751 	.word	0x08009751
 8009794:	080098e1 	.word	0x080098e1
 8009798:	08009805 	.word	0x08009805
 800979c:	080098c3 	.word	0x080098c3
 80097a0:	08009751 	.word	0x08009751
 80097a4:	08009751 	.word	0x08009751
 80097a8:	08009903 	.word	0x08009903
 80097ac:	08009751 	.word	0x08009751
 80097b0:	08009805 	.word	0x08009805
 80097b4:	08009751 	.word	0x08009751
 80097b8:	08009751 	.word	0x08009751
 80097bc:	080098cb 	.word	0x080098cb
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	1d1a      	adds	r2, r3, #4
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	602a      	str	r2, [r5, #0]
 80097c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097d0:	2301      	movs	r3, #1
 80097d2:	e0a3      	b.n	800991c <_printf_i+0x1f4>
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	6829      	ldr	r1, [r5, #0]
 80097d8:	0606      	lsls	r6, r0, #24
 80097da:	f101 0304 	add.w	r3, r1, #4
 80097de:	d50a      	bpl.n	80097f6 <_printf_i+0xce>
 80097e0:	680e      	ldr	r6, [r1, #0]
 80097e2:	602b      	str	r3, [r5, #0]
 80097e4:	2e00      	cmp	r6, #0
 80097e6:	da03      	bge.n	80097f0 <_printf_i+0xc8>
 80097e8:	232d      	movs	r3, #45	; 0x2d
 80097ea:	4276      	negs	r6, r6
 80097ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097f0:	485e      	ldr	r0, [pc, #376]	; (800996c <_printf_i+0x244>)
 80097f2:	230a      	movs	r3, #10
 80097f4:	e019      	b.n	800982a <_printf_i+0x102>
 80097f6:	680e      	ldr	r6, [r1, #0]
 80097f8:	602b      	str	r3, [r5, #0]
 80097fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80097fe:	bf18      	it	ne
 8009800:	b236      	sxthne	r6, r6
 8009802:	e7ef      	b.n	80097e4 <_printf_i+0xbc>
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	6820      	ldr	r0, [r4, #0]
 8009808:	1d19      	adds	r1, r3, #4
 800980a:	6029      	str	r1, [r5, #0]
 800980c:	0601      	lsls	r1, r0, #24
 800980e:	d501      	bpl.n	8009814 <_printf_i+0xec>
 8009810:	681e      	ldr	r6, [r3, #0]
 8009812:	e002      	b.n	800981a <_printf_i+0xf2>
 8009814:	0646      	lsls	r6, r0, #25
 8009816:	d5fb      	bpl.n	8009810 <_printf_i+0xe8>
 8009818:	881e      	ldrh	r6, [r3, #0]
 800981a:	4854      	ldr	r0, [pc, #336]	; (800996c <_printf_i+0x244>)
 800981c:	2f6f      	cmp	r7, #111	; 0x6f
 800981e:	bf0c      	ite	eq
 8009820:	2308      	moveq	r3, #8
 8009822:	230a      	movne	r3, #10
 8009824:	2100      	movs	r1, #0
 8009826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800982a:	6865      	ldr	r5, [r4, #4]
 800982c:	60a5      	str	r5, [r4, #8]
 800982e:	2d00      	cmp	r5, #0
 8009830:	bfa2      	ittt	ge
 8009832:	6821      	ldrge	r1, [r4, #0]
 8009834:	f021 0104 	bicge.w	r1, r1, #4
 8009838:	6021      	strge	r1, [r4, #0]
 800983a:	b90e      	cbnz	r6, 8009840 <_printf_i+0x118>
 800983c:	2d00      	cmp	r5, #0
 800983e:	d04d      	beq.n	80098dc <_printf_i+0x1b4>
 8009840:	4615      	mov	r5, r2
 8009842:	fbb6 f1f3 	udiv	r1, r6, r3
 8009846:	fb03 6711 	mls	r7, r3, r1, r6
 800984a:	5dc7      	ldrb	r7, [r0, r7]
 800984c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009850:	4637      	mov	r7, r6
 8009852:	42bb      	cmp	r3, r7
 8009854:	460e      	mov	r6, r1
 8009856:	d9f4      	bls.n	8009842 <_printf_i+0x11a>
 8009858:	2b08      	cmp	r3, #8
 800985a:	d10b      	bne.n	8009874 <_printf_i+0x14c>
 800985c:	6823      	ldr	r3, [r4, #0]
 800985e:	07de      	lsls	r6, r3, #31
 8009860:	d508      	bpl.n	8009874 <_printf_i+0x14c>
 8009862:	6923      	ldr	r3, [r4, #16]
 8009864:	6861      	ldr	r1, [r4, #4]
 8009866:	4299      	cmp	r1, r3
 8009868:	bfde      	ittt	le
 800986a:	2330      	movle	r3, #48	; 0x30
 800986c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009870:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009874:	1b52      	subs	r2, r2, r5
 8009876:	6122      	str	r2, [r4, #16]
 8009878:	f8cd a000 	str.w	sl, [sp]
 800987c:	464b      	mov	r3, r9
 800987e:	aa03      	add	r2, sp, #12
 8009880:	4621      	mov	r1, r4
 8009882:	4640      	mov	r0, r8
 8009884:	f7ff fee2 	bl	800964c <_printf_common>
 8009888:	3001      	adds	r0, #1
 800988a:	d14c      	bne.n	8009926 <_printf_i+0x1fe>
 800988c:	f04f 30ff 	mov.w	r0, #4294967295
 8009890:	b004      	add	sp, #16
 8009892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009896:	4835      	ldr	r0, [pc, #212]	; (800996c <_printf_i+0x244>)
 8009898:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800989c:	6829      	ldr	r1, [r5, #0]
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80098a4:	6029      	str	r1, [r5, #0]
 80098a6:	061d      	lsls	r5, r3, #24
 80098a8:	d514      	bpl.n	80098d4 <_printf_i+0x1ac>
 80098aa:	07df      	lsls	r7, r3, #31
 80098ac:	bf44      	itt	mi
 80098ae:	f043 0320 	orrmi.w	r3, r3, #32
 80098b2:	6023      	strmi	r3, [r4, #0]
 80098b4:	b91e      	cbnz	r6, 80098be <_printf_i+0x196>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	f023 0320 	bic.w	r3, r3, #32
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	2310      	movs	r3, #16
 80098c0:	e7b0      	b.n	8009824 <_printf_i+0xfc>
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	f043 0320 	orr.w	r3, r3, #32
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	2378      	movs	r3, #120	; 0x78
 80098cc:	4828      	ldr	r0, [pc, #160]	; (8009970 <_printf_i+0x248>)
 80098ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098d2:	e7e3      	b.n	800989c <_printf_i+0x174>
 80098d4:	0659      	lsls	r1, r3, #25
 80098d6:	bf48      	it	mi
 80098d8:	b2b6      	uxthmi	r6, r6
 80098da:	e7e6      	b.n	80098aa <_printf_i+0x182>
 80098dc:	4615      	mov	r5, r2
 80098de:	e7bb      	b.n	8009858 <_printf_i+0x130>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	6826      	ldr	r6, [r4, #0]
 80098e4:	6961      	ldr	r1, [r4, #20]
 80098e6:	1d18      	adds	r0, r3, #4
 80098e8:	6028      	str	r0, [r5, #0]
 80098ea:	0635      	lsls	r5, r6, #24
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	d501      	bpl.n	80098f4 <_printf_i+0x1cc>
 80098f0:	6019      	str	r1, [r3, #0]
 80098f2:	e002      	b.n	80098fa <_printf_i+0x1d2>
 80098f4:	0670      	lsls	r0, r6, #25
 80098f6:	d5fb      	bpl.n	80098f0 <_printf_i+0x1c8>
 80098f8:	8019      	strh	r1, [r3, #0]
 80098fa:	2300      	movs	r3, #0
 80098fc:	6123      	str	r3, [r4, #16]
 80098fe:	4615      	mov	r5, r2
 8009900:	e7ba      	b.n	8009878 <_printf_i+0x150>
 8009902:	682b      	ldr	r3, [r5, #0]
 8009904:	1d1a      	adds	r2, r3, #4
 8009906:	602a      	str	r2, [r5, #0]
 8009908:	681d      	ldr	r5, [r3, #0]
 800990a:	6862      	ldr	r2, [r4, #4]
 800990c:	2100      	movs	r1, #0
 800990e:	4628      	mov	r0, r5
 8009910:	f7f6 fc66 	bl	80001e0 <memchr>
 8009914:	b108      	cbz	r0, 800991a <_printf_i+0x1f2>
 8009916:	1b40      	subs	r0, r0, r5
 8009918:	6060      	str	r0, [r4, #4]
 800991a:	6863      	ldr	r3, [r4, #4]
 800991c:	6123      	str	r3, [r4, #16]
 800991e:	2300      	movs	r3, #0
 8009920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009924:	e7a8      	b.n	8009878 <_printf_i+0x150>
 8009926:	6923      	ldr	r3, [r4, #16]
 8009928:	462a      	mov	r2, r5
 800992a:	4649      	mov	r1, r9
 800992c:	4640      	mov	r0, r8
 800992e:	47d0      	blx	sl
 8009930:	3001      	adds	r0, #1
 8009932:	d0ab      	beq.n	800988c <_printf_i+0x164>
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	079b      	lsls	r3, r3, #30
 8009938:	d413      	bmi.n	8009962 <_printf_i+0x23a>
 800993a:	68e0      	ldr	r0, [r4, #12]
 800993c:	9b03      	ldr	r3, [sp, #12]
 800993e:	4298      	cmp	r0, r3
 8009940:	bfb8      	it	lt
 8009942:	4618      	movlt	r0, r3
 8009944:	e7a4      	b.n	8009890 <_printf_i+0x168>
 8009946:	2301      	movs	r3, #1
 8009948:	4632      	mov	r2, r6
 800994a:	4649      	mov	r1, r9
 800994c:	4640      	mov	r0, r8
 800994e:	47d0      	blx	sl
 8009950:	3001      	adds	r0, #1
 8009952:	d09b      	beq.n	800988c <_printf_i+0x164>
 8009954:	3501      	adds	r5, #1
 8009956:	68e3      	ldr	r3, [r4, #12]
 8009958:	9903      	ldr	r1, [sp, #12]
 800995a:	1a5b      	subs	r3, r3, r1
 800995c:	42ab      	cmp	r3, r5
 800995e:	dcf2      	bgt.n	8009946 <_printf_i+0x21e>
 8009960:	e7eb      	b.n	800993a <_printf_i+0x212>
 8009962:	2500      	movs	r5, #0
 8009964:	f104 0619 	add.w	r6, r4, #25
 8009968:	e7f5      	b.n	8009956 <_printf_i+0x22e>
 800996a:	bf00      	nop
 800996c:	0800aef5 	.word	0x0800aef5
 8009970:	0800af06 	.word	0x0800af06

08009974 <memcpy>:
 8009974:	440a      	add	r2, r1
 8009976:	4291      	cmp	r1, r2
 8009978:	f100 33ff 	add.w	r3, r0, #4294967295
 800997c:	d100      	bne.n	8009980 <memcpy+0xc>
 800997e:	4770      	bx	lr
 8009980:	b510      	push	{r4, lr}
 8009982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800998a:	4291      	cmp	r1, r2
 800998c:	d1f9      	bne.n	8009982 <memcpy+0xe>
 800998e:	bd10      	pop	{r4, pc}

08009990 <memmove>:
 8009990:	4288      	cmp	r0, r1
 8009992:	b510      	push	{r4, lr}
 8009994:	eb01 0402 	add.w	r4, r1, r2
 8009998:	d902      	bls.n	80099a0 <memmove+0x10>
 800999a:	4284      	cmp	r4, r0
 800999c:	4623      	mov	r3, r4
 800999e:	d807      	bhi.n	80099b0 <memmove+0x20>
 80099a0:	1e43      	subs	r3, r0, #1
 80099a2:	42a1      	cmp	r1, r4
 80099a4:	d008      	beq.n	80099b8 <memmove+0x28>
 80099a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099ae:	e7f8      	b.n	80099a2 <memmove+0x12>
 80099b0:	4402      	add	r2, r0
 80099b2:	4601      	mov	r1, r0
 80099b4:	428a      	cmp	r2, r1
 80099b6:	d100      	bne.n	80099ba <memmove+0x2a>
 80099b8:	bd10      	pop	{r4, pc}
 80099ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099c2:	e7f7      	b.n	80099b4 <memmove+0x24>

080099c4 <_free_r>:
 80099c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099c6:	2900      	cmp	r1, #0
 80099c8:	d044      	beq.n	8009a54 <_free_r+0x90>
 80099ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099ce:	9001      	str	r0, [sp, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f1a1 0404 	sub.w	r4, r1, #4
 80099d6:	bfb8      	it	lt
 80099d8:	18e4      	addlt	r4, r4, r3
 80099da:	f000 f913 	bl	8009c04 <__malloc_lock>
 80099de:	4a1e      	ldr	r2, [pc, #120]	; (8009a58 <_free_r+0x94>)
 80099e0:	9801      	ldr	r0, [sp, #4]
 80099e2:	6813      	ldr	r3, [r2, #0]
 80099e4:	b933      	cbnz	r3, 80099f4 <_free_r+0x30>
 80099e6:	6063      	str	r3, [r4, #4]
 80099e8:	6014      	str	r4, [r2, #0]
 80099ea:	b003      	add	sp, #12
 80099ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099f0:	f000 b90e 	b.w	8009c10 <__malloc_unlock>
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	d908      	bls.n	8009a0a <_free_r+0x46>
 80099f8:	6825      	ldr	r5, [r4, #0]
 80099fa:	1961      	adds	r1, r4, r5
 80099fc:	428b      	cmp	r3, r1
 80099fe:	bf01      	itttt	eq
 8009a00:	6819      	ldreq	r1, [r3, #0]
 8009a02:	685b      	ldreq	r3, [r3, #4]
 8009a04:	1949      	addeq	r1, r1, r5
 8009a06:	6021      	streq	r1, [r4, #0]
 8009a08:	e7ed      	b.n	80099e6 <_free_r+0x22>
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	b10b      	cbz	r3, 8009a14 <_free_r+0x50>
 8009a10:	42a3      	cmp	r3, r4
 8009a12:	d9fa      	bls.n	8009a0a <_free_r+0x46>
 8009a14:	6811      	ldr	r1, [r2, #0]
 8009a16:	1855      	adds	r5, r2, r1
 8009a18:	42a5      	cmp	r5, r4
 8009a1a:	d10b      	bne.n	8009a34 <_free_r+0x70>
 8009a1c:	6824      	ldr	r4, [r4, #0]
 8009a1e:	4421      	add	r1, r4
 8009a20:	1854      	adds	r4, r2, r1
 8009a22:	42a3      	cmp	r3, r4
 8009a24:	6011      	str	r1, [r2, #0]
 8009a26:	d1e0      	bne.n	80099ea <_free_r+0x26>
 8009a28:	681c      	ldr	r4, [r3, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	6053      	str	r3, [r2, #4]
 8009a2e:	4421      	add	r1, r4
 8009a30:	6011      	str	r1, [r2, #0]
 8009a32:	e7da      	b.n	80099ea <_free_r+0x26>
 8009a34:	d902      	bls.n	8009a3c <_free_r+0x78>
 8009a36:	230c      	movs	r3, #12
 8009a38:	6003      	str	r3, [r0, #0]
 8009a3a:	e7d6      	b.n	80099ea <_free_r+0x26>
 8009a3c:	6825      	ldr	r5, [r4, #0]
 8009a3e:	1961      	adds	r1, r4, r5
 8009a40:	428b      	cmp	r3, r1
 8009a42:	bf04      	itt	eq
 8009a44:	6819      	ldreq	r1, [r3, #0]
 8009a46:	685b      	ldreq	r3, [r3, #4]
 8009a48:	6063      	str	r3, [r4, #4]
 8009a4a:	bf04      	itt	eq
 8009a4c:	1949      	addeq	r1, r1, r5
 8009a4e:	6021      	streq	r1, [r4, #0]
 8009a50:	6054      	str	r4, [r2, #4]
 8009a52:	e7ca      	b.n	80099ea <_free_r+0x26>
 8009a54:	b003      	add	sp, #12
 8009a56:	bd30      	pop	{r4, r5, pc}
 8009a58:	200010bc 	.word	0x200010bc

08009a5c <sbrk_aligned>:
 8009a5c:	b570      	push	{r4, r5, r6, lr}
 8009a5e:	4e0e      	ldr	r6, [pc, #56]	; (8009a98 <sbrk_aligned+0x3c>)
 8009a60:	460c      	mov	r4, r1
 8009a62:	6831      	ldr	r1, [r6, #0]
 8009a64:	4605      	mov	r5, r0
 8009a66:	b911      	cbnz	r1, 8009a6e <sbrk_aligned+0x12>
 8009a68:	f000 f8bc 	bl	8009be4 <_sbrk_r>
 8009a6c:	6030      	str	r0, [r6, #0]
 8009a6e:	4621      	mov	r1, r4
 8009a70:	4628      	mov	r0, r5
 8009a72:	f000 f8b7 	bl	8009be4 <_sbrk_r>
 8009a76:	1c43      	adds	r3, r0, #1
 8009a78:	d00a      	beq.n	8009a90 <sbrk_aligned+0x34>
 8009a7a:	1cc4      	adds	r4, r0, #3
 8009a7c:	f024 0403 	bic.w	r4, r4, #3
 8009a80:	42a0      	cmp	r0, r4
 8009a82:	d007      	beq.n	8009a94 <sbrk_aligned+0x38>
 8009a84:	1a21      	subs	r1, r4, r0
 8009a86:	4628      	mov	r0, r5
 8009a88:	f000 f8ac 	bl	8009be4 <_sbrk_r>
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d101      	bne.n	8009a94 <sbrk_aligned+0x38>
 8009a90:	f04f 34ff 	mov.w	r4, #4294967295
 8009a94:	4620      	mov	r0, r4
 8009a96:	bd70      	pop	{r4, r5, r6, pc}
 8009a98:	200010c0 	.word	0x200010c0

08009a9c <_malloc_r>:
 8009a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa0:	1ccd      	adds	r5, r1, #3
 8009aa2:	f025 0503 	bic.w	r5, r5, #3
 8009aa6:	3508      	adds	r5, #8
 8009aa8:	2d0c      	cmp	r5, #12
 8009aaa:	bf38      	it	cc
 8009aac:	250c      	movcc	r5, #12
 8009aae:	2d00      	cmp	r5, #0
 8009ab0:	4607      	mov	r7, r0
 8009ab2:	db01      	blt.n	8009ab8 <_malloc_r+0x1c>
 8009ab4:	42a9      	cmp	r1, r5
 8009ab6:	d905      	bls.n	8009ac4 <_malloc_r+0x28>
 8009ab8:	230c      	movs	r3, #12
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	2600      	movs	r6, #0
 8009abe:	4630      	mov	r0, r6
 8009ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac4:	4e2e      	ldr	r6, [pc, #184]	; (8009b80 <_malloc_r+0xe4>)
 8009ac6:	f000 f89d 	bl	8009c04 <__malloc_lock>
 8009aca:	6833      	ldr	r3, [r6, #0]
 8009acc:	461c      	mov	r4, r3
 8009ace:	bb34      	cbnz	r4, 8009b1e <_malloc_r+0x82>
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	f7ff ffc2 	bl	8009a5c <sbrk_aligned>
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	4604      	mov	r4, r0
 8009adc:	d14d      	bne.n	8009b7a <_malloc_r+0xde>
 8009ade:	6834      	ldr	r4, [r6, #0]
 8009ae0:	4626      	mov	r6, r4
 8009ae2:	2e00      	cmp	r6, #0
 8009ae4:	d140      	bne.n	8009b68 <_malloc_r+0xcc>
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	4631      	mov	r1, r6
 8009aea:	4638      	mov	r0, r7
 8009aec:	eb04 0803 	add.w	r8, r4, r3
 8009af0:	f000 f878 	bl	8009be4 <_sbrk_r>
 8009af4:	4580      	cmp	r8, r0
 8009af6:	d13a      	bne.n	8009b6e <_malloc_r+0xd2>
 8009af8:	6821      	ldr	r1, [r4, #0]
 8009afa:	3503      	adds	r5, #3
 8009afc:	1a6d      	subs	r5, r5, r1
 8009afe:	f025 0503 	bic.w	r5, r5, #3
 8009b02:	3508      	adds	r5, #8
 8009b04:	2d0c      	cmp	r5, #12
 8009b06:	bf38      	it	cc
 8009b08:	250c      	movcc	r5, #12
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	f7ff ffa5 	bl	8009a5c <sbrk_aligned>
 8009b12:	3001      	adds	r0, #1
 8009b14:	d02b      	beq.n	8009b6e <_malloc_r+0xd2>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	442b      	add	r3, r5
 8009b1a:	6023      	str	r3, [r4, #0]
 8009b1c:	e00e      	b.n	8009b3c <_malloc_r+0xa0>
 8009b1e:	6822      	ldr	r2, [r4, #0]
 8009b20:	1b52      	subs	r2, r2, r5
 8009b22:	d41e      	bmi.n	8009b62 <_malloc_r+0xc6>
 8009b24:	2a0b      	cmp	r2, #11
 8009b26:	d916      	bls.n	8009b56 <_malloc_r+0xba>
 8009b28:	1961      	adds	r1, r4, r5
 8009b2a:	42a3      	cmp	r3, r4
 8009b2c:	6025      	str	r5, [r4, #0]
 8009b2e:	bf18      	it	ne
 8009b30:	6059      	strne	r1, [r3, #4]
 8009b32:	6863      	ldr	r3, [r4, #4]
 8009b34:	bf08      	it	eq
 8009b36:	6031      	streq	r1, [r6, #0]
 8009b38:	5162      	str	r2, [r4, r5]
 8009b3a:	604b      	str	r3, [r1, #4]
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	f104 060b 	add.w	r6, r4, #11
 8009b42:	f000 f865 	bl	8009c10 <__malloc_unlock>
 8009b46:	f026 0607 	bic.w	r6, r6, #7
 8009b4a:	1d23      	adds	r3, r4, #4
 8009b4c:	1af2      	subs	r2, r6, r3
 8009b4e:	d0b6      	beq.n	8009abe <_malloc_r+0x22>
 8009b50:	1b9b      	subs	r3, r3, r6
 8009b52:	50a3      	str	r3, [r4, r2]
 8009b54:	e7b3      	b.n	8009abe <_malloc_r+0x22>
 8009b56:	6862      	ldr	r2, [r4, #4]
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	bf0c      	ite	eq
 8009b5c:	6032      	streq	r2, [r6, #0]
 8009b5e:	605a      	strne	r2, [r3, #4]
 8009b60:	e7ec      	b.n	8009b3c <_malloc_r+0xa0>
 8009b62:	4623      	mov	r3, r4
 8009b64:	6864      	ldr	r4, [r4, #4]
 8009b66:	e7b2      	b.n	8009ace <_malloc_r+0x32>
 8009b68:	4634      	mov	r4, r6
 8009b6a:	6876      	ldr	r6, [r6, #4]
 8009b6c:	e7b9      	b.n	8009ae2 <_malloc_r+0x46>
 8009b6e:	230c      	movs	r3, #12
 8009b70:	603b      	str	r3, [r7, #0]
 8009b72:	4638      	mov	r0, r7
 8009b74:	f000 f84c 	bl	8009c10 <__malloc_unlock>
 8009b78:	e7a1      	b.n	8009abe <_malloc_r+0x22>
 8009b7a:	6025      	str	r5, [r4, #0]
 8009b7c:	e7de      	b.n	8009b3c <_malloc_r+0xa0>
 8009b7e:	bf00      	nop
 8009b80:	200010bc 	.word	0x200010bc

08009b84 <_realloc_r>:
 8009b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b88:	4680      	mov	r8, r0
 8009b8a:	4614      	mov	r4, r2
 8009b8c:	460e      	mov	r6, r1
 8009b8e:	b921      	cbnz	r1, 8009b9a <_realloc_r+0x16>
 8009b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b94:	4611      	mov	r1, r2
 8009b96:	f7ff bf81 	b.w	8009a9c <_malloc_r>
 8009b9a:	b92a      	cbnz	r2, 8009ba8 <_realloc_r+0x24>
 8009b9c:	f7ff ff12 	bl	80099c4 <_free_r>
 8009ba0:	4625      	mov	r5, r4
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba8:	f000 f838 	bl	8009c1c <_malloc_usable_size_r>
 8009bac:	4284      	cmp	r4, r0
 8009bae:	4607      	mov	r7, r0
 8009bb0:	d802      	bhi.n	8009bb8 <_realloc_r+0x34>
 8009bb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bb6:	d812      	bhi.n	8009bde <_realloc_r+0x5a>
 8009bb8:	4621      	mov	r1, r4
 8009bba:	4640      	mov	r0, r8
 8009bbc:	f7ff ff6e 	bl	8009a9c <_malloc_r>
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d0ed      	beq.n	8009ba2 <_realloc_r+0x1e>
 8009bc6:	42bc      	cmp	r4, r7
 8009bc8:	4622      	mov	r2, r4
 8009bca:	4631      	mov	r1, r6
 8009bcc:	bf28      	it	cs
 8009bce:	463a      	movcs	r2, r7
 8009bd0:	f7ff fed0 	bl	8009974 <memcpy>
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	f7ff fef4 	bl	80099c4 <_free_r>
 8009bdc:	e7e1      	b.n	8009ba2 <_realloc_r+0x1e>
 8009bde:	4635      	mov	r5, r6
 8009be0:	e7df      	b.n	8009ba2 <_realloc_r+0x1e>
	...

08009be4 <_sbrk_r>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	4d06      	ldr	r5, [pc, #24]	; (8009c00 <_sbrk_r+0x1c>)
 8009be8:	2300      	movs	r3, #0
 8009bea:	4604      	mov	r4, r0
 8009bec:	4608      	mov	r0, r1
 8009bee:	602b      	str	r3, [r5, #0]
 8009bf0:	f7f8 fed6 	bl	80029a0 <_sbrk>
 8009bf4:	1c43      	adds	r3, r0, #1
 8009bf6:	d102      	bne.n	8009bfe <_sbrk_r+0x1a>
 8009bf8:	682b      	ldr	r3, [r5, #0]
 8009bfa:	b103      	cbz	r3, 8009bfe <_sbrk_r+0x1a>
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}
 8009c00:	200010c4 	.word	0x200010c4

08009c04 <__malloc_lock>:
 8009c04:	4801      	ldr	r0, [pc, #4]	; (8009c0c <__malloc_lock+0x8>)
 8009c06:	f000 b811 	b.w	8009c2c <__retarget_lock_acquire_recursive>
 8009c0a:	bf00      	nop
 8009c0c:	200010c8 	.word	0x200010c8

08009c10 <__malloc_unlock>:
 8009c10:	4801      	ldr	r0, [pc, #4]	; (8009c18 <__malloc_unlock+0x8>)
 8009c12:	f000 b80c 	b.w	8009c2e <__retarget_lock_release_recursive>
 8009c16:	bf00      	nop
 8009c18:	200010c8 	.word	0x200010c8

08009c1c <_malloc_usable_size_r>:
 8009c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c20:	1f18      	subs	r0, r3, #4
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	bfbc      	itt	lt
 8009c26:	580b      	ldrlt	r3, [r1, r0]
 8009c28:	18c0      	addlt	r0, r0, r3
 8009c2a:	4770      	bx	lr

08009c2c <__retarget_lock_acquire_recursive>:
 8009c2c:	4770      	bx	lr

08009c2e <__retarget_lock_release_recursive>:
 8009c2e:	4770      	bx	lr

08009c30 <round>:
 8009c30:	ec51 0b10 	vmov	r0, r1, d0
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8009c3a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8009c3e:	2c13      	cmp	r4, #19
 8009c40:	ee10 2a10 	vmov	r2, s0
 8009c44:	460b      	mov	r3, r1
 8009c46:	dc19      	bgt.n	8009c7c <round+0x4c>
 8009c48:	2c00      	cmp	r4, #0
 8009c4a:	da09      	bge.n	8009c60 <round+0x30>
 8009c4c:	3401      	adds	r4, #1
 8009c4e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009c52:	d103      	bne.n	8009c5c <round+0x2c>
 8009c54:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009c58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	e028      	b.n	8009cb2 <round+0x82>
 8009c60:	4d15      	ldr	r5, [pc, #84]	; (8009cb8 <round+0x88>)
 8009c62:	4125      	asrs	r5, r4
 8009c64:	ea01 0605 	and.w	r6, r1, r5
 8009c68:	4332      	orrs	r2, r6
 8009c6a:	d00e      	beq.n	8009c8a <round+0x5a>
 8009c6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009c70:	fa42 f404 	asr.w	r4, r2, r4
 8009c74:	4423      	add	r3, r4
 8009c76:	ea23 0305 	bic.w	r3, r3, r5
 8009c7a:	e7ef      	b.n	8009c5c <round+0x2c>
 8009c7c:	2c33      	cmp	r4, #51	; 0x33
 8009c7e:	dd07      	ble.n	8009c90 <round+0x60>
 8009c80:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009c84:	d101      	bne.n	8009c8a <round+0x5a>
 8009c86:	f7f6 fb01 	bl	800028c <__adddf3>
 8009c8a:	ec41 0b10 	vmov	d0, r0, r1
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8009c94:	f04f 35ff 	mov.w	r5, #4294967295
 8009c98:	40f5      	lsrs	r5, r6
 8009c9a:	4228      	tst	r0, r5
 8009c9c:	d0f5      	beq.n	8009c8a <round+0x5a>
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009ca4:	fa01 f404 	lsl.w	r4, r1, r4
 8009ca8:	1912      	adds	r2, r2, r4
 8009caa:	bf28      	it	cs
 8009cac:	185b      	addcs	r3, r3, r1
 8009cae:	ea22 0205 	bic.w	r2, r2, r5
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	e7e8      	b.n	8009c8a <round+0x5a>
 8009cb8:	000fffff 	.word	0x000fffff
 8009cbc:	00000000 	.word	0x00000000

08009cc0 <sin>:
 8009cc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cc2:	ec53 2b10 	vmov	r2, r3, d0
 8009cc6:	4828      	ldr	r0, [pc, #160]	; (8009d68 <sin+0xa8>)
 8009cc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009ccc:	4281      	cmp	r1, r0
 8009cce:	dc07      	bgt.n	8009ce0 <sin+0x20>
 8009cd0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009d60 <sin+0xa0>
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	b005      	add	sp, #20
 8009cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cdc:	f000 be6c 	b.w	800a9b8 <__kernel_sin>
 8009ce0:	4822      	ldr	r0, [pc, #136]	; (8009d6c <sin+0xac>)
 8009ce2:	4281      	cmp	r1, r0
 8009ce4:	dd09      	ble.n	8009cfa <sin+0x3a>
 8009ce6:	ee10 0a10 	vmov	r0, s0
 8009cea:	4619      	mov	r1, r3
 8009cec:	f7f6 facc 	bl	8000288 <__aeabi_dsub>
 8009cf0:	ec41 0b10 	vmov	d0, r0, r1
 8009cf4:	b005      	add	sp, #20
 8009cf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cfa:	4668      	mov	r0, sp
 8009cfc:	f000 f838 	bl	8009d70 <__ieee754_rem_pio2>
 8009d00:	f000 0003 	and.w	r0, r0, #3
 8009d04:	2801      	cmp	r0, #1
 8009d06:	d00c      	beq.n	8009d22 <sin+0x62>
 8009d08:	2802      	cmp	r0, #2
 8009d0a:	d011      	beq.n	8009d30 <sin+0x70>
 8009d0c:	b9f0      	cbnz	r0, 8009d4c <sin+0x8c>
 8009d0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d12:	ed9d 0b00 	vldr	d0, [sp]
 8009d16:	2001      	movs	r0, #1
 8009d18:	f000 fe4e 	bl	800a9b8 <__kernel_sin>
 8009d1c:	ec51 0b10 	vmov	r0, r1, d0
 8009d20:	e7e6      	b.n	8009cf0 <sin+0x30>
 8009d22:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d26:	ed9d 0b00 	vldr	d0, [sp]
 8009d2a:	f000 fa2d 	bl	800a188 <__kernel_cos>
 8009d2e:	e7f5      	b.n	8009d1c <sin+0x5c>
 8009d30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d34:	ed9d 0b00 	vldr	d0, [sp]
 8009d38:	2001      	movs	r0, #1
 8009d3a:	f000 fe3d 	bl	800a9b8 <__kernel_sin>
 8009d3e:	ec53 2b10 	vmov	r2, r3, d0
 8009d42:	ee10 0a10 	vmov	r0, s0
 8009d46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d4a:	e7d1      	b.n	8009cf0 <sin+0x30>
 8009d4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d50:	ed9d 0b00 	vldr	d0, [sp]
 8009d54:	f000 fa18 	bl	800a188 <__kernel_cos>
 8009d58:	e7f1      	b.n	8009d3e <sin+0x7e>
 8009d5a:	bf00      	nop
 8009d5c:	f3af 8000 	nop.w
	...
 8009d68:	3fe921fb 	.word	0x3fe921fb
 8009d6c:	7fefffff 	.word	0x7fefffff

08009d70 <__ieee754_rem_pio2>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	ed2d 8b02 	vpush	{d8}
 8009d78:	ec55 4b10 	vmov	r4, r5, d0
 8009d7c:	4bca      	ldr	r3, [pc, #808]	; (800a0a8 <__ieee754_rem_pio2+0x338>)
 8009d7e:	b08b      	sub	sp, #44	; 0x2c
 8009d80:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009d84:	4598      	cmp	r8, r3
 8009d86:	4682      	mov	sl, r0
 8009d88:	9502      	str	r5, [sp, #8]
 8009d8a:	dc08      	bgt.n	8009d9e <__ieee754_rem_pio2+0x2e>
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2300      	movs	r3, #0
 8009d90:	ed80 0b00 	vstr	d0, [r0]
 8009d94:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009d98:	f04f 0b00 	mov.w	fp, #0
 8009d9c:	e028      	b.n	8009df0 <__ieee754_rem_pio2+0x80>
 8009d9e:	4bc3      	ldr	r3, [pc, #780]	; (800a0ac <__ieee754_rem_pio2+0x33c>)
 8009da0:	4598      	cmp	r8, r3
 8009da2:	dc78      	bgt.n	8009e96 <__ieee754_rem_pio2+0x126>
 8009da4:	9b02      	ldr	r3, [sp, #8]
 8009da6:	4ec2      	ldr	r6, [pc, #776]	; (800a0b0 <__ieee754_rem_pio2+0x340>)
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	ee10 0a10 	vmov	r0, s0
 8009dae:	a3b0      	add	r3, pc, #704	; (adr r3, 800a070 <__ieee754_rem_pio2+0x300>)
 8009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db4:	4629      	mov	r1, r5
 8009db6:	dd39      	ble.n	8009e2c <__ieee754_rem_pio2+0xbc>
 8009db8:	f7f6 fa66 	bl	8000288 <__aeabi_dsub>
 8009dbc:	45b0      	cmp	r8, r6
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	460d      	mov	r5, r1
 8009dc2:	d01b      	beq.n	8009dfc <__ieee754_rem_pio2+0x8c>
 8009dc4:	a3ac      	add	r3, pc, #688	; (adr r3, 800a078 <__ieee754_rem_pio2+0x308>)
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	f7f6 fa5d 	bl	8000288 <__aeabi_dsub>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	e9ca 2300 	strd	r2, r3, [sl]
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	4629      	mov	r1, r5
 8009dda:	f7f6 fa55 	bl	8000288 <__aeabi_dsub>
 8009dde:	a3a6      	add	r3, pc, #664	; (adr r3, 800a078 <__ieee754_rem_pio2+0x308>)
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	f7f6 fa50 	bl	8000288 <__aeabi_dsub>
 8009de8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009dec:	f04f 0b01 	mov.w	fp, #1
 8009df0:	4658      	mov	r0, fp
 8009df2:	b00b      	add	sp, #44	; 0x2c
 8009df4:	ecbd 8b02 	vpop	{d8}
 8009df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfc:	a3a0      	add	r3, pc, #640	; (adr r3, 800a080 <__ieee754_rem_pio2+0x310>)
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	f7f6 fa41 	bl	8000288 <__aeabi_dsub>
 8009e06:	a3a0      	add	r3, pc, #640	; (adr r3, 800a088 <__ieee754_rem_pio2+0x318>)
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	460d      	mov	r5, r1
 8009e10:	f7f6 fa3a 	bl	8000288 <__aeabi_dsub>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	e9ca 2300 	strd	r2, r3, [sl]
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	4629      	mov	r1, r5
 8009e20:	f7f6 fa32 	bl	8000288 <__aeabi_dsub>
 8009e24:	a398      	add	r3, pc, #608	; (adr r3, 800a088 <__ieee754_rem_pio2+0x318>)
 8009e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2a:	e7db      	b.n	8009de4 <__ieee754_rem_pio2+0x74>
 8009e2c:	f7f6 fa2e 	bl	800028c <__adddf3>
 8009e30:	45b0      	cmp	r8, r6
 8009e32:	4604      	mov	r4, r0
 8009e34:	460d      	mov	r5, r1
 8009e36:	d016      	beq.n	8009e66 <__ieee754_rem_pio2+0xf6>
 8009e38:	a38f      	add	r3, pc, #572	; (adr r3, 800a078 <__ieee754_rem_pio2+0x308>)
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	f7f6 fa25 	bl	800028c <__adddf3>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	e9ca 2300 	strd	r2, r3, [sl]
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	f7f6 fa1b 	bl	8000288 <__aeabi_dsub>
 8009e52:	a389      	add	r3, pc, #548	; (adr r3, 800a078 <__ieee754_rem_pio2+0x308>)
 8009e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e58:	f7f6 fa18 	bl	800028c <__adddf3>
 8009e5c:	f04f 3bff 	mov.w	fp, #4294967295
 8009e60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009e64:	e7c4      	b.n	8009df0 <__ieee754_rem_pio2+0x80>
 8009e66:	a386      	add	r3, pc, #536	; (adr r3, 800a080 <__ieee754_rem_pio2+0x310>)
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	f7f6 fa0e 	bl	800028c <__adddf3>
 8009e70:	a385      	add	r3, pc, #532	; (adr r3, 800a088 <__ieee754_rem_pio2+0x318>)
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	4604      	mov	r4, r0
 8009e78:	460d      	mov	r5, r1
 8009e7a:	f7f6 fa07 	bl	800028c <__adddf3>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	e9ca 2300 	strd	r2, r3, [sl]
 8009e86:	4620      	mov	r0, r4
 8009e88:	4629      	mov	r1, r5
 8009e8a:	f7f6 f9fd 	bl	8000288 <__aeabi_dsub>
 8009e8e:	a37e      	add	r3, pc, #504	; (adr r3, 800a088 <__ieee754_rem_pio2+0x318>)
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	e7e0      	b.n	8009e58 <__ieee754_rem_pio2+0xe8>
 8009e96:	4b87      	ldr	r3, [pc, #540]	; (800a0b4 <__ieee754_rem_pio2+0x344>)
 8009e98:	4598      	cmp	r8, r3
 8009e9a:	f300 80d9 	bgt.w	800a050 <__ieee754_rem_pio2+0x2e0>
 8009e9e:	f000 fe49 	bl	800ab34 <fabs>
 8009ea2:	ec55 4b10 	vmov	r4, r5, d0
 8009ea6:	ee10 0a10 	vmov	r0, s0
 8009eaa:	a379      	add	r3, pc, #484	; (adr r3, 800a090 <__ieee754_rem_pio2+0x320>)
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	f7f6 fba1 	bl	80005f8 <__aeabi_dmul>
 8009eb6:	4b80      	ldr	r3, [pc, #512]	; (800a0b8 <__ieee754_rem_pio2+0x348>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f7f6 f9e7 	bl	800028c <__adddf3>
 8009ebe:	f7f6 fe35 	bl	8000b2c <__aeabi_d2iz>
 8009ec2:	4683      	mov	fp, r0
 8009ec4:	f7f6 fb2e 	bl	8000524 <__aeabi_i2d>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	ec43 2b18 	vmov	d8, r2, r3
 8009ed0:	a367      	add	r3, pc, #412	; (adr r3, 800a070 <__ieee754_rem_pio2+0x300>)
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f7f6 fb8f 	bl	80005f8 <__aeabi_dmul>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4620      	mov	r0, r4
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	f7f6 f9d1 	bl	8000288 <__aeabi_dsub>
 8009ee6:	a364      	add	r3, pc, #400	; (adr r3, 800a078 <__ieee754_rem_pio2+0x308>)
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	4606      	mov	r6, r0
 8009eee:	460f      	mov	r7, r1
 8009ef0:	ec51 0b18 	vmov	r0, r1, d8
 8009ef4:	f7f6 fb80 	bl	80005f8 <__aeabi_dmul>
 8009ef8:	f1bb 0f1f 	cmp.w	fp, #31
 8009efc:	4604      	mov	r4, r0
 8009efe:	460d      	mov	r5, r1
 8009f00:	dc0d      	bgt.n	8009f1e <__ieee754_rem_pio2+0x1ae>
 8009f02:	4b6e      	ldr	r3, [pc, #440]	; (800a0bc <__ieee754_rem_pio2+0x34c>)
 8009f04:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f0c:	4543      	cmp	r3, r8
 8009f0e:	d006      	beq.n	8009f1e <__ieee754_rem_pio2+0x1ae>
 8009f10:	4622      	mov	r2, r4
 8009f12:	462b      	mov	r3, r5
 8009f14:	4630      	mov	r0, r6
 8009f16:	4639      	mov	r1, r7
 8009f18:	f7f6 f9b6 	bl	8000288 <__aeabi_dsub>
 8009f1c:	e00f      	b.n	8009f3e <__ieee754_rem_pio2+0x1ce>
 8009f1e:	462b      	mov	r3, r5
 8009f20:	4622      	mov	r2, r4
 8009f22:	4630      	mov	r0, r6
 8009f24:	4639      	mov	r1, r7
 8009f26:	f7f6 f9af 	bl	8000288 <__aeabi_dsub>
 8009f2a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009f2e:	9303      	str	r3, [sp, #12]
 8009f30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009f34:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009f38:	f1b8 0f10 	cmp.w	r8, #16
 8009f3c:	dc02      	bgt.n	8009f44 <__ieee754_rem_pio2+0x1d4>
 8009f3e:	e9ca 0100 	strd	r0, r1, [sl]
 8009f42:	e039      	b.n	8009fb8 <__ieee754_rem_pio2+0x248>
 8009f44:	a34e      	add	r3, pc, #312	; (adr r3, 800a080 <__ieee754_rem_pio2+0x310>)
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	ec51 0b18 	vmov	r0, r1, d8
 8009f4e:	f7f6 fb53 	bl	80005f8 <__aeabi_dmul>
 8009f52:	4604      	mov	r4, r0
 8009f54:	460d      	mov	r5, r1
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	f7f6 f993 	bl	8000288 <__aeabi_dsub>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4680      	mov	r8, r0
 8009f68:	4689      	mov	r9, r1
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	f7f6 f98b 	bl	8000288 <__aeabi_dsub>
 8009f72:	4622      	mov	r2, r4
 8009f74:	462b      	mov	r3, r5
 8009f76:	f7f6 f987 	bl	8000288 <__aeabi_dsub>
 8009f7a:	a343      	add	r3, pc, #268	; (adr r3, 800a088 <__ieee754_rem_pio2+0x318>)
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	4604      	mov	r4, r0
 8009f82:	460d      	mov	r5, r1
 8009f84:	ec51 0b18 	vmov	r0, r1, d8
 8009f88:	f7f6 fb36 	bl	80005f8 <__aeabi_dmul>
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	462b      	mov	r3, r5
 8009f90:	f7f6 f97a 	bl	8000288 <__aeabi_dsub>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4604      	mov	r4, r0
 8009f9a:	460d      	mov	r5, r1
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	4649      	mov	r1, r9
 8009fa0:	f7f6 f972 	bl	8000288 <__aeabi_dsub>
 8009fa4:	9a03      	ldr	r2, [sp, #12]
 8009fa6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	2b31      	cmp	r3, #49	; 0x31
 8009fae:	dc24      	bgt.n	8009ffa <__ieee754_rem_pio2+0x28a>
 8009fb0:	e9ca 0100 	strd	r0, r1, [sl]
 8009fb4:	4646      	mov	r6, r8
 8009fb6:	464f      	mov	r7, r9
 8009fb8:	e9da 8900 	ldrd	r8, r9, [sl]
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	4642      	mov	r2, r8
 8009fc0:	464b      	mov	r3, r9
 8009fc2:	4639      	mov	r1, r7
 8009fc4:	f7f6 f960 	bl	8000288 <__aeabi_dsub>
 8009fc8:	462b      	mov	r3, r5
 8009fca:	4622      	mov	r2, r4
 8009fcc:	f7f6 f95c 	bl	8000288 <__aeabi_dsub>
 8009fd0:	9b02      	ldr	r3, [sp, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009fd8:	f6bf af0a 	bge.w	8009df0 <__ieee754_rem_pio2+0x80>
 8009fdc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009fe0:	f8ca 3004 	str.w	r3, [sl, #4]
 8009fe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fe8:	f8ca 8000 	str.w	r8, [sl]
 8009fec:	f8ca 0008 	str.w	r0, [sl, #8]
 8009ff0:	f8ca 300c 	str.w	r3, [sl, #12]
 8009ff4:	f1cb 0b00 	rsb	fp, fp, #0
 8009ff8:	e6fa      	b.n	8009df0 <__ieee754_rem_pio2+0x80>
 8009ffa:	a327      	add	r3, pc, #156	; (adr r3, 800a098 <__ieee754_rem_pio2+0x328>)
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	ec51 0b18 	vmov	r0, r1, d8
 800a004:	f7f6 faf8 	bl	80005f8 <__aeabi_dmul>
 800a008:	4604      	mov	r4, r0
 800a00a:	460d      	mov	r5, r1
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	4640      	mov	r0, r8
 800a012:	4649      	mov	r1, r9
 800a014:	f7f6 f938 	bl	8000288 <__aeabi_dsub>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4606      	mov	r6, r0
 800a01e:	460f      	mov	r7, r1
 800a020:	4640      	mov	r0, r8
 800a022:	4649      	mov	r1, r9
 800a024:	f7f6 f930 	bl	8000288 <__aeabi_dsub>
 800a028:	4622      	mov	r2, r4
 800a02a:	462b      	mov	r3, r5
 800a02c:	f7f6 f92c 	bl	8000288 <__aeabi_dsub>
 800a030:	a31b      	add	r3, pc, #108	; (adr r3, 800a0a0 <__ieee754_rem_pio2+0x330>)
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	4604      	mov	r4, r0
 800a038:	460d      	mov	r5, r1
 800a03a:	ec51 0b18 	vmov	r0, r1, d8
 800a03e:	f7f6 fadb 	bl	80005f8 <__aeabi_dmul>
 800a042:	4622      	mov	r2, r4
 800a044:	462b      	mov	r3, r5
 800a046:	f7f6 f91f 	bl	8000288 <__aeabi_dsub>
 800a04a:	4604      	mov	r4, r0
 800a04c:	460d      	mov	r5, r1
 800a04e:	e75f      	b.n	8009f10 <__ieee754_rem_pio2+0x1a0>
 800a050:	4b1b      	ldr	r3, [pc, #108]	; (800a0c0 <__ieee754_rem_pio2+0x350>)
 800a052:	4598      	cmp	r8, r3
 800a054:	dd36      	ble.n	800a0c4 <__ieee754_rem_pio2+0x354>
 800a056:	ee10 2a10 	vmov	r2, s0
 800a05a:	462b      	mov	r3, r5
 800a05c:	4620      	mov	r0, r4
 800a05e:	4629      	mov	r1, r5
 800a060:	f7f6 f912 	bl	8000288 <__aeabi_dsub>
 800a064:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a068:	e9ca 0100 	strd	r0, r1, [sl]
 800a06c:	e694      	b.n	8009d98 <__ieee754_rem_pio2+0x28>
 800a06e:	bf00      	nop
 800a070:	54400000 	.word	0x54400000
 800a074:	3ff921fb 	.word	0x3ff921fb
 800a078:	1a626331 	.word	0x1a626331
 800a07c:	3dd0b461 	.word	0x3dd0b461
 800a080:	1a600000 	.word	0x1a600000
 800a084:	3dd0b461 	.word	0x3dd0b461
 800a088:	2e037073 	.word	0x2e037073
 800a08c:	3ba3198a 	.word	0x3ba3198a
 800a090:	6dc9c883 	.word	0x6dc9c883
 800a094:	3fe45f30 	.word	0x3fe45f30
 800a098:	2e000000 	.word	0x2e000000
 800a09c:	3ba3198a 	.word	0x3ba3198a
 800a0a0:	252049c1 	.word	0x252049c1
 800a0a4:	397b839a 	.word	0x397b839a
 800a0a8:	3fe921fb 	.word	0x3fe921fb
 800a0ac:	4002d97b 	.word	0x4002d97b
 800a0b0:	3ff921fb 	.word	0x3ff921fb
 800a0b4:	413921fb 	.word	0x413921fb
 800a0b8:	3fe00000 	.word	0x3fe00000
 800a0bc:	0800af18 	.word	0x0800af18
 800a0c0:	7fefffff 	.word	0x7fefffff
 800a0c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a0c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a0cc:	ee10 0a10 	vmov	r0, s0
 800a0d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a0d4:	ee10 6a10 	vmov	r6, s0
 800a0d8:	460f      	mov	r7, r1
 800a0da:	f7f6 fd27 	bl	8000b2c <__aeabi_d2iz>
 800a0de:	f7f6 fa21 	bl	8000524 <__aeabi_i2d>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0ee:	f7f6 f8cb 	bl	8000288 <__aeabi_dsub>
 800a0f2:	4b23      	ldr	r3, [pc, #140]	; (800a180 <__ieee754_rem_pio2+0x410>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f7f6 fa7f 	bl	80005f8 <__aeabi_dmul>
 800a0fa:	460f      	mov	r7, r1
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	f7f6 fd15 	bl	8000b2c <__aeabi_d2iz>
 800a102:	f7f6 fa0f 	bl	8000524 <__aeabi_i2d>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	4630      	mov	r0, r6
 800a10c:	4639      	mov	r1, r7
 800a10e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a112:	f7f6 f8b9 	bl	8000288 <__aeabi_dsub>
 800a116:	4b1a      	ldr	r3, [pc, #104]	; (800a180 <__ieee754_rem_pio2+0x410>)
 800a118:	2200      	movs	r2, #0
 800a11a:	f7f6 fa6d 	bl	80005f8 <__aeabi_dmul>
 800a11e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a122:	ad04      	add	r5, sp, #16
 800a124:	f04f 0803 	mov.w	r8, #3
 800a128:	46a9      	mov	r9, r5
 800a12a:	2600      	movs	r6, #0
 800a12c:	2700      	movs	r7, #0
 800a12e:	4632      	mov	r2, r6
 800a130:	463b      	mov	r3, r7
 800a132:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a136:	46c3      	mov	fp, r8
 800a138:	3d08      	subs	r5, #8
 800a13a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a13e:	f7f6 fcc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a142:	2800      	cmp	r0, #0
 800a144:	d1f3      	bne.n	800a12e <__ieee754_rem_pio2+0x3be>
 800a146:	4b0f      	ldr	r3, [pc, #60]	; (800a184 <__ieee754_rem_pio2+0x414>)
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	2302      	movs	r3, #2
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	4622      	mov	r2, r4
 800a150:	465b      	mov	r3, fp
 800a152:	4651      	mov	r1, sl
 800a154:	4648      	mov	r0, r9
 800a156:	f000 f8df 	bl	800a318 <__kernel_rem_pio2>
 800a15a:	9b02      	ldr	r3, [sp, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	4683      	mov	fp, r0
 800a160:	f6bf ae46 	bge.w	8009df0 <__ieee754_rem_pio2+0x80>
 800a164:	e9da 2100 	ldrd	r2, r1, [sl]
 800a168:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a16c:	e9ca 2300 	strd	r2, r3, [sl]
 800a170:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a178:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a17c:	e73a      	b.n	8009ff4 <__ieee754_rem_pio2+0x284>
 800a17e:	bf00      	nop
 800a180:	41700000 	.word	0x41700000
 800a184:	0800af98 	.word	0x0800af98

0800a188 <__kernel_cos>:
 800a188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	ec57 6b10 	vmov	r6, r7, d0
 800a190:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a194:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a198:	ed8d 1b00 	vstr	d1, [sp]
 800a19c:	da07      	bge.n	800a1ae <__kernel_cos+0x26>
 800a19e:	ee10 0a10 	vmov	r0, s0
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	f7f6 fcc2 	bl	8000b2c <__aeabi_d2iz>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	f000 8088 	beq.w	800a2be <__kernel_cos+0x136>
 800a1ae:	4632      	mov	r2, r6
 800a1b0:	463b      	mov	r3, r7
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	4639      	mov	r1, r7
 800a1b6:	f7f6 fa1f 	bl	80005f8 <__aeabi_dmul>
 800a1ba:	4b51      	ldr	r3, [pc, #324]	; (800a300 <__kernel_cos+0x178>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	4604      	mov	r4, r0
 800a1c0:	460d      	mov	r5, r1
 800a1c2:	f7f6 fa19 	bl	80005f8 <__aeabi_dmul>
 800a1c6:	a340      	add	r3, pc, #256	; (adr r3, 800a2c8 <__kernel_cos+0x140>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	4682      	mov	sl, r0
 800a1ce:	468b      	mov	fp, r1
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	f7f6 fa10 	bl	80005f8 <__aeabi_dmul>
 800a1d8:	a33d      	add	r3, pc, #244	; (adr r3, 800a2d0 <__kernel_cos+0x148>)
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	f7f6 f855 	bl	800028c <__adddf3>
 800a1e2:	4622      	mov	r2, r4
 800a1e4:	462b      	mov	r3, r5
 800a1e6:	f7f6 fa07 	bl	80005f8 <__aeabi_dmul>
 800a1ea:	a33b      	add	r3, pc, #236	; (adr r3, 800a2d8 <__kernel_cos+0x150>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	f7f6 f84a 	bl	8000288 <__aeabi_dsub>
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	462b      	mov	r3, r5
 800a1f8:	f7f6 f9fe 	bl	80005f8 <__aeabi_dmul>
 800a1fc:	a338      	add	r3, pc, #224	; (adr r3, 800a2e0 <__kernel_cos+0x158>)
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	f7f6 f843 	bl	800028c <__adddf3>
 800a206:	4622      	mov	r2, r4
 800a208:	462b      	mov	r3, r5
 800a20a:	f7f6 f9f5 	bl	80005f8 <__aeabi_dmul>
 800a20e:	a336      	add	r3, pc, #216	; (adr r3, 800a2e8 <__kernel_cos+0x160>)
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	f7f6 f838 	bl	8000288 <__aeabi_dsub>
 800a218:	4622      	mov	r2, r4
 800a21a:	462b      	mov	r3, r5
 800a21c:	f7f6 f9ec 	bl	80005f8 <__aeabi_dmul>
 800a220:	a333      	add	r3, pc, #204	; (adr r3, 800a2f0 <__kernel_cos+0x168>)
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	f7f6 f831 	bl	800028c <__adddf3>
 800a22a:	4622      	mov	r2, r4
 800a22c:	462b      	mov	r3, r5
 800a22e:	f7f6 f9e3 	bl	80005f8 <__aeabi_dmul>
 800a232:	4622      	mov	r2, r4
 800a234:	462b      	mov	r3, r5
 800a236:	f7f6 f9df 	bl	80005f8 <__aeabi_dmul>
 800a23a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a23e:	4604      	mov	r4, r0
 800a240:	460d      	mov	r5, r1
 800a242:	4630      	mov	r0, r6
 800a244:	4639      	mov	r1, r7
 800a246:	f7f6 f9d7 	bl	80005f8 <__aeabi_dmul>
 800a24a:	460b      	mov	r3, r1
 800a24c:	4602      	mov	r2, r0
 800a24e:	4629      	mov	r1, r5
 800a250:	4620      	mov	r0, r4
 800a252:	f7f6 f819 	bl	8000288 <__aeabi_dsub>
 800a256:	4b2b      	ldr	r3, [pc, #172]	; (800a304 <__kernel_cos+0x17c>)
 800a258:	4598      	cmp	r8, r3
 800a25a:	4606      	mov	r6, r0
 800a25c:	460f      	mov	r7, r1
 800a25e:	dc10      	bgt.n	800a282 <__kernel_cos+0xfa>
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	4650      	mov	r0, sl
 800a266:	4659      	mov	r1, fp
 800a268:	f7f6 f80e 	bl	8000288 <__aeabi_dsub>
 800a26c:	460b      	mov	r3, r1
 800a26e:	4926      	ldr	r1, [pc, #152]	; (800a308 <__kernel_cos+0x180>)
 800a270:	4602      	mov	r2, r0
 800a272:	2000      	movs	r0, #0
 800a274:	f7f6 f808 	bl	8000288 <__aeabi_dsub>
 800a278:	ec41 0b10 	vmov	d0, r0, r1
 800a27c:	b003      	add	sp, #12
 800a27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a282:	4b22      	ldr	r3, [pc, #136]	; (800a30c <__kernel_cos+0x184>)
 800a284:	4920      	ldr	r1, [pc, #128]	; (800a308 <__kernel_cos+0x180>)
 800a286:	4598      	cmp	r8, r3
 800a288:	bfcc      	ite	gt
 800a28a:	4d21      	ldrgt	r5, [pc, #132]	; (800a310 <__kernel_cos+0x188>)
 800a28c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a290:	2400      	movs	r4, #0
 800a292:	4622      	mov	r2, r4
 800a294:	462b      	mov	r3, r5
 800a296:	2000      	movs	r0, #0
 800a298:	f7f5 fff6 	bl	8000288 <__aeabi_dsub>
 800a29c:	4622      	mov	r2, r4
 800a29e:	4680      	mov	r8, r0
 800a2a0:	4689      	mov	r9, r1
 800a2a2:	462b      	mov	r3, r5
 800a2a4:	4650      	mov	r0, sl
 800a2a6:	4659      	mov	r1, fp
 800a2a8:	f7f5 ffee 	bl	8000288 <__aeabi_dsub>
 800a2ac:	4632      	mov	r2, r6
 800a2ae:	463b      	mov	r3, r7
 800a2b0:	f7f5 ffea 	bl	8000288 <__aeabi_dsub>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	e7da      	b.n	800a274 <__kernel_cos+0xec>
 800a2be:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a2f8 <__kernel_cos+0x170>
 800a2c2:	e7db      	b.n	800a27c <__kernel_cos+0xf4>
 800a2c4:	f3af 8000 	nop.w
 800a2c8:	be8838d4 	.word	0xbe8838d4
 800a2cc:	bda8fae9 	.word	0xbda8fae9
 800a2d0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a2d4:	3e21ee9e 	.word	0x3e21ee9e
 800a2d8:	809c52ad 	.word	0x809c52ad
 800a2dc:	3e927e4f 	.word	0x3e927e4f
 800a2e0:	19cb1590 	.word	0x19cb1590
 800a2e4:	3efa01a0 	.word	0x3efa01a0
 800a2e8:	16c15177 	.word	0x16c15177
 800a2ec:	3f56c16c 	.word	0x3f56c16c
 800a2f0:	5555554c 	.word	0x5555554c
 800a2f4:	3fa55555 	.word	0x3fa55555
 800a2f8:	00000000 	.word	0x00000000
 800a2fc:	3ff00000 	.word	0x3ff00000
 800a300:	3fe00000 	.word	0x3fe00000
 800a304:	3fd33332 	.word	0x3fd33332
 800a308:	3ff00000 	.word	0x3ff00000
 800a30c:	3fe90000 	.word	0x3fe90000
 800a310:	3fd20000 	.word	0x3fd20000
 800a314:	00000000 	.word	0x00000000

0800a318 <__kernel_rem_pio2>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	ed2d 8b02 	vpush	{d8}
 800a320:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a324:	f112 0f14 	cmn.w	r2, #20
 800a328:	9308      	str	r3, [sp, #32]
 800a32a:	9101      	str	r1, [sp, #4]
 800a32c:	4bc4      	ldr	r3, [pc, #784]	; (800a640 <__kernel_rem_pio2+0x328>)
 800a32e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a330:	900b      	str	r0, [sp, #44]	; 0x2c
 800a332:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a336:	9302      	str	r3, [sp, #8]
 800a338:	9b08      	ldr	r3, [sp, #32]
 800a33a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a33e:	bfa8      	it	ge
 800a340:	1ed4      	subge	r4, r2, #3
 800a342:	9306      	str	r3, [sp, #24]
 800a344:	bfb2      	itee	lt
 800a346:	2400      	movlt	r4, #0
 800a348:	2318      	movge	r3, #24
 800a34a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a34e:	f06f 0317 	mvn.w	r3, #23
 800a352:	fb04 3303 	mla	r3, r4, r3, r3
 800a356:	eb03 0a02 	add.w	sl, r3, r2
 800a35a:	9b02      	ldr	r3, [sp, #8]
 800a35c:	9a06      	ldr	r2, [sp, #24]
 800a35e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a630 <__kernel_rem_pio2+0x318>
 800a362:	eb03 0802 	add.w	r8, r3, r2
 800a366:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a368:	1aa7      	subs	r7, r4, r2
 800a36a:	ae22      	add	r6, sp, #136	; 0x88
 800a36c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a370:	2500      	movs	r5, #0
 800a372:	4545      	cmp	r5, r8
 800a374:	dd13      	ble.n	800a39e <__kernel_rem_pio2+0x86>
 800a376:	9b08      	ldr	r3, [sp, #32]
 800a378:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a630 <__kernel_rem_pio2+0x318>
 800a37c:	aa22      	add	r2, sp, #136	; 0x88
 800a37e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a382:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a386:	f04f 0800 	mov.w	r8, #0
 800a38a:	9b02      	ldr	r3, [sp, #8]
 800a38c:	4598      	cmp	r8, r3
 800a38e:	dc2f      	bgt.n	800a3f0 <__kernel_rem_pio2+0xd8>
 800a390:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a394:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a398:	462f      	mov	r7, r5
 800a39a:	2600      	movs	r6, #0
 800a39c:	e01b      	b.n	800a3d6 <__kernel_rem_pio2+0xbe>
 800a39e:	42ef      	cmn	r7, r5
 800a3a0:	d407      	bmi.n	800a3b2 <__kernel_rem_pio2+0x9a>
 800a3a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a3a6:	f7f6 f8bd 	bl	8000524 <__aeabi_i2d>
 800a3aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a3ae:	3501      	adds	r5, #1
 800a3b0:	e7df      	b.n	800a372 <__kernel_rem_pio2+0x5a>
 800a3b2:	ec51 0b18 	vmov	r0, r1, d8
 800a3b6:	e7f8      	b.n	800a3aa <__kernel_rem_pio2+0x92>
 800a3b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a3c0:	f7f6 f91a 	bl	80005f8 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3cc:	f7f5 ff5e 	bl	800028c <__adddf3>
 800a3d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3d4:	3601      	adds	r6, #1
 800a3d6:	9b06      	ldr	r3, [sp, #24]
 800a3d8:	429e      	cmp	r6, r3
 800a3da:	f1a7 0708 	sub.w	r7, r7, #8
 800a3de:	ddeb      	ble.n	800a3b8 <__kernel_rem_pio2+0xa0>
 800a3e0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a3e4:	f108 0801 	add.w	r8, r8, #1
 800a3e8:	ecab 7b02 	vstmia	fp!, {d7}
 800a3ec:	3508      	adds	r5, #8
 800a3ee:	e7cc      	b.n	800a38a <__kernel_rem_pio2+0x72>
 800a3f0:	9b02      	ldr	r3, [sp, #8]
 800a3f2:	aa0e      	add	r2, sp, #56	; 0x38
 800a3f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3f8:	930d      	str	r3, [sp, #52]	; 0x34
 800a3fa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a3fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a400:	9c02      	ldr	r4, [sp, #8]
 800a402:	930c      	str	r3, [sp, #48]	; 0x30
 800a404:	00e3      	lsls	r3, r4, #3
 800a406:	930a      	str	r3, [sp, #40]	; 0x28
 800a408:	ab9a      	add	r3, sp, #616	; 0x268
 800a40a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a40e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a412:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a416:	ab72      	add	r3, sp, #456	; 0x1c8
 800a418:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a41c:	46c3      	mov	fp, r8
 800a41e:	46a1      	mov	r9, r4
 800a420:	f1b9 0f00 	cmp.w	r9, #0
 800a424:	f1a5 0508 	sub.w	r5, r5, #8
 800a428:	dc77      	bgt.n	800a51a <__kernel_rem_pio2+0x202>
 800a42a:	ec47 6b10 	vmov	d0, r6, r7
 800a42e:	4650      	mov	r0, sl
 800a430:	f000 fc0a 	bl	800ac48 <scalbn>
 800a434:	ec57 6b10 	vmov	r6, r7, d0
 800a438:	2200      	movs	r2, #0
 800a43a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a43e:	ee10 0a10 	vmov	r0, s0
 800a442:	4639      	mov	r1, r7
 800a444:	f7f6 f8d8 	bl	80005f8 <__aeabi_dmul>
 800a448:	ec41 0b10 	vmov	d0, r0, r1
 800a44c:	f000 fb7c 	bl	800ab48 <floor>
 800a450:	4b7c      	ldr	r3, [pc, #496]	; (800a644 <__kernel_rem_pio2+0x32c>)
 800a452:	ec51 0b10 	vmov	r0, r1, d0
 800a456:	2200      	movs	r2, #0
 800a458:	f7f6 f8ce 	bl	80005f8 <__aeabi_dmul>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	4630      	mov	r0, r6
 800a462:	4639      	mov	r1, r7
 800a464:	f7f5 ff10 	bl	8000288 <__aeabi_dsub>
 800a468:	460f      	mov	r7, r1
 800a46a:	4606      	mov	r6, r0
 800a46c:	f7f6 fb5e 	bl	8000b2c <__aeabi_d2iz>
 800a470:	9004      	str	r0, [sp, #16]
 800a472:	f7f6 f857 	bl	8000524 <__aeabi_i2d>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4630      	mov	r0, r6
 800a47c:	4639      	mov	r1, r7
 800a47e:	f7f5 ff03 	bl	8000288 <__aeabi_dsub>
 800a482:	f1ba 0f00 	cmp.w	sl, #0
 800a486:	4606      	mov	r6, r0
 800a488:	460f      	mov	r7, r1
 800a48a:	dd6d      	ble.n	800a568 <__kernel_rem_pio2+0x250>
 800a48c:	1e62      	subs	r2, r4, #1
 800a48e:	ab0e      	add	r3, sp, #56	; 0x38
 800a490:	9d04      	ldr	r5, [sp, #16]
 800a492:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a496:	f1ca 0118 	rsb	r1, sl, #24
 800a49a:	fa40 f301 	asr.w	r3, r0, r1
 800a49e:	441d      	add	r5, r3
 800a4a0:	408b      	lsls	r3, r1
 800a4a2:	1ac0      	subs	r0, r0, r3
 800a4a4:	ab0e      	add	r3, sp, #56	; 0x38
 800a4a6:	9504      	str	r5, [sp, #16]
 800a4a8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a4ac:	f1ca 0317 	rsb	r3, sl, #23
 800a4b0:	fa40 fb03 	asr.w	fp, r0, r3
 800a4b4:	f1bb 0f00 	cmp.w	fp, #0
 800a4b8:	dd65      	ble.n	800a586 <__kernel_rem_pio2+0x26e>
 800a4ba:	9b04      	ldr	r3, [sp, #16]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	3301      	adds	r3, #1
 800a4c0:	9304      	str	r3, [sp, #16]
 800a4c2:	4615      	mov	r5, r2
 800a4c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a4c8:	4294      	cmp	r4, r2
 800a4ca:	f300 809c 	bgt.w	800a606 <__kernel_rem_pio2+0x2ee>
 800a4ce:	f1ba 0f00 	cmp.w	sl, #0
 800a4d2:	dd07      	ble.n	800a4e4 <__kernel_rem_pio2+0x1cc>
 800a4d4:	f1ba 0f01 	cmp.w	sl, #1
 800a4d8:	f000 80c0 	beq.w	800a65c <__kernel_rem_pio2+0x344>
 800a4dc:	f1ba 0f02 	cmp.w	sl, #2
 800a4e0:	f000 80c6 	beq.w	800a670 <__kernel_rem_pio2+0x358>
 800a4e4:	f1bb 0f02 	cmp.w	fp, #2
 800a4e8:	d14d      	bne.n	800a586 <__kernel_rem_pio2+0x26e>
 800a4ea:	4632      	mov	r2, r6
 800a4ec:	463b      	mov	r3, r7
 800a4ee:	4956      	ldr	r1, [pc, #344]	; (800a648 <__kernel_rem_pio2+0x330>)
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	f7f5 fec9 	bl	8000288 <__aeabi_dsub>
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	460f      	mov	r7, r1
 800a4fa:	2d00      	cmp	r5, #0
 800a4fc:	d043      	beq.n	800a586 <__kernel_rem_pio2+0x26e>
 800a4fe:	4650      	mov	r0, sl
 800a500:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a638 <__kernel_rem_pio2+0x320>
 800a504:	f000 fba0 	bl	800ac48 <scalbn>
 800a508:	4630      	mov	r0, r6
 800a50a:	4639      	mov	r1, r7
 800a50c:	ec53 2b10 	vmov	r2, r3, d0
 800a510:	f7f5 feba 	bl	8000288 <__aeabi_dsub>
 800a514:	4606      	mov	r6, r0
 800a516:	460f      	mov	r7, r1
 800a518:	e035      	b.n	800a586 <__kernel_rem_pio2+0x26e>
 800a51a:	4b4c      	ldr	r3, [pc, #304]	; (800a64c <__kernel_rem_pio2+0x334>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	4630      	mov	r0, r6
 800a520:	4639      	mov	r1, r7
 800a522:	f7f6 f869 	bl	80005f8 <__aeabi_dmul>
 800a526:	f7f6 fb01 	bl	8000b2c <__aeabi_d2iz>
 800a52a:	f7f5 fffb 	bl	8000524 <__aeabi_i2d>
 800a52e:	4602      	mov	r2, r0
 800a530:	460b      	mov	r3, r1
 800a532:	ec43 2b18 	vmov	d8, r2, r3
 800a536:	4b46      	ldr	r3, [pc, #280]	; (800a650 <__kernel_rem_pio2+0x338>)
 800a538:	2200      	movs	r2, #0
 800a53a:	f7f6 f85d 	bl	80005f8 <__aeabi_dmul>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	4630      	mov	r0, r6
 800a544:	4639      	mov	r1, r7
 800a546:	f7f5 fe9f 	bl	8000288 <__aeabi_dsub>
 800a54a:	f7f6 faef 	bl	8000b2c <__aeabi_d2iz>
 800a54e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a552:	f84b 0b04 	str.w	r0, [fp], #4
 800a556:	ec51 0b18 	vmov	r0, r1, d8
 800a55a:	f7f5 fe97 	bl	800028c <__adddf3>
 800a55e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a562:	4606      	mov	r6, r0
 800a564:	460f      	mov	r7, r1
 800a566:	e75b      	b.n	800a420 <__kernel_rem_pio2+0x108>
 800a568:	d106      	bne.n	800a578 <__kernel_rem_pio2+0x260>
 800a56a:	1e63      	subs	r3, r4, #1
 800a56c:	aa0e      	add	r2, sp, #56	; 0x38
 800a56e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a572:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a576:	e79d      	b.n	800a4b4 <__kernel_rem_pio2+0x19c>
 800a578:	4b36      	ldr	r3, [pc, #216]	; (800a654 <__kernel_rem_pio2+0x33c>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	f7f6 fac2 	bl	8000b04 <__aeabi_dcmpge>
 800a580:	2800      	cmp	r0, #0
 800a582:	d13d      	bne.n	800a600 <__kernel_rem_pio2+0x2e8>
 800a584:	4683      	mov	fp, r0
 800a586:	2200      	movs	r2, #0
 800a588:	2300      	movs	r3, #0
 800a58a:	4630      	mov	r0, r6
 800a58c:	4639      	mov	r1, r7
 800a58e:	f7f6 fa9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a592:	2800      	cmp	r0, #0
 800a594:	f000 80c0 	beq.w	800a718 <__kernel_rem_pio2+0x400>
 800a598:	1e65      	subs	r5, r4, #1
 800a59a:	462b      	mov	r3, r5
 800a59c:	2200      	movs	r2, #0
 800a59e:	9902      	ldr	r1, [sp, #8]
 800a5a0:	428b      	cmp	r3, r1
 800a5a2:	da6c      	bge.n	800a67e <__kernel_rem_pio2+0x366>
 800a5a4:	2a00      	cmp	r2, #0
 800a5a6:	f000 8089 	beq.w	800a6bc <__kernel_rem_pio2+0x3a4>
 800a5aa:	ab0e      	add	r3, sp, #56	; 0x38
 800a5ac:	f1aa 0a18 	sub.w	sl, sl, #24
 800a5b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 80ad 	beq.w	800a714 <__kernel_rem_pio2+0x3fc>
 800a5ba:	4650      	mov	r0, sl
 800a5bc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a638 <__kernel_rem_pio2+0x320>
 800a5c0:	f000 fb42 	bl	800ac48 <scalbn>
 800a5c4:	ab9a      	add	r3, sp, #616	; 0x268
 800a5c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a5ca:	ec57 6b10 	vmov	r6, r7, d0
 800a5ce:	00ec      	lsls	r4, r5, #3
 800a5d0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a5d4:	46aa      	mov	sl, r5
 800a5d6:	f1ba 0f00 	cmp.w	sl, #0
 800a5da:	f280 80d6 	bge.w	800a78a <__kernel_rem_pio2+0x472>
 800a5de:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a630 <__kernel_rem_pio2+0x318>
 800a5e2:	462e      	mov	r6, r5
 800a5e4:	2e00      	cmp	r6, #0
 800a5e6:	f2c0 8104 	blt.w	800a7f2 <__kernel_rem_pio2+0x4da>
 800a5ea:	ab72      	add	r3, sp, #456	; 0x1c8
 800a5ec:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a5f0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a658 <__kernel_rem_pio2+0x340>
 800a5f4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a5f8:	f04f 0800 	mov.w	r8, #0
 800a5fc:	1baf      	subs	r7, r5, r6
 800a5fe:	e0ea      	b.n	800a7d6 <__kernel_rem_pio2+0x4be>
 800a600:	f04f 0b02 	mov.w	fp, #2
 800a604:	e759      	b.n	800a4ba <__kernel_rem_pio2+0x1a2>
 800a606:	f8d8 3000 	ldr.w	r3, [r8]
 800a60a:	b955      	cbnz	r5, 800a622 <__kernel_rem_pio2+0x30a>
 800a60c:	b123      	cbz	r3, 800a618 <__kernel_rem_pio2+0x300>
 800a60e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a612:	f8c8 3000 	str.w	r3, [r8]
 800a616:	2301      	movs	r3, #1
 800a618:	3201      	adds	r2, #1
 800a61a:	f108 0804 	add.w	r8, r8, #4
 800a61e:	461d      	mov	r5, r3
 800a620:	e752      	b.n	800a4c8 <__kernel_rem_pio2+0x1b0>
 800a622:	1acb      	subs	r3, r1, r3
 800a624:	f8c8 3000 	str.w	r3, [r8]
 800a628:	462b      	mov	r3, r5
 800a62a:	e7f5      	b.n	800a618 <__kernel_rem_pio2+0x300>
 800a62c:	f3af 8000 	nop.w
	...
 800a63c:	3ff00000 	.word	0x3ff00000
 800a640:	0800b0e0 	.word	0x0800b0e0
 800a644:	40200000 	.word	0x40200000
 800a648:	3ff00000 	.word	0x3ff00000
 800a64c:	3e700000 	.word	0x3e700000
 800a650:	41700000 	.word	0x41700000
 800a654:	3fe00000 	.word	0x3fe00000
 800a658:	0800b0a0 	.word	0x0800b0a0
 800a65c:	1e62      	subs	r2, r4, #1
 800a65e:	ab0e      	add	r3, sp, #56	; 0x38
 800a660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a664:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a668:	a90e      	add	r1, sp, #56	; 0x38
 800a66a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a66e:	e739      	b.n	800a4e4 <__kernel_rem_pio2+0x1cc>
 800a670:	1e62      	subs	r2, r4, #1
 800a672:	ab0e      	add	r3, sp, #56	; 0x38
 800a674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a678:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a67c:	e7f4      	b.n	800a668 <__kernel_rem_pio2+0x350>
 800a67e:	a90e      	add	r1, sp, #56	; 0x38
 800a680:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a684:	3b01      	subs	r3, #1
 800a686:	430a      	orrs	r2, r1
 800a688:	e789      	b.n	800a59e <__kernel_rem_pio2+0x286>
 800a68a:	3301      	adds	r3, #1
 800a68c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a690:	2900      	cmp	r1, #0
 800a692:	d0fa      	beq.n	800a68a <__kernel_rem_pio2+0x372>
 800a694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a696:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a69a:	446a      	add	r2, sp
 800a69c:	3a98      	subs	r2, #152	; 0x98
 800a69e:	920a      	str	r2, [sp, #40]	; 0x28
 800a6a0:	9a08      	ldr	r2, [sp, #32]
 800a6a2:	18e3      	adds	r3, r4, r3
 800a6a4:	18a5      	adds	r5, r4, r2
 800a6a6:	aa22      	add	r2, sp, #136	; 0x88
 800a6a8:	f104 0801 	add.w	r8, r4, #1
 800a6ac:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a6b0:	9304      	str	r3, [sp, #16]
 800a6b2:	9b04      	ldr	r3, [sp, #16]
 800a6b4:	4543      	cmp	r3, r8
 800a6b6:	da04      	bge.n	800a6c2 <__kernel_rem_pio2+0x3aa>
 800a6b8:	461c      	mov	r4, r3
 800a6ba:	e6a3      	b.n	800a404 <__kernel_rem_pio2+0xec>
 800a6bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e7e4      	b.n	800a68c <__kernel_rem_pio2+0x374>
 800a6c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6c4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a6c8:	f7f5 ff2c 	bl	8000524 <__aeabi_i2d>
 800a6cc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6d2:	46ab      	mov	fp, r5
 800a6d4:	461c      	mov	r4, r3
 800a6d6:	f04f 0900 	mov.w	r9, #0
 800a6da:	2600      	movs	r6, #0
 800a6dc:	2700      	movs	r7, #0
 800a6de:	9b06      	ldr	r3, [sp, #24]
 800a6e0:	4599      	cmp	r9, r3
 800a6e2:	dd06      	ble.n	800a6f2 <__kernel_rem_pio2+0x3da>
 800a6e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6e6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a6ea:	f108 0801 	add.w	r8, r8, #1
 800a6ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a6f0:	e7df      	b.n	800a6b2 <__kernel_rem_pio2+0x39a>
 800a6f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a6f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a6fa:	f7f5 ff7d 	bl	80005f8 <__aeabi_dmul>
 800a6fe:	4602      	mov	r2, r0
 800a700:	460b      	mov	r3, r1
 800a702:	4630      	mov	r0, r6
 800a704:	4639      	mov	r1, r7
 800a706:	f7f5 fdc1 	bl	800028c <__adddf3>
 800a70a:	f109 0901 	add.w	r9, r9, #1
 800a70e:	4606      	mov	r6, r0
 800a710:	460f      	mov	r7, r1
 800a712:	e7e4      	b.n	800a6de <__kernel_rem_pio2+0x3c6>
 800a714:	3d01      	subs	r5, #1
 800a716:	e748      	b.n	800a5aa <__kernel_rem_pio2+0x292>
 800a718:	ec47 6b10 	vmov	d0, r6, r7
 800a71c:	f1ca 0000 	rsb	r0, sl, #0
 800a720:	f000 fa92 	bl	800ac48 <scalbn>
 800a724:	ec57 6b10 	vmov	r6, r7, d0
 800a728:	4ba0      	ldr	r3, [pc, #640]	; (800a9ac <__kernel_rem_pio2+0x694>)
 800a72a:	ee10 0a10 	vmov	r0, s0
 800a72e:	2200      	movs	r2, #0
 800a730:	4639      	mov	r1, r7
 800a732:	f7f6 f9e7 	bl	8000b04 <__aeabi_dcmpge>
 800a736:	b1f8      	cbz	r0, 800a778 <__kernel_rem_pio2+0x460>
 800a738:	4b9d      	ldr	r3, [pc, #628]	; (800a9b0 <__kernel_rem_pio2+0x698>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	4630      	mov	r0, r6
 800a73e:	4639      	mov	r1, r7
 800a740:	f7f5 ff5a 	bl	80005f8 <__aeabi_dmul>
 800a744:	f7f6 f9f2 	bl	8000b2c <__aeabi_d2iz>
 800a748:	4680      	mov	r8, r0
 800a74a:	f7f5 feeb 	bl	8000524 <__aeabi_i2d>
 800a74e:	4b97      	ldr	r3, [pc, #604]	; (800a9ac <__kernel_rem_pio2+0x694>)
 800a750:	2200      	movs	r2, #0
 800a752:	f7f5 ff51 	bl	80005f8 <__aeabi_dmul>
 800a756:	460b      	mov	r3, r1
 800a758:	4602      	mov	r2, r0
 800a75a:	4639      	mov	r1, r7
 800a75c:	4630      	mov	r0, r6
 800a75e:	f7f5 fd93 	bl	8000288 <__aeabi_dsub>
 800a762:	f7f6 f9e3 	bl	8000b2c <__aeabi_d2iz>
 800a766:	1c65      	adds	r5, r4, #1
 800a768:	ab0e      	add	r3, sp, #56	; 0x38
 800a76a:	f10a 0a18 	add.w	sl, sl, #24
 800a76e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a772:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a776:	e720      	b.n	800a5ba <__kernel_rem_pio2+0x2a2>
 800a778:	4630      	mov	r0, r6
 800a77a:	4639      	mov	r1, r7
 800a77c:	f7f6 f9d6 	bl	8000b2c <__aeabi_d2iz>
 800a780:	ab0e      	add	r3, sp, #56	; 0x38
 800a782:	4625      	mov	r5, r4
 800a784:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a788:	e717      	b.n	800a5ba <__kernel_rem_pio2+0x2a2>
 800a78a:	ab0e      	add	r3, sp, #56	; 0x38
 800a78c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a790:	f7f5 fec8 	bl	8000524 <__aeabi_i2d>
 800a794:	4632      	mov	r2, r6
 800a796:	463b      	mov	r3, r7
 800a798:	f7f5 ff2e 	bl	80005f8 <__aeabi_dmul>
 800a79c:	4b84      	ldr	r3, [pc, #528]	; (800a9b0 <__kernel_rem_pio2+0x698>)
 800a79e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	f7f5 ff26 	bl	80005f8 <__aeabi_dmul>
 800a7ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	460f      	mov	r7, r1
 800a7b4:	e70f      	b.n	800a5d6 <__kernel_rem_pio2+0x2be>
 800a7b6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a7ba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a7be:	f7f5 ff1b 	bl	80005f8 <__aeabi_dmul>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7ca:	f7f5 fd5f 	bl	800028c <__adddf3>
 800a7ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a7d2:	f108 0801 	add.w	r8, r8, #1
 800a7d6:	9b02      	ldr	r3, [sp, #8]
 800a7d8:	4598      	cmp	r8, r3
 800a7da:	dc01      	bgt.n	800a7e0 <__kernel_rem_pio2+0x4c8>
 800a7dc:	45b8      	cmp	r8, r7
 800a7de:	ddea      	ble.n	800a7b6 <__kernel_rem_pio2+0x49e>
 800a7e0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a7e4:	ab4a      	add	r3, sp, #296	; 0x128
 800a7e6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a7ea:	ed87 7b00 	vstr	d7, [r7]
 800a7ee:	3e01      	subs	r6, #1
 800a7f0:	e6f8      	b.n	800a5e4 <__kernel_rem_pio2+0x2cc>
 800a7f2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	dc0b      	bgt.n	800a810 <__kernel_rem_pio2+0x4f8>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	dc35      	bgt.n	800a868 <__kernel_rem_pio2+0x550>
 800a7fc:	d059      	beq.n	800a8b2 <__kernel_rem_pio2+0x59a>
 800a7fe:	9b04      	ldr	r3, [sp, #16]
 800a800:	f003 0007 	and.w	r0, r3, #7
 800a804:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a808:	ecbd 8b02 	vpop	{d8}
 800a80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a810:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a812:	2b03      	cmp	r3, #3
 800a814:	d1f3      	bne.n	800a7fe <__kernel_rem_pio2+0x4e6>
 800a816:	ab4a      	add	r3, sp, #296	; 0x128
 800a818:	4423      	add	r3, r4
 800a81a:	9306      	str	r3, [sp, #24]
 800a81c:	461c      	mov	r4, r3
 800a81e:	469a      	mov	sl, r3
 800a820:	9502      	str	r5, [sp, #8]
 800a822:	9b02      	ldr	r3, [sp, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	f1aa 0a08 	sub.w	sl, sl, #8
 800a82a:	dc6b      	bgt.n	800a904 <__kernel_rem_pio2+0x5ec>
 800a82c:	46aa      	mov	sl, r5
 800a82e:	f1ba 0f01 	cmp.w	sl, #1
 800a832:	f1a4 0408 	sub.w	r4, r4, #8
 800a836:	f300 8085 	bgt.w	800a944 <__kernel_rem_pio2+0x62c>
 800a83a:	9c06      	ldr	r4, [sp, #24]
 800a83c:	2000      	movs	r0, #0
 800a83e:	3408      	adds	r4, #8
 800a840:	2100      	movs	r1, #0
 800a842:	2d01      	cmp	r5, #1
 800a844:	f300 809d 	bgt.w	800a982 <__kernel_rem_pio2+0x66a>
 800a848:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a84c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a850:	f1bb 0f00 	cmp.w	fp, #0
 800a854:	f040 809b 	bne.w	800a98e <__kernel_rem_pio2+0x676>
 800a858:	9b01      	ldr	r3, [sp, #4]
 800a85a:	e9c3 5600 	strd	r5, r6, [r3]
 800a85e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a862:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a866:	e7ca      	b.n	800a7fe <__kernel_rem_pio2+0x4e6>
 800a868:	3408      	adds	r4, #8
 800a86a:	ab4a      	add	r3, sp, #296	; 0x128
 800a86c:	441c      	add	r4, r3
 800a86e:	462e      	mov	r6, r5
 800a870:	2000      	movs	r0, #0
 800a872:	2100      	movs	r1, #0
 800a874:	2e00      	cmp	r6, #0
 800a876:	da36      	bge.n	800a8e6 <__kernel_rem_pio2+0x5ce>
 800a878:	f1bb 0f00 	cmp.w	fp, #0
 800a87c:	d039      	beq.n	800a8f2 <__kernel_rem_pio2+0x5da>
 800a87e:	4602      	mov	r2, r0
 800a880:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a884:	9c01      	ldr	r4, [sp, #4]
 800a886:	e9c4 2300 	strd	r2, r3, [r4]
 800a88a:	4602      	mov	r2, r0
 800a88c:	460b      	mov	r3, r1
 800a88e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a892:	f7f5 fcf9 	bl	8000288 <__aeabi_dsub>
 800a896:	ae4c      	add	r6, sp, #304	; 0x130
 800a898:	2401      	movs	r4, #1
 800a89a:	42a5      	cmp	r5, r4
 800a89c:	da2c      	bge.n	800a8f8 <__kernel_rem_pio2+0x5e0>
 800a89e:	f1bb 0f00 	cmp.w	fp, #0
 800a8a2:	d002      	beq.n	800a8aa <__kernel_rem_pio2+0x592>
 800a8a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	9b01      	ldr	r3, [sp, #4]
 800a8ac:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a8b0:	e7a5      	b.n	800a7fe <__kernel_rem_pio2+0x4e6>
 800a8b2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a8b6:	eb0d 0403 	add.w	r4, sp, r3
 800a8ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a8be:	2000      	movs	r0, #0
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	2d00      	cmp	r5, #0
 800a8c4:	da09      	bge.n	800a8da <__kernel_rem_pio2+0x5c2>
 800a8c6:	f1bb 0f00 	cmp.w	fp, #0
 800a8ca:	d002      	beq.n	800a8d2 <__kernel_rem_pio2+0x5ba>
 800a8cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	9b01      	ldr	r3, [sp, #4]
 800a8d4:	e9c3 0100 	strd	r0, r1, [r3]
 800a8d8:	e791      	b.n	800a7fe <__kernel_rem_pio2+0x4e6>
 800a8da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a8de:	f7f5 fcd5 	bl	800028c <__adddf3>
 800a8e2:	3d01      	subs	r5, #1
 800a8e4:	e7ed      	b.n	800a8c2 <__kernel_rem_pio2+0x5aa>
 800a8e6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a8ea:	f7f5 fccf 	bl	800028c <__adddf3>
 800a8ee:	3e01      	subs	r6, #1
 800a8f0:	e7c0      	b.n	800a874 <__kernel_rem_pio2+0x55c>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	e7c5      	b.n	800a884 <__kernel_rem_pio2+0x56c>
 800a8f8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a8fc:	f7f5 fcc6 	bl	800028c <__adddf3>
 800a900:	3401      	adds	r4, #1
 800a902:	e7ca      	b.n	800a89a <__kernel_rem_pio2+0x582>
 800a904:	e9da 8900 	ldrd	r8, r9, [sl]
 800a908:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a90c:	9b02      	ldr	r3, [sp, #8]
 800a90e:	3b01      	subs	r3, #1
 800a910:	9302      	str	r3, [sp, #8]
 800a912:	4632      	mov	r2, r6
 800a914:	463b      	mov	r3, r7
 800a916:	4640      	mov	r0, r8
 800a918:	4649      	mov	r1, r9
 800a91a:	f7f5 fcb7 	bl	800028c <__adddf3>
 800a91e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	4640      	mov	r0, r8
 800a928:	4649      	mov	r1, r9
 800a92a:	f7f5 fcad 	bl	8000288 <__aeabi_dsub>
 800a92e:	4632      	mov	r2, r6
 800a930:	463b      	mov	r3, r7
 800a932:	f7f5 fcab 	bl	800028c <__adddf3>
 800a936:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a93a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a93e:	ed8a 7b00 	vstr	d7, [sl]
 800a942:	e76e      	b.n	800a822 <__kernel_rem_pio2+0x50a>
 800a944:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a948:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a94c:	4640      	mov	r0, r8
 800a94e:	4632      	mov	r2, r6
 800a950:	463b      	mov	r3, r7
 800a952:	4649      	mov	r1, r9
 800a954:	f7f5 fc9a 	bl	800028c <__adddf3>
 800a958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	4640      	mov	r0, r8
 800a962:	4649      	mov	r1, r9
 800a964:	f7f5 fc90 	bl	8000288 <__aeabi_dsub>
 800a968:	4632      	mov	r2, r6
 800a96a:	463b      	mov	r3, r7
 800a96c:	f7f5 fc8e 	bl	800028c <__adddf3>
 800a970:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a974:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a978:	ed84 7b00 	vstr	d7, [r4]
 800a97c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a980:	e755      	b.n	800a82e <__kernel_rem_pio2+0x516>
 800a982:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a986:	f7f5 fc81 	bl	800028c <__adddf3>
 800a98a:	3d01      	subs	r5, #1
 800a98c:	e759      	b.n	800a842 <__kernel_rem_pio2+0x52a>
 800a98e:	9b01      	ldr	r3, [sp, #4]
 800a990:	9a01      	ldr	r2, [sp, #4]
 800a992:	601d      	str	r5, [r3, #0]
 800a994:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a998:	605c      	str	r4, [r3, #4]
 800a99a:	609f      	str	r7, [r3, #8]
 800a99c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a9a0:	60d3      	str	r3, [r2, #12]
 800a9a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9a6:	6110      	str	r0, [r2, #16]
 800a9a8:	6153      	str	r3, [r2, #20]
 800a9aa:	e728      	b.n	800a7fe <__kernel_rem_pio2+0x4e6>
 800a9ac:	41700000 	.word	0x41700000
 800a9b0:	3e700000 	.word	0x3e700000
 800a9b4:	00000000 	.word	0x00000000

0800a9b8 <__kernel_sin>:
 800a9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9bc:	ed2d 8b04 	vpush	{d8-d9}
 800a9c0:	eeb0 8a41 	vmov.f32	s16, s2
 800a9c4:	eef0 8a61 	vmov.f32	s17, s3
 800a9c8:	ec55 4b10 	vmov	r4, r5, d0
 800a9cc:	b083      	sub	sp, #12
 800a9ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a9d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a9d6:	9001      	str	r0, [sp, #4]
 800a9d8:	da06      	bge.n	800a9e8 <__kernel_sin+0x30>
 800a9da:	ee10 0a10 	vmov	r0, s0
 800a9de:	4629      	mov	r1, r5
 800a9e0:	f7f6 f8a4 	bl	8000b2c <__aeabi_d2iz>
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	d051      	beq.n	800aa8c <__kernel_sin+0xd4>
 800a9e8:	4622      	mov	r2, r4
 800a9ea:	462b      	mov	r3, r5
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	f7f5 fe02 	bl	80005f8 <__aeabi_dmul>
 800a9f4:	4682      	mov	sl, r0
 800a9f6:	468b      	mov	fp, r1
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	4629      	mov	r1, r5
 800aa00:	f7f5 fdfa 	bl	80005f8 <__aeabi_dmul>
 800aa04:	a341      	add	r3, pc, #260	; (adr r3, 800ab0c <__kernel_sin+0x154>)
 800aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	4689      	mov	r9, r1
 800aa0e:	4650      	mov	r0, sl
 800aa10:	4659      	mov	r1, fp
 800aa12:	f7f5 fdf1 	bl	80005f8 <__aeabi_dmul>
 800aa16:	a33f      	add	r3, pc, #252	; (adr r3, 800ab14 <__kernel_sin+0x15c>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f7f5 fc34 	bl	8000288 <__aeabi_dsub>
 800aa20:	4652      	mov	r2, sl
 800aa22:	465b      	mov	r3, fp
 800aa24:	f7f5 fde8 	bl	80005f8 <__aeabi_dmul>
 800aa28:	a33c      	add	r3, pc, #240	; (adr r3, 800ab1c <__kernel_sin+0x164>)
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	f7f5 fc2d 	bl	800028c <__adddf3>
 800aa32:	4652      	mov	r2, sl
 800aa34:	465b      	mov	r3, fp
 800aa36:	f7f5 fddf 	bl	80005f8 <__aeabi_dmul>
 800aa3a:	a33a      	add	r3, pc, #232	; (adr r3, 800ab24 <__kernel_sin+0x16c>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f7f5 fc22 	bl	8000288 <__aeabi_dsub>
 800aa44:	4652      	mov	r2, sl
 800aa46:	465b      	mov	r3, fp
 800aa48:	f7f5 fdd6 	bl	80005f8 <__aeabi_dmul>
 800aa4c:	a337      	add	r3, pc, #220	; (adr r3, 800ab2c <__kernel_sin+0x174>)
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	f7f5 fc1b 	bl	800028c <__adddf3>
 800aa56:	9b01      	ldr	r3, [sp, #4]
 800aa58:	4606      	mov	r6, r0
 800aa5a:	460f      	mov	r7, r1
 800aa5c:	b9eb      	cbnz	r3, 800aa9a <__kernel_sin+0xe2>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	460b      	mov	r3, r1
 800aa62:	4650      	mov	r0, sl
 800aa64:	4659      	mov	r1, fp
 800aa66:	f7f5 fdc7 	bl	80005f8 <__aeabi_dmul>
 800aa6a:	a325      	add	r3, pc, #148	; (adr r3, 800ab00 <__kernel_sin+0x148>)
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f7f5 fc0a 	bl	8000288 <__aeabi_dsub>
 800aa74:	4642      	mov	r2, r8
 800aa76:	464b      	mov	r3, r9
 800aa78:	f7f5 fdbe 	bl	80005f8 <__aeabi_dmul>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	460b      	mov	r3, r1
 800aa80:	4620      	mov	r0, r4
 800aa82:	4629      	mov	r1, r5
 800aa84:	f7f5 fc02 	bl	800028c <__adddf3>
 800aa88:	4604      	mov	r4, r0
 800aa8a:	460d      	mov	r5, r1
 800aa8c:	ec45 4b10 	vmov	d0, r4, r5
 800aa90:	b003      	add	sp, #12
 800aa92:	ecbd 8b04 	vpop	{d8-d9}
 800aa96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa9a:	4b1b      	ldr	r3, [pc, #108]	; (800ab08 <__kernel_sin+0x150>)
 800aa9c:	ec51 0b18 	vmov	r0, r1, d8
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f7f5 fda9 	bl	80005f8 <__aeabi_dmul>
 800aaa6:	4632      	mov	r2, r6
 800aaa8:	ec41 0b19 	vmov	d9, r0, r1
 800aaac:	463b      	mov	r3, r7
 800aaae:	4640      	mov	r0, r8
 800aab0:	4649      	mov	r1, r9
 800aab2:	f7f5 fda1 	bl	80005f8 <__aeabi_dmul>
 800aab6:	4602      	mov	r2, r0
 800aab8:	460b      	mov	r3, r1
 800aaba:	ec51 0b19 	vmov	r0, r1, d9
 800aabe:	f7f5 fbe3 	bl	8000288 <__aeabi_dsub>
 800aac2:	4652      	mov	r2, sl
 800aac4:	465b      	mov	r3, fp
 800aac6:	f7f5 fd97 	bl	80005f8 <__aeabi_dmul>
 800aaca:	ec53 2b18 	vmov	r2, r3, d8
 800aace:	f7f5 fbdb 	bl	8000288 <__aeabi_dsub>
 800aad2:	a30b      	add	r3, pc, #44	; (adr r3, 800ab00 <__kernel_sin+0x148>)
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	4606      	mov	r6, r0
 800aada:	460f      	mov	r7, r1
 800aadc:	4640      	mov	r0, r8
 800aade:	4649      	mov	r1, r9
 800aae0:	f7f5 fd8a 	bl	80005f8 <__aeabi_dmul>
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4630      	mov	r0, r6
 800aaea:	4639      	mov	r1, r7
 800aaec:	f7f5 fbce 	bl	800028c <__adddf3>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	f7f5 fbc6 	bl	8000288 <__aeabi_dsub>
 800aafc:	e7c4      	b.n	800aa88 <__kernel_sin+0xd0>
 800aafe:	bf00      	nop
 800ab00:	55555549 	.word	0x55555549
 800ab04:	3fc55555 	.word	0x3fc55555
 800ab08:	3fe00000 	.word	0x3fe00000
 800ab0c:	5acfd57c 	.word	0x5acfd57c
 800ab10:	3de5d93a 	.word	0x3de5d93a
 800ab14:	8a2b9ceb 	.word	0x8a2b9ceb
 800ab18:	3e5ae5e6 	.word	0x3e5ae5e6
 800ab1c:	57b1fe7d 	.word	0x57b1fe7d
 800ab20:	3ec71de3 	.word	0x3ec71de3
 800ab24:	19c161d5 	.word	0x19c161d5
 800ab28:	3f2a01a0 	.word	0x3f2a01a0
 800ab2c:	1110f8a6 	.word	0x1110f8a6
 800ab30:	3f811111 	.word	0x3f811111

0800ab34 <fabs>:
 800ab34:	ec51 0b10 	vmov	r0, r1, d0
 800ab38:	ee10 2a10 	vmov	r2, s0
 800ab3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab40:	ec43 2b10 	vmov	d0, r2, r3
 800ab44:	4770      	bx	lr
	...

0800ab48 <floor>:
 800ab48:	ec51 0b10 	vmov	r0, r1, d0
 800ab4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ab54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ab58:	2e13      	cmp	r6, #19
 800ab5a:	ee10 5a10 	vmov	r5, s0
 800ab5e:	ee10 8a10 	vmov	r8, s0
 800ab62:	460c      	mov	r4, r1
 800ab64:	dc32      	bgt.n	800abcc <floor+0x84>
 800ab66:	2e00      	cmp	r6, #0
 800ab68:	da14      	bge.n	800ab94 <floor+0x4c>
 800ab6a:	a333      	add	r3, pc, #204	; (adr r3, 800ac38 <floor+0xf0>)
 800ab6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab70:	f7f5 fb8c 	bl	800028c <__adddf3>
 800ab74:	2200      	movs	r2, #0
 800ab76:	2300      	movs	r3, #0
 800ab78:	f7f5 ffce 	bl	8000b18 <__aeabi_dcmpgt>
 800ab7c:	b138      	cbz	r0, 800ab8e <floor+0x46>
 800ab7e:	2c00      	cmp	r4, #0
 800ab80:	da57      	bge.n	800ac32 <floor+0xea>
 800ab82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ab86:	431d      	orrs	r5, r3
 800ab88:	d001      	beq.n	800ab8e <floor+0x46>
 800ab8a:	4c2d      	ldr	r4, [pc, #180]	; (800ac40 <floor+0xf8>)
 800ab8c:	2500      	movs	r5, #0
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4628      	mov	r0, r5
 800ab92:	e025      	b.n	800abe0 <floor+0x98>
 800ab94:	4f2b      	ldr	r7, [pc, #172]	; (800ac44 <floor+0xfc>)
 800ab96:	4137      	asrs	r7, r6
 800ab98:	ea01 0307 	and.w	r3, r1, r7
 800ab9c:	4303      	orrs	r3, r0
 800ab9e:	d01f      	beq.n	800abe0 <floor+0x98>
 800aba0:	a325      	add	r3, pc, #148	; (adr r3, 800ac38 <floor+0xf0>)
 800aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba6:	f7f5 fb71 	bl	800028c <__adddf3>
 800abaa:	2200      	movs	r2, #0
 800abac:	2300      	movs	r3, #0
 800abae:	f7f5 ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d0eb      	beq.n	800ab8e <floor+0x46>
 800abb6:	2c00      	cmp	r4, #0
 800abb8:	bfbe      	ittt	lt
 800abba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800abbe:	fa43 f606 	asrlt.w	r6, r3, r6
 800abc2:	19a4      	addlt	r4, r4, r6
 800abc4:	ea24 0407 	bic.w	r4, r4, r7
 800abc8:	2500      	movs	r5, #0
 800abca:	e7e0      	b.n	800ab8e <floor+0x46>
 800abcc:	2e33      	cmp	r6, #51	; 0x33
 800abce:	dd0b      	ble.n	800abe8 <floor+0xa0>
 800abd0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800abd4:	d104      	bne.n	800abe0 <floor+0x98>
 800abd6:	ee10 2a10 	vmov	r2, s0
 800abda:	460b      	mov	r3, r1
 800abdc:	f7f5 fb56 	bl	800028c <__adddf3>
 800abe0:	ec41 0b10 	vmov	d0, r0, r1
 800abe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800abec:	f04f 33ff 	mov.w	r3, #4294967295
 800abf0:	fa23 f707 	lsr.w	r7, r3, r7
 800abf4:	4207      	tst	r7, r0
 800abf6:	d0f3      	beq.n	800abe0 <floor+0x98>
 800abf8:	a30f      	add	r3, pc, #60	; (adr r3, 800ac38 <floor+0xf0>)
 800abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfe:	f7f5 fb45 	bl	800028c <__adddf3>
 800ac02:	2200      	movs	r2, #0
 800ac04:	2300      	movs	r3, #0
 800ac06:	f7f5 ff87 	bl	8000b18 <__aeabi_dcmpgt>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d0bf      	beq.n	800ab8e <floor+0x46>
 800ac0e:	2c00      	cmp	r4, #0
 800ac10:	da02      	bge.n	800ac18 <floor+0xd0>
 800ac12:	2e14      	cmp	r6, #20
 800ac14:	d103      	bne.n	800ac1e <floor+0xd6>
 800ac16:	3401      	adds	r4, #1
 800ac18:	ea25 0507 	bic.w	r5, r5, r7
 800ac1c:	e7b7      	b.n	800ab8e <floor+0x46>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ac24:	fa03 f606 	lsl.w	r6, r3, r6
 800ac28:	4435      	add	r5, r6
 800ac2a:	4545      	cmp	r5, r8
 800ac2c:	bf38      	it	cc
 800ac2e:	18e4      	addcc	r4, r4, r3
 800ac30:	e7f2      	b.n	800ac18 <floor+0xd0>
 800ac32:	2500      	movs	r5, #0
 800ac34:	462c      	mov	r4, r5
 800ac36:	e7aa      	b.n	800ab8e <floor+0x46>
 800ac38:	8800759c 	.word	0x8800759c
 800ac3c:	7e37e43c 	.word	0x7e37e43c
 800ac40:	bff00000 	.word	0xbff00000
 800ac44:	000fffff 	.word	0x000fffff

0800ac48 <scalbn>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	ec55 4b10 	vmov	r4, r5, d0
 800ac4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ac52:	4606      	mov	r6, r0
 800ac54:	462b      	mov	r3, r5
 800ac56:	b99a      	cbnz	r2, 800ac80 <scalbn+0x38>
 800ac58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ac5c:	4323      	orrs	r3, r4
 800ac5e:	d036      	beq.n	800acce <scalbn+0x86>
 800ac60:	4b39      	ldr	r3, [pc, #228]	; (800ad48 <scalbn+0x100>)
 800ac62:	4629      	mov	r1, r5
 800ac64:	ee10 0a10 	vmov	r0, s0
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f7f5 fcc5 	bl	80005f8 <__aeabi_dmul>
 800ac6e:	4b37      	ldr	r3, [pc, #220]	; (800ad4c <scalbn+0x104>)
 800ac70:	429e      	cmp	r6, r3
 800ac72:	4604      	mov	r4, r0
 800ac74:	460d      	mov	r5, r1
 800ac76:	da10      	bge.n	800ac9a <scalbn+0x52>
 800ac78:	a32b      	add	r3, pc, #172	; (adr r3, 800ad28 <scalbn+0xe0>)
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	e03a      	b.n	800acf6 <scalbn+0xae>
 800ac80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ac84:	428a      	cmp	r2, r1
 800ac86:	d10c      	bne.n	800aca2 <scalbn+0x5a>
 800ac88:	ee10 2a10 	vmov	r2, s0
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	4629      	mov	r1, r5
 800ac90:	f7f5 fafc 	bl	800028c <__adddf3>
 800ac94:	4604      	mov	r4, r0
 800ac96:	460d      	mov	r5, r1
 800ac98:	e019      	b.n	800acce <scalbn+0x86>
 800ac9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ac9e:	460b      	mov	r3, r1
 800aca0:	3a36      	subs	r2, #54	; 0x36
 800aca2:	4432      	add	r2, r6
 800aca4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aca8:	428a      	cmp	r2, r1
 800acaa:	dd08      	ble.n	800acbe <scalbn+0x76>
 800acac:	2d00      	cmp	r5, #0
 800acae:	a120      	add	r1, pc, #128	; (adr r1, 800ad30 <scalbn+0xe8>)
 800acb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acb4:	da1c      	bge.n	800acf0 <scalbn+0xa8>
 800acb6:	a120      	add	r1, pc, #128	; (adr r1, 800ad38 <scalbn+0xf0>)
 800acb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acbc:	e018      	b.n	800acf0 <scalbn+0xa8>
 800acbe:	2a00      	cmp	r2, #0
 800acc0:	dd08      	ble.n	800acd4 <scalbn+0x8c>
 800acc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800acc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800acca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800acce:	ec45 4b10 	vmov	d0, r4, r5
 800acd2:	bd70      	pop	{r4, r5, r6, pc}
 800acd4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800acd8:	da19      	bge.n	800ad0e <scalbn+0xc6>
 800acda:	f24c 3350 	movw	r3, #50000	; 0xc350
 800acde:	429e      	cmp	r6, r3
 800ace0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ace4:	dd0a      	ble.n	800acfc <scalbn+0xb4>
 800ace6:	a112      	add	r1, pc, #72	; (adr r1, 800ad30 <scalbn+0xe8>)
 800ace8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1e2      	bne.n	800acb6 <scalbn+0x6e>
 800acf0:	a30f      	add	r3, pc, #60	; (adr r3, 800ad30 <scalbn+0xe8>)
 800acf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf6:	f7f5 fc7f 	bl	80005f8 <__aeabi_dmul>
 800acfa:	e7cb      	b.n	800ac94 <scalbn+0x4c>
 800acfc:	a10a      	add	r1, pc, #40	; (adr r1, 800ad28 <scalbn+0xe0>)
 800acfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d0b8      	beq.n	800ac78 <scalbn+0x30>
 800ad06:	a10e      	add	r1, pc, #56	; (adr r1, 800ad40 <scalbn+0xf8>)
 800ad08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad0c:	e7b4      	b.n	800ac78 <scalbn+0x30>
 800ad0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ad12:	3236      	adds	r2, #54	; 0x36
 800ad14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ad18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	4b0c      	ldr	r3, [pc, #48]	; (800ad50 <scalbn+0x108>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	e7e8      	b.n	800acf6 <scalbn+0xae>
 800ad24:	f3af 8000 	nop.w
 800ad28:	c2f8f359 	.word	0xc2f8f359
 800ad2c:	01a56e1f 	.word	0x01a56e1f
 800ad30:	8800759c 	.word	0x8800759c
 800ad34:	7e37e43c 	.word	0x7e37e43c
 800ad38:	8800759c 	.word	0x8800759c
 800ad3c:	fe37e43c 	.word	0xfe37e43c
 800ad40:	c2f8f359 	.word	0xc2f8f359
 800ad44:	81a56e1f 	.word	0x81a56e1f
 800ad48:	43500000 	.word	0x43500000
 800ad4c:	ffff3cb0 	.word	0xffff3cb0
 800ad50:	3c900000 	.word	0x3c900000

0800ad54 <_init>:
 800ad54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad56:	bf00      	nop
 800ad58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad5a:	bc08      	pop	{r3}
 800ad5c:	469e      	mov	lr, r3
 800ad5e:	4770      	bx	lr

0800ad60 <_fini>:
 800ad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad62:	bf00      	nop
 800ad64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad66:	bc08      	pop	{r3}
 800ad68:	469e      	mov	lr, r3
 800ad6a:	4770      	bx	lr
